from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import os
import zipfile
import tempfile
from datetime import datetime
import urllib.parse
import threading

class KnowledgeBase:
    def __init__(self):
        self.knowledge_file = "ai_knowledge.json"
        self.base_knowledge = self._load_base_knowledge()
        self.user_knowledge = self._load_user_knowledge()
    
    def _load_base_knowledge(self):
        return {
            "programming": {
                "python": {
                    "basics": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: x=5, —Ñ—É–Ω–∫—Ü–∏–∏: def name():, –∫–ª–∞—Å—Å—ã: class MyClass:",
                    "web": "Flask: –º–∏–∫—Ä–æ—Ñ—Ä–µ–π–º–≤–æ—Ä–∫, Django: –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫",
                    "data": "Pandas –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, NumPy –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, Matplotlib –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤",
                    "syntax": "–û—Ç—Å—Ç—É–ø—ã –≤–∞–∂–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 4 –ø—Ä–æ–±–µ–ª–∞. PEP8 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç —Å—Ç–∏–ª—è."
                },
                "javascript": {
                    "basics": "let x=5, —Ñ—É–Ω–∫—Ü–∏–∏: function name() {}, —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ: () => {}",
                    "web": "React, Vue, Angular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏",
                    "node": "JavaScript –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å Node.js"
                },
                "java": {
                    "basics": "public class Main { public static void main(String[] args) {} }",
                    "oop": "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º"
                }
            },
            "web_development": {
                "frontend": "HTML (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞), CSS (—Å—Ç–∏–ª–∏), JavaScript (–ª–æ–≥–∏–∫–∞)",
                "backend": "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, API",
                "tools": "Git, Docker, VS Code, Chrome DevTools"
            },
            "algorithms": {
                "sorting": "–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º, –ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è",
                "search": "–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫, –ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫",
                "structures": "–ú–∞—Å—Å–∏–≤—ã, —Å–ø–∏—Å–∫–∏, –¥–µ—Ä–µ–≤—å—è, –≥—Ä–∞—Ñ—ã, —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã"
            },
            "mobile": {
                "android": "Java/Kotlin, Android Studio",
                "ios": "Swift, Xcode", 
                "crossplatform": "Flutter, React Native"
            }
        }
    
    def _load_user_knowledge(self):
        try:
            if os.path.exists(self.knowledge_file):
                with open(self.knowledge_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return {"interactions": [], "created": datetime.now().isoformat()}
    
    def save_knowledge(self):
        try:
            with open(self.knowledge_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_knowledge, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Error saving knowledge: {e}")
    
    def add_interaction(self, question, answer):
        interaction = {
            "question": question,
            "answer": answer,
            "timestamp": datetime.now().isoformat()
        }
        
        self.user_knowledge["interactions"].append(interaction)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        if len(self.user_knowledge["interactions"]) > 100:
            self.user_knowledge["interactions"] = self.user_knowledge["interactions"][-100:]
        
        self.save_knowledge()
    
    def find_knowledge(self, query):
        query_lower = query.lower()
        results = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º
        for category, subcats in self.base_knowledge.items():
            for subcat, content in subcats.items():
                if isinstance(content, dict):
                    for key, value in content.items():
                        if query_lower in key.lower() or query_lower in str(value).lower():
                            results.append(f"{category}.{subcat}.{key}: {value}")
                elif query_lower in subcat.lower() or query_lower in str(content).lower():
                    results.append(f"{category}.{subcat}: {content}")
        
        return results[:3]
    
    def get_stats(self):
        interactions = self.user_knowledge.get("interactions", [])
        return {
            "total_interactions": len(interactions),
            "knowledge_categories": list(self.base_knowledge.keys()),
            "last_interaction": interactions[-1] if interactions else None
        }

class ProjectManager:
    def analyze_zip(self, file_content):
        try:
            temp_dir = tempfile.mkdtemp()
            zip_path = os.path.join(temp_dir, "temp.zip")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(zip_path, 'wb') as f:
                f.write(file_content)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir)
            
            return self.analyze_project(temp_dir)
            
        except Exception as e:
            print(f"Error analyzing ZIP: {e}")
            return None
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                import shutil
                shutil.rmtree(temp_dir, ignore_errors=True)
            except:
                pass
    
    def analyze_project(self, project_path):
        structure = {
            'name': os.path.basename(project_path),
            'files': [],
            'file_types': {},
            'total_files': 0,
            'total_size': 0
        }
        
        try:
            for root, dirs, files in os.walk(project_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    rel_path = os.path.relpath(file_path, project_path)
                    
                    file_size = os.path.getsize(file_path)
                    structure['total_size'] += file_size
                    
                    file_info = {
                        'path': rel_path,
                        'size': file_size,
                        'extension': os.path.splitext(file)[1].lower()
                    }
                    
                    structure['files'].append(file_info)
                    ext = file_info['extension']
                    structure['file_types'][ext] = structure['file_types'].get(ext, 0) + 1
                    structure['total_files'] += 1
            
            structure['total_size_mb'] = round(structure['total_size'] / (1024 * 1024), 2)
            return structure
            
        except Exception as e:
            print(f"Error analyzing project: {e}")
            return structure

class AIAssistant:
    def __init__(self):
        self.knowledge_base = KnowledgeBase()
        self.project_manager = ProjectManager()
    
    def process_message(self, message, context=None):
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –≤—ã—É—á–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        learned_response = self._get_learned_response(message)
        if learned_response:
            response = f"üí° [–ò–∑ –ø–∞–º—è—Ç–∏]\n{learned_response}"
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            response = self._generate_response(message, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        self.knowledge_base.add_interaction(message, response)
        
        return response
    
    def _get_learned_response(self, message):
        interactions = self.knowledge_base.user_knowledge.get("interactions", [])
        message_lower = message.lower()
        
        for interaction in interactions[-20:]:
            question_lower = interaction["question"].lower()
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å–ª–æ–≤–∞–º
            message_words = set(message_lower.split())
            question_words = set(question_lower.split())
            common_words = message_words.intersection(question_words)
            
            if len(common_words) >= 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å 2+ –æ–±—â–∏—Ö —Å–ª–æ–≤–∞
                return interaction["answer"]
        
        return None
    
    def _generate_response(self, message, context):
        message_lower = message.lower()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', 'start']):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. üöÄ\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–¥–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ ZIP —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
        
        # –ü–æ–º–æ—â—å
        if any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '–∫–æ–º–∞–Ω–¥—ã', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']):
            return self._get_help_message()
        
        # –ü–æ–∏—Å–∫ –≤ –∑–Ω–∞–Ω–∏—è—Ö
        knowledge = self.knowledge_base.find_knowledge(message)
        if knowledge:
            response = "üß† **–ù–∞–π–¥–µ–Ω–æ –≤ –∑–Ω–∞–Ω–∏—è—Ö:**\n" + "\n".join(knowledge)
            response += "\n\nüí° –ù—É–∂–Ω–∞ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? –ó–∞–¥–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å!"
            return response
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        if any(word in message_lower for word in ['—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–Ω–∞–ø–∏—à–∏ –∫–æ–¥', '—Å–æ–∑–¥–∞–π –∫–æ–¥', '–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞']):
            return self._generate_code(message)
        
        # –û –ø—Ä–æ–µ–∫—Ç–∞—Ö
        if any(word in message_lower for word in ['–ø—Ä–æ–µ–∫—Ç', 'zip', '–∞—Ä—Ö–∏–≤', '—Ñ–∞–π–ª']):
            return "üìÅ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ—Å—Ç–∞–≤ —Ñ–∞–π–ª–æ–≤."
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if any(word in message_lower for word in ['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '—Å—Ç–∞—Ç—É—Å', '–∏–Ω—Ñ–æ']):
            return self._get_stats_message()
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        return self._get_general_response(message)
    
    def _get_help_message(self):
        return """
ü§ñ **–ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è**

**–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ üí¨ –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏
‚Ä¢ üìÅ –ê–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ (ZIP –∞—Ä—Ö–∏–≤—ã)
‚Ä¢ üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞
‚Ä¢ üîç –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ Python, JavaScript, Java, SQL
‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (frontend/backend)
‚Ä¢ –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

**–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ:**
- –°–∏–Ω—Ç–∞–∫—Å–∏—Å–µ —è–∑—ã–∫–∞
- Best practices
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
- –†–µ—à–µ–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

–ò —è –æ–±—É—á—É—Å—å –Ω–∞ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö! üéØ
"""
    
    def _generate_code(self, message):
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['–≤–µ–±', '—Å–µ—Ä–≤–µ—Ä', 'flask', 'django']):
            return '''```python
from flask import Flask, jsonify, request

app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"message": "Hello World!", "status": "success"})

@app.route('/api/data', methods=['GET', 'POST'])
def handle_data():
    if request.method == 'POST':
        data = request.get_json()
        return jsonify({"received": data})
    else:
        return jsonify({"data": [1, 2, 3, 4, 5]})

if __name__ == '__main__':
    app.run(debug=True)
```'''
        
        elif any(word in message_lower for word in ['–¥–∞–Ω–Ω', '–∞–Ω–∞–ª–∏–∑', 'pandas', 'csv']):
            return '''```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def analyze_data(file_path):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_csv(file_path)
        
        analysis = {
            'rows': len(df),
            'columns': df.columns.tolist(),
            'missing_values': df.isnull().sum().to_dict(),
            'statistics': df.describe().to_dict()
        }
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(10, 6))
        df.hist()
        plt.savefig('data_analysis.png')
        plt.close()
        
        return analysis
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    result = analyze_data("data.csv")
    print(result)
```'''
        
        elif any(word in message_lower for word in ['–∫–ª–∞—Å—Å', '–æ–±—ä–µ–∫—Ç', 'oop']):
            return '''```python
class Student:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    
    def __init__(self, name, age, grades=None):
        self.name = name
        self.age = age
        self.grades = grades or []
    
    def add_grade(self, grade):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
        self.grades.append(grade)
    
    def get_average(self):
        """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞"""
        if not self.grades:
            return 0
        return sum(self.grades) / len(self.grades)
    
    def __str__(self):
        return f"Student(name={self.name}, age={self.age}, avg_grade={self.get_average()})"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
student = Student("–ò–≤–∞–Ω", 20)
student.add_grade(5)
student.add_grade(4)
student.add_grade(5)

print(student)  # Student(name=–ò–≤–∞–Ω, age=20, avg_grade=4.666666666666667)
```'''
        
        else:
            return f'''```python
# –†–µ—à–µ–Ω–∏–µ –¥–ª—è: {message}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞—à—É –ª–æ–≥–∏–∫—É –∑–¥–µ—Å—å!")
    
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data = [1, 2, 3, 4, 5]
    result = sum(x * 2 for x in data if x % 2 == 0)
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {{result}}")
    return result

if __name__ == "__main__":
    main()
```'''
    
    def _get_stats_message(self):
        stats = self.knowledge_base.get_stats()
        response = [
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò:**",
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {stats['total_interactions']}",
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞–Ω–∏–π: {', '.join(stats['knowledge_categories'])}",
            "",
            "üéØ **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≤–∫–ª—é—á–∞–µ—Ç:**",
            "‚Ä¢ Python, JavaScript, Java",
            "‚Ä¢ –í–µ–± –∏ –º–æ–±–∏–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É", 
            "‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
            "‚Ä¢ Best practices –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "",
            "üí° –Ø —É—á—É—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ!"
        ]
        return "\n".join(response)
    
    def _get_general_response(self, message):
        responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ù–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏...",
            "–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è...",
            "–£—á–∏—Ç—ã–≤–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —è –±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª...",
            "–ò—Å—Ö–æ–¥—è –∏–∑ –º–æ–µ–≥–æ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º...",
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏..."
        ]
        base_response = responses[len(message) % len(responses)]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—É—á–∞—é—â–∏–π –º–æ–º–µ–Ω—Ç
        stats = self.knowledge_base.get_stats()
        base_response += f"\n\nüìö –Ø —É–∂–µ –ø–æ–º–æ–≥ —Å {stats['total_interactions']} –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é —É—á–∏—Ç—å—Å—è!"
        
        return base_response

class AIRequestHandler(BaseHTTPRequestHandler):
    ai_assistant = AIAssistant()
    
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(HTML_INTERFACE.encode('utf-8'))
        elif self.path == '/api/stats':
            self._handle_api_stats()
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        if self.path == '/api/chat':
            self._handle_chat(post_data)
        elif self.path == '/api/upload':
            self._handle_upload(post_data)
        elif self.path == '/api/clear':
            self._handle_clear()
        else:
            self.send_response(404)
            self.end_headers()
    
    def _handle_api_stats(self):
        stats = self.ai_assistant.knowledge_base.get_stats()
        self._send_json_response(stats)
    
    def _handle_chat(self, post_data):
        try:
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            if not message:
                self._send_json_response({'error': 'Empty message'}, 400)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            def process_message():
                response = self.ai_assistant.process_message(message)
                self._send_json_response({
                    'response': response,
                    'timestamp': datetime.now().isoformat()
                })
            
            thread = threading.Thread(target=process_message)
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            self._send_json_response({'error': str(e)}, 500)
    
    def _handle_upload(self, post_data):
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ multipart form data
            content_type = self.headers.get('Content-Type', '')
            if 'multipart/form-data' not in content_type:
                self._send_json_response({'error': 'Invalid content type'}, 400)
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª –∏–∑ multipart –¥–∞–Ω–Ω—ã—Ö
            boundary = content_type.split('boundary=')[1]
            parts = post_data.split(b'--' + boundary.encode())
            
            for part in parts:
                if b'filename="' in part:
                    # –ù–∞—à–ª–∏ —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    file_content = part.split(b'\r\n\r\n')[1].rsplit(b'\r\n', 1)[0]
                    
                    project_info = self.ai_assistant.project_manager.analyze_zip(file_content)
                    
                    if project_info:
                        self._send_json_response({
                            'success': True,
                            'project_info': project_info,
                            'message': '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
                        })
                    else:
                        self._send_json_response({'error': 'Failed to analyze project'}, 500)
                    return
            
            self._send_json_response({'error': 'No file found'}, 400)
            
        except Exception as e:
            self._send_json_response({'error': str(e)}, 500)
    
    def _handle_clear(self):
        try:
            self.ai_assistant.knowledge_base.user_knowledge["interactions"] = []
            self.ai_assistant.knowledge_base.save_knowledge()
            self._send_json_response({'success': True, 'message': 'History cleared'})
        except Exception as e:
            self._send_json_response({'error': str(e)}, 500)
    
    def _send_json_response(self, data, status=200):
        self.send_response(status)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

# HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
HTML_INTERFACE = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: #2c3e50;
            color: white;
            padding: 25px;
            text-align: center;
        }

        .header h1 {
            margin-bottom: 10px;
            font-size: 2.2em;
        }

        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }

        .main-content {
            display: flex;
            min-height: 70vh;
        }

        @media (max-width: 768px) {
            .main-content {
                flex-direction: column;
            }
        }

        .sidebar {
            width: 300px;
            background: #34495e;
            color: white;
            padding: 20px;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #ecf0f1;
        }

        .messages {
            flex: 1;
            padding: 25px;
            overflow-y: auto;
            max-height: 60vh;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .message {
            padding: 18px;
            border-radius: 18px;
            max-width: 85%;
            word-wrap: break-word;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            animation: fadeIn 0.3s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .user-message {
            background: #3498db;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .ai-message {
            background: white;
            color: #2c3e50;
            border: 1px solid #bdc3c7;
            border-bottom-left-radius: 5px;
        }

        .input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid #bdc3c7;
            display: flex;
            gap: 12px;
            align-items: flex-end;
        }

        .input-area textarea {
            flex: 1;
            padding: 15px;
            border: 2px solid #bdc3c7;
            border-radius: 12px;
            resize: none;
            font-family: inherit;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .input-area textarea:focus {
            outline: none;
            border-color: #3498db;
        }

        .input-area button {
            padding: 15px 25px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .input-area button:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }

        .upload-area {
            border: 3px dashed #3498db;
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .upload-area:hover {
            background: #f8f9fa;
            border-color: #2980b9;
        }

        .file-input {
            display: none;
        }

        .project-info {
            background: #2c3e50;
            border-radius: 8px;
            padding: 18px;
            margin-top: 15px;
            font-size: 14px;
        }

        .code-block {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 18px;
            border-radius: 8px;
            margin-top: 12px;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            overflow-x: auto;
            font-size: 14px;
            line-height: 1.4;
        }

        .tab-buttons {
            display: flex;
            background: #34495e;
            border-bottom: 2px solid #2c3e50;
        }

        .tab-button {
            flex: 1;
            padding: 18px;
            text-align: center;
            background: #2c3e50;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: background 0.3s;
        }

        .tab-button:hover {
            background: #3c5570;
        }

        .tab-button.active {
            background: #3498db;
        }

        .tab-content {
            display: none;
            padding: 25px;
        }

        .tab-content.active {
            display: block;
        }

        .stats-item {
            background: white;
            padding: 18px;
            margin: 12px 0;
            border-radius: 10px;
            border-left: 5px solid #3498db;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .loading {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            padding: 20px;
        }

        .copy-btn {
            background: #27ae60;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            margin-top: 10px;
            font-size: 14px;
            transition: background 0.3s;
        }

        .copy-btn:hover {
            background: #219653;
        }

        .clear-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            margin-top: 15px;
            width: 100%;
            font-size: 16px;
            transition: background 0.3s;
        }

        .clear-btn:hover {
            background: #c0392b;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .quick-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s;
        }

        .quick-btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
        }

        @media (max-width: 480px) {
            .container {
                margin: 10px;
                border-radius: 12px;
            }
            
            .message {
                max-width: 95%;
                padding: 15px;
            }
            
            .input-area {
                flex-direction: column;
                gap: 10px;
            }
            
            .input-area button {
                width: 100%;
            }
            
            .quick-actions {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 1.8em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
            <p>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–¥–µ, –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤</p>
        </div>

        <div class="tab-buttons">
            <button class="tab-button active" onclick="openTab('chat')">üí¨ –ß–∞—Ç —Å –ò–ò</button>
            <button class="tab-button" onclick="openTab('project')">üìÅ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞</button>
            <button class="tab-button" onclick="openTab('stats')">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</button>
        </div>

        <div class="main-content">
            <!-- –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞ -->
            <div id="chat" class="tab-content active">
                <div class="messages" id="messages">
                    <div class="message ai-message">
                        <strong>ü§ñ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫:</strong><br><br>
                        –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. üöÄ<br><br>
                        –Ø –º–æ–≥—É:<br>
                        ‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–¥–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö<br>
                        ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–æ–≤ (ZIP –∞—Ä—Ö–∏–≤—ã)<br>
                        ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞<br>
                        ‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏<br><br>
                        –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç!
                    </div>
                </div>
                
                <div class="input-area">
                    <textarea id="messageInput" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Python –∫–ª–∞—Å—Å?' –∏–ª–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∏–º–µ—Ä –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞'..." rows="3"></textarea>
                    <button onclick="sendMessage()">üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>

                <div class="quick-actions">
                    <button class="quick-btn" onclick="quickQuestion('–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∏–º–µ—Ä Flask —Å–µ—Ä–≤–µ—Ä–∞')">üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä</button>
                    <button class="quick-btn" onclick="quickQuestion('–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ Python')">üêç –ö–ª–∞—Å—Å Python</button>
                    <button class="quick-btn" onclick="quickQuestion('–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å pandas?')">üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö</button>
                    <button class="quick-btn" onclick="quickQuestion('–ß—Ç–æ —Ç–∞–∫–æ–µ –û–û–ü?')">üéØ –û–û–ü</button>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ -->
            <div id="project" class="tab-content">
                <div class="sidebar">
                    <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                        <h3>üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP –ø—Ä–æ–µ–∫—Ç</h3>
                        <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª</p>
                        <p style="font-size: 12px; opacity: 0.8; margin-top: 10px;">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∞—Ä—Ö–∏–≤—ã –¥–æ 500MB</p>
                        <input type="file" id="fileInput" class="file-input" accept=".zip">
                    </div>
                    
                    <div id="projectInfo" style="display: none;">
                        <h4>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</h4>
                        <div class="project-info" id="projectDetails"></div>
                    </div>
                </div>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ -->
            <div id="stats" class="tab-content">
                <div class="sidebar">
                    <h4>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ò–ò</h4>
                    <div class="stats-item">
                        <strong>–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:</strong>
                        <span id="interactionsCount">0</span>
                    </div>
                    <div class="stats-item">
                        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞–Ω–∏–π:</strong>
                        <div id="knowledgeCategories">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    </div>
                    <button class="clear-btn" onclick="clearHistory()">üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentProject = null;

        function openTab(tabName) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.getElementById(tabName).classList.add('active');
            event.currentTarget.classList.add('active');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
            if (tabName === 'stats') {
                loadStats();
            }
        }

        function addMessage(sender, message, isUser = false) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
            let formattedMessage = formatMessage(message);
            
            messageDiv.innerHTML = formattedMessage;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò
            if (!isUser) {
                const copyBtn = document.createElement('button');
                copyBtn.className = 'copy-btn';
                copyBtn.textContent = 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç';
                copyBtn.onclick = () => copyToClipboard(message);
                messageDiv.appendChild(copyBtn);
            }
            
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function formatMessage(text) {
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –±–ª–æ–∫–∏
            let formatted = text.replace(/```(\w+)?\n([\s\S]*?)```/g, '<div class="code-block">$2</div>');
            
            // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            
            // –≠–º–æ–¥–∑–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            formatted = formatted.replace(/\n/g, '<br>');
            
            return formatted;
        }

        function copyToClipboard(text) {
            // –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            const cleanText = text.replace(/```\w?\n?/g, '').replace(/```/g, '');
            navigator.clipboard.writeText(cleanText).then(() => {
                alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! üìã');
            });
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            addMessage('–í—ã', message, true);
            input.value = '';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'message ai-message loading';
            loadingDiv.textContent = '–ò–ò –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...';
            document.getElementById('messages').appendChild(loadingDiv);
            
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });
                
                const data = await response.json();
                
                // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                loadingDiv.remove();
                
                if (data.error) {
                    addMessage('–ò–ò', `‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                } else {
                    addMessage('–ò–ò', data.response);
                }
                
            } catch (error) {
                loadingDiv.remove();
                addMessage('–ò–ò', `‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
            }
        }

        function quickQuestion(question) {
            document.getElementById('messageInput').value = question;
            sendMessage();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        document.getElementById('fileInput').addEventListener('change', handleFileUpload);

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            if (!file.name.endsWith('.zip')) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ZIP —Ñ–∞–π–ª');
                return;
            }
            
            uploadProject(file);
        }

        async function uploadProject(file) {
            const formData = new FormData();
            formData.append('file', file);
            
            try {
                const response = await fetch('/api/upload', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.error) {
                    alert(`–û—à–∏–±–∫–∞: ${data.error}`);
                } else {
                    currentProject = data.project_info;
                    showProjectInfo(data.project_info);
                    addMessage('–ò–ò', `‚úÖ –ü—Ä–æ–µ–∫—Ç "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\\nüìä –§–∞–π–ª–æ–≤: ${data.project_info.total_files}\\nüíæ –†–∞–∑–º–µ—Ä: ${data.project_info.total_size_mb}MB`);
                    openTab('chat');
                }
                
            } catch (error) {
                alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
            }
        }

        function showProjectInfo(projectInfo) {
            const projectDetails = document.getElementById('projectDetails');
            const projectInfoDiv = document.getElementById('projectInfo');
            
            let html = `
                <div style="margin-bottom: 10px;">
                    <strong>üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${projectInfo.name}
                </div>
                <div style="margin-bottom: 10px;">
                    <strong>üìä –§–∞–π–ª–æ–≤:</strong> ${projectInfo.total_files}
                </div>
                <div style="margin-bottom: 10px;">
                    <strong>üíæ –†–∞–∑–º–µ—Ä:</strong> ${projectInfo.total_size_mb} MB
                </div>
                <div>
                    <strong>üìã –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:</strong><br>
            `;
            
            for (const [ext, count] of Object.entries(projectInfo.file_types)) {
                if (count > 0 && ext) {
                    html += `  ‚Ä¢ ${ext}: ${count} —Ñ–∞–π–ª–æ–≤<br>`;
                }
            }
            
            html += '</div>';
            
            projectDetails.innerHTML = html;
            projectInfoDiv.style.display = 'block';
        }

        async function loadStats() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                document.getElementById('interactionsCount').textContent = data.total_interactions;
                
                const categoriesDiv = document.getElementById('knowledgeCategories');
                categoriesDiv.innerHTML = data.knowledge_categories.map(cat => 
                    `<div style="margin: 5px 0;">‚Ä¢ ${cat}</div>`
                ).join('');
                
            } catch (error) {
                console.error('Error loading stats:', error);
                document.getElementById('knowledgeCategories').innerHTML = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            }
        }

        async function clearHistory() {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è –ò–ò?')) return;
            
            try {
                const response = await fetch('/api/clear', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–∞!');
                    loadStats();
                } else {
                    alert(`–û—à–∏–±–∫–∞: ${data.error}`);
                }
                
            } catch (error) {
                alert(`–û—à–∏–±–∫–∞: ${error.message}`);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter (Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Drag and drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
        const uploadArea = document.querySelector('.upload-area');
        if (uploadArea) {
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.style.background = '#f8f9fa';
                uploadArea.style.borderColor = '#27ae60';
            });

            uploadArea.addEventListener('dragleave', () => {
                uploadArea.style.background = '';
                uploadArea.style.borderColor = '#3498db';
            });

            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.style.background = '';
                uploadArea.style.borderColor = '#3498db';
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    document.getElementById('fileInput').files = files;
                    handleFileUpload({ target: { files: files } });
                }
            });
        }

        // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('messageInput').focus();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', loadStats);
    </script>
</body>
</html>
'''

def main():
    port = int(os.environ.get('PORT', 8000))
    server = HTTPServer(('0.0.0.0', port), AIRequestHandler)
    
    print(f"ü§ñ –ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìç –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
    print(f"üìç –ò–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:{port}")
    print("\n‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ üí¨ –£–º–Ω—ã–π —á–∞—Ç —Å –æ–±—É—á–µ–Ω–∏–µ–º")
    print("‚Ä¢ üìÅ –ê–Ω–∞–ª–∏–∑ ZIP –ø—Ä–æ–µ–∫—Ç–æ–≤") 
    print("‚Ä¢ üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞")
    print("‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("‚Ä¢ üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()