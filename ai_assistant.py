from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import re
import random
import os
import base64
from datetime import datetime
import mimetypes

class EmotionalAI:
    """11. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ò–ò"""
    
    def __init__(self):
        self.user_mood = 'neutral'
        self.conversation_tone = 'professional'
        self.enthusiasm_level = 1.0
        
    def analyze_mood(self, message):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        positive_words = ['—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', '—Ä–∞–¥']
        negative_words = ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–∑–ª–æ–π', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—É—Å—Ç–∞–ª', '—Å–ª–æ–∂–Ω–æ']
        frustrated_words = ['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '–ø–æ–º–æ–≥–∏', '—Å—Ä–æ—á–Ω–æ', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–∑–∞—Å—Ç—Ä—è–ª']
        excited_words = ['–≤–∞—É', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ª—é–±–æ–ø—ã—Ç–Ω–æ', '—Ö–æ—á—É —É–∑–Ω–∞—Ç—å', '—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ']
        
        mood_scores = {
            'positive': sum(1 for word in positive_words if word in message_lower),
            'negative': sum(1 for word in negative_words if word in message_lower),
            'frustrated': sum(1 for word in frustrated_words if word in message_lower),
            'excited': sum(1 for word in excited_words if word in message_lower)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        max_score = max(mood_scores.values())
        if max_score > 0:
            for mood, score in mood_scores.items():
                if score == max_score:
                    self.user_mood = mood
                    break
        else:
            self.user_mood = 'neutral'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞
        self._update_enthusiasm()
        
    def _update_enthusiasm(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        enthusiasm_map = {
            'positive': 1.3,
            'excited': 1.5,
            'neutral': 1.0,
            'frustrated': 0.8,
            'negative': 0.7
        }
        self.enthusiasm_level = enthusiasm_map.get(self.user_mood, 1.0)
    
    def get_emotional_response(self, base_response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É"""
        emotional_prefixes = {
            'positive': ['–û—Ç–ª–∏—á–Ω–æ! ', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! ', '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! '],
            'excited': ['–í–∞—É! ', '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ', '–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ! ', '–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ! '],
            'neutral': ['', '–ò—Ç–∞–∫, ', '–•–æ—Ä–æ—à–æ, ', '–î–∞–≤–∞–π—Ç–µ '],
            'frustrated': ['–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ. ', '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! ', '–°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—ë–º—Å—è. ', '–í—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º! '],
            'negative': ['–ü–æ–Ω–∏–º–∞—é. ', '–í—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è. ', '–î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç–æ. ', '–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å. ']
        }
        
        emotional_suffixes = {
            'positive': [' üéâ', ' üòä', ' üëç', ' ‚ú®'],
            'excited': [' üöÄ', ' üî•', ' üí´', ' üåü'],
            'neutral': ['', '.', '!', ' üí°'],
            'frustrated': [' ü§ó', ' üí™', ' üîß', ' üõ†Ô∏è'],
            'negative': [' ü§ù', ' üìö', ' üéØ', ' üí≠']
        }
        
        prefix = random.choice(emotional_prefixes.get(self.user_mood, ['']))
        suffix = random.choice(emotional_suffixes.get(self.user_mood, ['']))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω—Ç—É–∑–∏–∞–∑–º —á–µ—Ä–µ–∑ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        if self.enthusiasm_level > 1.2 and '!' not in prefix:
            base_response = base_response.replace('.', '!', 1)
        
        return f"{prefix}{base_response}{suffix}"

class CodeGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –Ω—É–ª—è"""
    
    def __init__(self):
        self.syntax_templates = {
            'python': self._python_syntax,
            'javascript': self._javascript_syntax,
            'java': self._java_syntax,
            'cpp': self._cpp_syntax,
            'csharp': self._csharp_syntax
        }
        
        self.common_methods = {
            'getter': ['get_{}', '–ø–æ–ª—É—á–∏—Ç—å_{}', 'get{}'],
            'setter': ['set_{}', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_{}', 'set{}'],
            'validator': ['validate_{}', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_{}', 'is_valid_{}'],
            'processor': ['process_{}', '–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å_{}', 'handle_{}']
        }
    
    def _python_syntax(self, element_type, name, params=None):
        """–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è Python"""
        templates = {
            'class': f"class {name}:\n    def __init__(self{params or ''}):\n        pass",
            'function': f"def {name}({params or 'self'}):\n    pass",
            'method': f"def {name}(self{params or ''}):\n    pass",
            'variable': f"{name} = None",
            'if': f"if {name}:\n    pass",
            'loop': f"for item in {name}:\n    pass"
        }
        return templates.get(element_type, '')
    
    def _javascript_syntax(self, element_type, name, params=None):
        """–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è JavaScript"""
        templates = {
            'class': f"class {name} {{\n    constructor({params or ''}) {{\n    }}\n}}",
            'function': f"function {name}({params or ''}) {{\n}}",
            'method': f"{name}({params or ''}) {{\n}}",
            'variable': f"let {name} = null;",
            'if': f"if ({name}) {{\n}}",
            'loop': f"for (let item of {name}) {{\n}}"
        }
        return templates.get(element_type, '')
    
    def _java_syntax(self, element_type, name, params=None):
        """–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è Java"""
        templates = {
            'class': f"public class {name} {{\n    public {name}({params or ''}) {{\n    }}\n}}",
            'method': f"public void {name}({params or ''}) {{\n}}",
            'variable': f"private String {name};",
            'if': f"if ({name}) {{\n}}"
        }
        return templates.get(element_type, '')
    
    def _cpp_syntax(self, element_type, name, params=None):
        """–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è C++"""
        templates = {
            'class': f"class {name} {{\npublic:\n    {name}({params or ''}) {{\n    }}\n}};",
            'method': f"void {name}({params or ''}) {{\n}}",
            'variable': f"string {name};"
        }
        return templates.get(element_type, '')
    
    def _csharp_syntax(self, element_type, name, params=None):
        """–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è C#"""
        templates = {
            'class': f"public class {name} {{\n    public {name}({params or ''}) {{\n    }}\n}}",
            'method': f"public void {name}({params or ''}) {{\n}}",
            'property': f"public string {name} {{ get; set; }}"
        }
        return templates.get(element_type, '')
    
    def generate_method_logic(self, method_name, language, context):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è"""
        method_lower = method_name.lower()
        
        logic_templates = {
            'python': {
                'get': "return self.{}",
                'set': "self.{} = {}",
                'validate': "return isinstance({}, str) and len({}) > 0",
                'calculate': "return {} * {}",
                'process': "return [x for x in {} if x]",
                'check': "return {} is not None",
                'create': "return {}()",
                'find': "return next((x for x in {} if x == {}), None)"
            },
            'javascript': {
                'get': "return this.{};",
                'set': "this.{} = {};",
                'validate': "return typeof {} === 'string' && {}.length > 0;",
                'calculate': "return {} * {};"
            }
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        for prefix, logic in logic_templates.get(language, {}).items():
            if prefix in method_lower:
                field = method_lower.replace(prefix, '').strip('_')
                if field:
                    return logic.format(field, 'value')
        
        return "pass" if language == 'python' else "{}"
    
    def detect_method_type(self, method_name):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Ç–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        method_lower = method_name.lower()
        
        if any(prefix in method_lower for prefix in ['get_', 'get', '–ø–æ–ª—É—á–∏—Ç—å']):
            return 'getter'
        elif any(prefix in method_lower for prefix in ['set_', 'set', '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å']):
            return 'setter'
        elif any(prefix in method_lower for prefix in ['validate_', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', 'is_valid']):
            return 'validator'
        elif any(prefix in method_lower for prefix in ['process_', '–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å', 'handle']):
            return 'processor'
        elif any(prefix in method_lower for prefix in ['create_', '—Å–æ–∑–¥–∞—Ç—å']):
            return 'creator'
        elif any(prefix in method_lower for prefix in ['find_', '–Ω–∞–π—Ç–∏']):
            return 'finder'
        else:
            return 'general'

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {
            'interests': set(),
            'skill_level': 'beginner',
            'preferred_languages': set()
        }
        self.emotional_ai = EmotionalAI()
        self.code_generator = CodeGenerator()
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        self.programming_languages = {
            'python': {
                'name': 'Python',
                'paradigms': ['object-oriented', 'functional', 'imperative'],
                'typing': 'dynamic',
                'use_cases': ['web', 'data science', 'ai', 'automation'],
                'extensions': ['.py', '.pyw']
            },
            'javascript': {
                'name': 'JavaScript', 
                'paradigms': ['object-oriented', 'functional', 'event-driven'],
                'typing': 'dynamic',
                'use_cases': ['web frontend', 'web backend', 'mobile'],
                'extensions': ['.js', '.jsx', '.ts', '.tsx']
            },
            'java': {
                'name': 'Java',
                'paradigms': ['object-oriented', 'imperative'],
                'typing': 'static',
                'use_cases': ['enterprise', 'android', 'web backend'],
                'extensions': ['.java', '.jar']
            },
            'cpp': {
                'name': 'C++',
                'paradigms': ['object-oriented', 'procedural', 'generic'],
                'typing': 'static', 
                'use_cases': ['system', 'game', 'high-performance'],
                'extensions': ['.cpp', '.h', '.hpp']
            },
            'csharp': {
                'name': 'C#',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['windows', 'game', 'web', 'enterprise'],
                'extensions': ['.cs']
            },
            'go': {
                'name': 'Go',
                'paradigms': ['procedural', 'concurrent'],
                'typing': 'static',
                'use_cases': ['backend', 'system', 'cloud'],
                'extensions': ['.go']
            },
            'rust': {
                'name': 'Rust',
                'paradigms': ['functional', 'object-oriented'],
                'typing': 'static',
                'use_cases': ['system', 'web assembly', 'safety-critical'],
                'extensions': ['.rs']
            },
            'kotlin': {
                'name': 'Kotlin',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['android', 'backend', 'web'],
                'extensions': ['.kt']
            },
            'swift': {
                'name': 'Swift',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['ios', 'macos', 'backend'],
                'extensions': ['.swift']
            },
            'php': {
                'name': 'PHP',
                'paradigms': ['object-oriented', 'procedural'],
                'typing': 'dynamic',
                'use_cases': ['web backend'],
                'extensions': ['.php']
            },
            'ruby': {
                'name': 'Ruby',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'dynamic',
                'use_cases': ['web', 'scripting'],
                'extensions': ['.rb']
            },
            'typescript': {
                'name': 'TypeScript',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['web frontend', 'web backend'],
                'extensions': ['.ts', '.tsx']
            }
        }
    
    # ‚Ññ1 –ü–ê–†–°–ò–ù–ì –¢–†–ï–ë–û–í–ê–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    def _parse_code_requirements(self, message):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ, –∫–∞–∫–æ–π –∫–æ–¥ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        requirements = {
            'class_name': 'CustomClass',
            'attributes': [],
            'methods': [],
            'purpose': 'general',
            'language': 'python',
            'style': 'simple'
        }
        
        message_lower = message.lower()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
        class_patterns = [
            r'–∫–ª–∞—Å—Å\s+(\w+)',
            r'class\s+(\w+)',
            r'—Å–æ–∑–¥–∞–π\s+–∫–ª–∞—Å—Å\s+(\w+)',
            r'create\s+class\s+(\w+)'
        ]
        
        for pattern in class_patterns:
            match = re.search(pattern, message_lower)
            if match:
                requirements['class_name'] = match.group(1).capitalize()
                break
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤/–ø–æ–ª–µ–π
        attribute_patterns = [
            r'–∞—Ç—Ä–∏–±—É—Ç[–∞-—è]*\s+(\w+)',
            r'–ø–æ–ª–µ\s+(\w+)',
            r'—Å–≤–æ–π—Å—Ç–≤[–∞-—è]*\s+(\w+)',
            r'attribute\s+(\w+)',
            r'field\s+(\w+)',
            r'property\s+(\w+)',
            r'—Å\s+–ø–æ–ª—è–º–∏?\s+([\w\s,]+)',
            r'with\s+fields?\s+([\w\s,]+)'
        ]
        
        for pattern in attribute_patterns:
            match = re.search(pattern, message_lower)
            if match:
                attrs_text = match.group(1)
                # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º
                attrs = re.split(r'[,\s]+', attrs_text)
                requirements['attributes'].extend([attr.strip() for attr in attrs if attr.strip()])
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
        method_patterns = [
            r'–º–µ—Ç–æ–¥[–∞-—è]*\s+(\w+)',
            r'—Ñ—É–Ω–∫—Ü–∏[–∞-—è]*\s+(\w+)',
            r'method\s+(\w+)',
            r'function\s+(\w+)',
            r'—Å\s+–º–µ—Ç–æ–¥–∞–º–∏?\s+([\w\s,]+)',
            r'with\s+methods?\s+([\w\s,]+)'
        ]
        
        for pattern in method_patterns:
            match = re.search(pattern, message_lower)
            if match:
                methods_text = match.group(1)
                methods = re.split(r'[,\s]+', methods_text)
                requirements['methods'].extend([method.strip() for method in methods if method.strip()])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        for lang_key, lang_info in self.programming_languages.items():
            if lang_key in message_lower or lang_info['name'].lower() in message_lower:
                requirements['language'] = lang_key
                break
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        if any(word in message_lower for word in ['—Å–ª–æ–∂–Ω—ã–π', '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', 'advanced', 'complex']):
            requirements['style'] = 'advanced'
        elif any(word in message_lower for word in ['–ø—Ä–æ—Å—Ç–æ–π', '–±–∞–∑–æ–≤—ã–π', 'simple', 'basic']):
            requirements['style'] = 'simple'
        
        # –ï—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —è–≤–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if not requirements['attributes']:
            # –ò—â–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)
            words = re.findall(r'\b([a-z–∞-—è]{3,15})\b', message_lower)
            potential_attrs = []
            for word in words:
                if word not in ['–∫–ª–∞—Å—Å', 'class', '–º–µ—Ç–æ–¥', 'method', '—Ñ—É–Ω–∫—Ü–∏—è', 'function', 
                               '—Å–æ–∑–¥–∞–π', 'create', '–Ω–∞–ø–∏—à–∏', 'write', '–∫–æ–¥', 'code']:
                    potential_attrs.append(word)
            
            if len(potential_attrs) <= 5:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤
                requirements['attributes'] = potential_attrs[:3]
        
        return requirements
    
    # ‚Ññ2 –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–ê –° –ù–£–õ–Ø
    def _generate_truly_new_code(self, language, requirements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        
        if language == 'python':
            return self._generate_python_from_scratch(requirements)
        elif language == 'javascript':
            return self._generate_javascript_from_scratch(requirements)
        elif language == 'java':
            return self._generate_java_from_scratch(requirements)
        elif language == 'cpp':
            return self._generate_cpp_from_scratch(requirements)
        elif language == 'csharp':
            return self._generate_csharp_from_scratch(requirements)
        else:
            return self._generate_python_from_scratch(requirements)  # fallback
    
    def _generate_python_from_scratch(self, requirements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞ —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        class_name = requirements['class_name']
        attributes = requirements['attributes'] or ['name', 'value']
        methods = requirements['methods']
        
        code = f"# AI-GPT2: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å {class_name}\n"
        code += f"class {class_name}:\n"
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        init_params = ", ".join([f"{attr}=None" for attr in attributes])
        code += f"    def __init__(self, {init_params}):\n"
        for attr in attributes:
            code += f"        self._{attr} = {attr}\n"
        
        # –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        for attr in attributes:
            code += f"\n    @property\n"
            code += f"    def {attr}(self):\n"
            code += f"        return self._{attr}\n"
            code += f"\n    @{attr}.setter\n"
            code += f"    def {attr}(self, value):\n"
            code += f"        self._{attr} = value\n"
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
        for method in methods:
            code += f"\n    def {method}(self):\n"
            logic = self.code_generator.generate_method_logic(method, 'python', requirements)
            code += f"        {logic}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not methods:
            code += f"\n    def __str__(self):\n"
            code += f"        return f\"{class_name}({', '.join([f'{attr}={{self._{attr}}}' for attr in attributes])})\"\n"
        
        code += f"\n\n# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        code += f"# obj = {class_name}({', '.join([f'\"example_{attr}\"' for attr in attributes])})\n"
        code += f"# print(obj)"
        
        return f"```python\n{code}\n```"
    
    def _generate_javascript_from_scratch(self, requirements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JavaScript –∫–æ–¥–∞ —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        class_name = requirements['class_name']
        attributes = requirements['attributes'] or ['name', 'value']
        methods = requirements['methods']
        
        code = f"// AI-GPT2: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å {class_name}\n"
        code += f"class {class_name} {{\n"
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        code += f"    constructor({', '.join(attributes)}) {{\n"
        for attr in attributes:
            code += f"        this._{attr} = {attr};\n"
        code += f"    }}\n"
        
        # –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        for attr in attributes:
            code += f"\n    get {attr}() {{\n"
            code += f"        return this._{attr};\n"
            code += f"    }}\n"
            code += f"\n    set {attr}(value) {{\n"
            code += f"        this._{attr} = value;\n"
            code += f"    }}\n"
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
        for method in methods:
            code += f"\n    {method}() {{\n"
            logic = self.code_generator.generate_method_logic(method, 'javascript', requirements)
            code += f"        {logic}\n"
            code += f"    }}\n"
        
        code += f"}}\n\n"
        code += f"// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        code += f"// const obj = new {class_name}({', '.join([f'\"example_{attr}\"' for attr in attributes])});\n"
        code += f"// console.log(obj);"
        
        return f"```javascript\n{code}\n```"
    
    def _generate_java_from_scratch(self, requirements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Java –∫–æ–¥–∞ —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        class_name = requirements['class_name']
        attributes = requirements['attributes'] or ['name', 'value']
        
        code = f"// AI-GPT2: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å {class_name}\n"
        code += f"public class {class_name} {{\n"
        
        # –ü–æ–ª—è –∫–ª–∞—Å—Å–∞
        for attr in attributes:
            code += f"    private String {attr};\n"
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        code += f"\n    public {class_name}({', '.join([f'String {attr}' for attr in attributes])}) {{\n"
        for attr in attributes:
            code += f"        this.{attr} = {attr};\n"
        code += f"    }}\n"
        
        # –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        for attr in attributes:
            code += f"\n    public String get{attr.capitalize()}() {{\n"
            code += f"        return this.{attr};\n"
            code += f"    }}\n"
            code += f"\n    public void set{attr.capitalize()}(String {attr}) {{\n"
            code += f"        this.{attr} = {attr};\n"
            code += f"    }}\n"
        
        # –ú–µ—Ç–æ–¥ toString
        code += f"\n    @Override\n"
        code += f"    public String toString() {{\n"
        code += f"        return \"{class_name}{\" +\n"
        attr_strings = [f'                \"{attr}=\" + {attr} + \"\\\"' for attr in attributes]
        code += ' +\n'.join(attr_strings) + "};\n"
        code += f"    }}\n"
        code += f"}}"
        
        return f"```java\n{code}\n```"
    
    def _generate_cpp_from_scratch(self, requirements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è C++ –∫–æ–¥–∞ —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        class_name = requirements['class_name']
        attributes = requirements['attributes'] or ['name', 'value']
        
        code = f"// AI-GPT2: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å {class_name}\n"
        code += f"#include <string>\n#include <iostream>\n\n"
        code += f"class {class_name} {{\nprivate:\n"
        
        # –ü–æ–ª—è –∫–ª–∞—Å—Å–∞
        for attr in attributes:
            code += f"    std::string {attr};\n"
        
        code += f"\npublic:\n"
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        code += f"    {class_name}({', '.join([f'std::string {attr}' for attr in attributes])}) {{\n"
        for attr in attributes:
            code += f"        this->{attr} = {attr};\n"
        code += f"    }}\n"
        
        # –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        for attr in attributes:
            code += f"\n    std::string get{attr.capitalize()}() const {{\n"
            code += f"        return this->{attr};\n"
            code += f"    }}\n"
            code += f"\n    void set{attr.capitalize()}(std::string {attr}) {{\n"
            code += f"        this->{attr} = {attr};\n"
            code += f"    }}\n"
        
        # –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞
        code += f"\n    void print() const {{\n"
        code += f"        std::cout << \"{class_name} {{\";\n"
        for i, attr in enumerate(attributes):
            if i > 0:
                code += f"        std::cout << \", \";\n"
            code += f"        std::cout << \"{attr}=\" << {attr};\n"
        code += f"        std::cout << \"}}\" << std::endl;\n"
        code += f"    }}\n"
        code += f"}};"
        
        return f"```cpp\n{code}\n```"
    
    def _generate_csharp_from_scratch(self, requirements):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è C# –∫–æ–¥–∞ —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        class_name = requirements['class_name']
        attributes = requirements['attributes'] or ['Name', 'Value']
        
        code = f"// AI-GPT2: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å {class_name}\n"
        code += f"using System;\n\n"
        code += f"public class {class_name} {{\n"
        
        # –°–≤–æ–π—Å—Ç–≤–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
        for attr in attributes:
            code += f"    public string {attr} {{ get; set; }}\n"
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        code += f"\n    public {class_name}({', '.join([f'string {attr.ToLower()}' for attr in attributes])}) {{\n"
        for attr in attributes:
            code += f"        this.{attr} = {attr.ToLower()};\n"
        code += f"    }}\n"
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        code += f"\n    public {class_name}() {{\n"
        code += f"        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
        code += f"    }}\n"
        
        # –ú–µ—Ç–æ–¥ ToString
        code += f"\n    public override string ToString() {{\n"
        code += f"        return $\"{class_name}{{{', '.join([f'{attr}={{{attr}}}' for attr in attributes])}}}\";\n"
        code += f"    }}\n"
        code += f"}}"
        
        return f"```csharp\n{code}\n```"
    
    def analyze_intent(self, message):
        message_lower = message.lower()
        
        intents = {
            'greeting': any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π']),
            'farewell': any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø—Ä–æ—â–∞–π']),
            'help': any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']),
            'explanation': any(word in message_lower for word in ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']),
            'code_request': any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø–∏—à–∏', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ–∫–∞–∂–∏ –∫–æ–¥']),
            'comparison': any(word in message_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '—á—Ç–æ –ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∏–µ']),
            'problem': any(word in message_lower for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å']),
            'opinion': any(word in message_lower for word in ['–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å', '—Å—á–∏—Ç–∞–µ—à—å', '—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è']),
            'learning_path': any(word in message_lower for word in ['—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–∫–∞–∫ —É—á–∏—Ç—å', '–ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∏–∑—É—á–µ–Ω–∏–µ']),
            'career': any(word in message_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ']),
            'file_operation': any(word in message_lower for word in ['—Ñ–∞–π–ª', '–∑–∞–≥—Ä—É–∑–∏', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–æ—Ç–∫—Ä–æ–π']),
            'create_code': any(word in message_lower for word in ['—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '–Ω–æ–≤—ã–π –∫–ª–∞—Å—Å', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª–∞—Å—Å', '–Ω–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å'])
        }
        
        return [intent for intent, detected in intents.items() if detected]
    
    def extract_entities(self, message):
        entities = {
            'languages': [],
            'technologies': [],
            'concepts': [],
            'level_indicators': []
        }
        
        # –ü–æ–∏—Å–∫ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        for lang_key, lang_info in self.programming_languages.items():
            lang_name = lang_info['name'].lower()
            if (lang_key in message.lower() or 
                lang_name in message.lower() or
                any(word in message.lower() for word in [lang_key, lang_name])):
                entities['languages'].append(lang_key)
        
        technologies = {
            'react': ['react', '—Ä–µ–∞–∫—Ç'],
            'vue': ['vue', '–≤—å—é'],
            'django': ['django', '–¥–∂–∞–Ω–≥–æ'],
            'flask': ['flask', '—Ñ–ª–∞—Å–∫'],
            'node': ['node', '–Ω–æ–¥'],
            'docker': ['docker', '–¥–æ–∫–µ—Ä'],
            'git': ['git', '–≥–∏—Ç']
        }
        
        for tech, keywords in technologies.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['technologies'].append(tech)
        
        concepts = {
            '–æ–æ–ø': ['–æ–æ–ø', '–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', 'object-oriented'],
            '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', 'algorithm'],
            '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö': ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'database'],
            '–≤–µ–±': ['–≤–µ–±', 'web', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä'],
            '–º–æ–±–∏–ª—å–Ω–∞—è': ['–º–æ–±–∏–ª—å–Ω—ã–π', 'mobile', 'android', 'ios'],
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': ['–∏–∏', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        }
        
        for concept, keywords in concepts.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['concepts'].append(concept)
        
        return entities
    
    def update_user_profile(self, message, entities):
        if entities['languages']:
            self.user_profile['preferred_languages'].update(entities['languages'])
        
        level_indicators = {
            'beginner': ['–Ω–∞—á–∏–Ω–∞—é', '–Ω–æ–≤–∏—á–æ–∫', '—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª', '—Å –Ω—É–ª—è', '–Ω–µ –ø–æ–Ω–∏–º–∞—é'],
            'advanced': ['–æ–ø—ã—Ç–Ω—ã–π', 'senior', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—ç–∫—Å–ø–µ—Ä—Ç', '–≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞—é']
        }
        
        message_lower = message.lower()
        for level, indicators in level_indicators.items():
            if any(indicator in message_lower for indicator in indicators):
                self.user_profile['skill_level'] = level
    
    # ‚Ññ3 –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î
    def generate_smart_response(self, message):
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.emotional_ai.analyze_mood(message)
        
        intents = self.analyze_intent(message)
        entities = self.extract_entities(message)
        self.update_user_profile(message, entities)
        
        self.conversation_history.append({
            'message': message,
            'intents': intents,
            'entities': entities,
            'timestamp': datetime.now()
        })
        
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        response = self._craft_response(message, intents, entities)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        return self.emotional_ai.get_emotional_response(response)
    
    def _craft_response(self, message, intents, entities):
        if 'greeting' in intents:
            return self._generate_greeting()
        
        if 'farewell' in intents:
            return self._generate_farewell()
        
        if 'help' in intents:
            return self._generate_help_response()
        
        if 'explanation' in intents:
            return self._generate_explanation(message, entities)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
        if 'create_code' in intents or ('code_request' in intents and any(word in message.lower() for word in ['—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '–Ω–æ–≤—ã–π'])):
            return self._generate_new_code_from_scratch(message)
        
        if 'code_request' in intents:
            return self._generate_code_example(message, entities)
        
        if 'file_operation' in intents:
            return self._handle_file_operations(message)
        
        if 'comparison' in intents:
            return self._generate_comparison(message, entities)
        
        if 'problem' in intents:
            return self._generate_problem_solution(message, entities)
        
        if 'opinion' in intents:
            return self._generate_opinion(message, entities)
        
        if 'learning_path' in intents:
            return self._generate_learning_path(entities)
        
        if 'career' in intents:
            return self._generate_career_advice(entities)
        
        return self._generate_contextual_response(message, entities)
    
    def _generate_new_code_from_scratch(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–∞—Ä—Å–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        requirements = self._parse_code_requirements(message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        generated_code = self._generate_truly_new_code(requirements['language'], requirements)
        
        response = f"üöÄ **AI-GPT2 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–æ–¥!**\n\n"
        response += f"üìã **–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:**\n"
        response += f"‚Ä¢ –ö–ª–∞—Å—Å: `{requirements['class_name']}`\n"
        response += f"‚Ä¢ –Ø–∑—ã–∫: `{requirements['language']}`\n"
        if requirements['attributes']:
            response += f"‚Ä¢ –ê—Ç—Ä–∏–±—É—Ç—ã: {', '.join(requirements['attributes'])}\n"
        if requirements['methods']:
            response += f"‚Ä¢ –ú–µ—Ç–æ–¥—ã: {', '.join(requirements['methods'])}\n"
        
        response += f"\nüíª **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:**\n{generated_code}"
        response += f"\n\nüéØ **–≠—Ç–æ –Ω–µ —à–∞–±–ª–æ–Ω! –ö–æ–¥ —Å–æ–∑–¥–∞–Ω —Å –Ω—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π!**"
        
        return response
    
    def _generate_code_example(self, message, entities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        if entities['languages']:
            target_language = entities['languages'][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∫–æ–¥
            message_lower = message.lower()
            if any(word in message_lower for word in ['—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '–Ω–æ–≤—ã–π']):
                return self._generate_new_code_from_scratch(message)
            
            return self._generate_specific_code(target_language, message)
        else:
            # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            return "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –∫–æ–¥? –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: Python, JavaScript, Java, C++, C#, Go, Rust, Kotlin, Swift, PHP, Ruby, TypeScript! üíª\n\n–ò–ª–∏ —Å–∫–∞–∂–∏—Ç–µ '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å...' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞!"
    
    def _generate_specific_code(self, language, context):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —è–∑—ã–∫–µ"""
        context_lower = context.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if any(word in context_lower for word in ['–æ–æ–ø', '–∫–ª–∞—Å—Å', 'object']):
            return self._generate_oop_example(language)
        elif any(word in context_lower for word in ['—Ñ—É–Ω–∫—Ü–∏—è', 'function', '–º–µ—Ç–æ–¥']):
            return self._generate_function_example(language)
        elif any(word in context_lower for word in ['–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ø–æ–∏—Å–∫']):
            return self._generate_algorithm_example(language)
        elif any(word in context_lower for word in ['—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–¥–∞–Ω–Ω—ã–µ', 'data structure']):
            return self._generate_data_structure_example(language)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
            return f"–•–æ—Ç–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –Ω–∞ {language} –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å? –°–∫–∞–∂–∏—Ç–µ '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å...' –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞! üöÄ"
    
    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç —à–∞–±–ª–æ–Ω—ã)
    def _generate_oop_example(self, language):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –û–û–ü –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö (—à–∞–±–ª–æ–Ω—ã)"""
        examples = {
            'python': """```python
# –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ BankAccount
class BankAccount:
    def __init__(self, owner: str, balance: float = 0.0):
        self.owner = owner
        self._balance = balance
    
    def deposit(self, amount: float) -> None:
        if amount > 0:
            self._balance += amount
    
    def withdraw(self, amount: float) -> bool:
        if 0 < amount <= self._balance:
            self._balance -= amount
            return True
        return False
    
    def get_balance(self) -> float:
        return self._balance
```""",
            
            'javascript': """```javascript
// –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ BankAccount
class BankAccount {
    constructor(owner, balance = 0.0) {
        this.owner = owner;
        this._balance = balance;
    }
    
    deposit(amount) {
        if (amount > 0) {
            this._balance += amount;
        }
    }
    
    withdraw(amount) {
        if (amount > 0 && amount <= this._balance) {
            this._balance -= amount;
            return true;
        }
        return false;
    }
    
    getBalance() {
        return this._balance;
    }
}
```"""
        }
        
        return f"üìö **–ì–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –Ω–∞ {language}:**\n\n" + examples.get(language, examples['python']) + "\n\nüí° **–•–æ—Ç–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥? –°–∫–∞–∂–∏—Ç–µ '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å...'!**"
    
    def _handle_file_operations(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['–∑–∞–≥—Ä—É–∑–∏', 'upload', '–¥–æ–±–∞–≤—å —Ñ–∞–π–ª']):
            return "üìÅ –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ! –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n‚Ä¢ Python —Ñ–∞–π–ª—ã (.py)\n‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n‚Ä¢ JSON –¥–∞–Ω–Ω—ã–µ (.json)\n‚Ä¢ –ò –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã!"
        
        elif any(word in message_lower for word in ['–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', 'analyze', '–ø—Ä–æ–≤–µ—Ä—å –∫–æ–¥']):
            return "üîç –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –Ω–∞:\n‚Ä¢ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n‚Ä¢ –°—Ç–∏–ª—å –∫–æ–¥–∞ (PEP8 –¥–ª—è Python)\n‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è\n‚Ä¢ Best practices"
        
        else:
            return "üìÇ –Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏! –°–∫–∞–∂–∏—Ç–µ:\n‚Ä¢ '–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª' - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n‚Ä¢ '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥' - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞\n‚Ä¢ –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ!"
    
    def _generate_help_response(self):
        base_help = """ü§ñ **AI-GPT2 –ú–û–ñ–ï–¢ –¢–ï–ü–ï–†–¨ –ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –ö–û–î –° –ù–£–õ–Ø!**

üöÄ **–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–î–ê:**
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Å—ã –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–æ–¥—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 5+ —è–∑—ã–∫–æ–≤
‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å

üíª **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**
‚Ä¢ Python, JavaScript, Java, C++, C#

üìÅ **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è  
‚Ä¢ –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫

üß† **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:**
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:**
‚Ä¢ "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Car —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ brand, model, year"
‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π –∫–ª–∞—Å—Å User –Ω–∞ Python —Å –º–µ—Ç–æ–¥–∞–º–∏ login, logout"
‚Ä¢ "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª–∞—Å—Å Product –Ω–∞ JavaScript"

"""
        
        if self.user_profile['preferred_languages']:
            langs = ", ".join([self.programming_languages[lang]['name'] for lang in self.user_profile['preferred_languages']])
            base_help += f"üéØ –í–∏–∂—É —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {langs}. –ú–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ —ç—Ç–∏—Ö —è–∑—ã–∫–∞—Ö!"
        
        return base_help

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def _generate_greeting(self):
        greetings = [
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-GPT2 - —Ç–µ–ø–µ—Ä—å —è –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Å –Ω—É–ª—è!",
            "üöÄ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! AI-GPT2 –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∞—Å—Å—ã –ø–æ —Ç–≤–æ–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!",
            "üíª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –°–∫–∞–∂–∏ '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å...' –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥!",
            "üéØ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ!"
        ]
        
        if len(self.conversation_history) > 1:
            last_topic = self._get_last_topic()
            if last_topic:
                lang_name = self.programming_languages.get(last_topic, {}).get('name', last_topic)
                return f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º {lang_name}? –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å?"
        
        return random.choice(greetings)
    
    def _generate_farewell(self):
        farewells = [
            "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! AI-GPT2 –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Ç–≤–æ–∏—Ö –∏–¥–µ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞!",
            "üöÄ –ü–æ–∫–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞!",
            "üí´ –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–ª–∞—Å—Å - —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é!",
            "üéØ –ü–æ–∫–∞! –ü–æ–º–Ω–∏ - AI-GPT2 —Ç–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –Ω—É–ª—è!"
        ]
        return random.choice(farewells)
    
    def _generate_contextual_response(self, message, entities):
        if len(self.conversation_history) > 1:
            last_entities = self.conversation_history[-2].get('entities', {})
            if last_entities.get('languages') or last_entities.get('concepts'):
                return "AI-GPT2: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É? –ò–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å? üöÄ"
        
        responses = [
            "AI-GPT2: –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—ã–π –∫–æ–¥? –°–∫–∞–∂–∏ '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å...'! üéØ",
            "AI-GPT2: –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –ø–æ —Ç–≤–æ–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º! üíª", 
            "AI-GPT2: –ü—Ä–∏–¥—É–º–∞–π –∫–ª–∞—Å—Å - —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ! üöÄ",
            "AI-GPT2: –•–æ—á–µ—à—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ? üí°"
        ]
        
        return random.choice(responses)
    
    def _get_last_topic(self):
        if len(self.conversation_history) < 2:
            return None
        
        last_entry = self.conversation_history[-2]
        entities = last_entry.get('entities', {})
        
        if entities.get('languages'):
            return entities['languages'][0]
        elif entities.get('concepts'):
            return entities['concepts'][0]
        
        return None

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (AIHandler, HTTP —Å–µ—Ä–≤–µ—Ä) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
class AIHandler(BaseHTTPRequestHandler):
    ai = SmartAI()
    
    def do_GET(self):
        if self.path == '/':
            self._serve_html()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        if self.path == '/chat':
            self._handle_chat()
        elif self.path == '/upload':
            self._handle_file_upload()
        else:
            self.send_error(404, "Not Found")
    
    def _serve_html(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI-GPT2 üöÄ</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                    max-width: 800px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .chat-container {
                    background: white;
                    border-radius: 20px;
                    padding: 25px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    height: 90vh;
                    display: flex;
                    flex-direction: column;
                }
                .header {
                    text-align: center;
                    margin-bottom: 20px;
                    background: linear-gradient(135deg, #2c3e50, #3498db);
                    color: white;
                    padding: 20px;
                    border-radius: 15px;
                    margin: -25px -25px 20px -25px;
                }
                .header h1 {
                    margin: 0;
                    font-size: 2.2em;
                    font-weight: 700;
                }
                .header p {
                    margin: 5px 0 0 0;
                    opacity: 0.9;
                    font-size: 1.1em;
                }
                .features {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 10px;
                    margin: 15px 0;
                }
                .feature {
                    background: #f8f9fa;
                    padding: 10px;
                    border-radius: 10px;
                    text-align: center;
                    font-size: 0.9em;
                    border: 1px solid #e9ecef;
                }
                .feature.new {
                    background: #ffeb3b;
                    font-weight: bold;
                }
                #chat {
                    flex: 1;
                    border: 2px solid #e1e5e9;
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    overflow-y: auto;
                    background: #f8f9fa;
                }
                .message {
                    margin: 15px 0;
                    padding: 15px 20px;
                    border-radius: 18px;
                    max-width: 85%;
                    line-height: 1.5;
                    animation: fadeIn 0.3s ease;
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .user {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                    margin-left: auto;
                    text-align: right;
                    border-bottom-right-radius: 5px;
                }
                .ai {
                    background: white;
                    color: #2c3e50;
                    border: 2px solid #3498db;
                    border-bottom-left-radius: 5px;
                    box-shadow: 0 2px 10px rgba(52, 152, 219, 0.2);
                }
                .input-area {
                    display: flex;
                    gap: 12px;
                    align-items: center;
                }
                #messageInput {
                    flex: 1;
                    padding: 15px 20px;
                    border: 2px solid #bdc3c7;
                    border-radius: 25px;
                    font-size: 16px;
                    outline: none;
                    transition: all 0.3s;
                    background: white;
                }
                #messageInput:focus {
                    border-color: #3498db;
                    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
                }
                button {
                    padding: 15px 25px;
                    background: linear-gradient(135deg, #e74c3c, #c0392b);
                    color: white;
                    border: none;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 16px;
                    font-weight: 600;
                    transition: all 0.3s;
                    box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
                }
                button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
                }
                .upload-area {
                    border: 2px dashed #3498db;
                    border-radius: 10px;
                    padding: 20px;
                    text-align: center;
                    margin: 10px 0;
                    background: #f8f9fa;
                    cursor: pointer;
                }
                .upload-area:hover {
                    background: #e9ecef;
                }
                .code-block {
                    background: #2c3e50;
                    color: #ecf0f1;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    font-family: 'Courier New', monospace;
                    white-space: pre-wrap;
                    overflow-x: auto;
                    border-left: 4px solid #e74c3c;
                }
                .ai-label {
                    font-weight: 600;
                    color: #3498db;
                    margin-bottom: 5px;
                }
                .user-label {
                    font-weight: 600;
                    color: white;
                    margin-bottom: 5px;
                }
                .prompt-examples {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 10px;
                    margin: 10px 0;
                }
                .prompt-example {
                    background: #e8f4fd;
                    padding: 10px;
                    border-radius: 8px;
                    font-size: 0.8em;
                    cursor: pointer;
                    border: 1px solid #3498db;
                }
                .prompt-example:hover {
                    background: #d1ecf1;
                }
            </style>
        </head>
        <body>
            <div class="chat-container">
                <div class="header">
                    <h1>üöÄ AI-GPT2 v3.0</h1>
                    <p>–¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –Ω—É–ª—è! + –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò + 12 —è–∑—ã–∫–æ–≤</p>
                    <div class="features">
                        <div class="feature new">üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞</div>
                        <div class="feature">üíª 12+ —è–∑—ã–∫–æ–≤</div>
                        <div class="feature">üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò</div>
                        <div class="feature">üìÅ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏</div>
                    </div>
                </div>
                
                <div class="prompt-examples">
                    <div class="prompt-example" onclick="insertPrompt(this)">"–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Car —Å brand, model, year"</div>
                    <div class="prompt-example" onclick="insertPrompt(this)">"–ü—Ä–∏–¥—É–º–∞–π –∫–ª–∞—Å—Å User –Ω–∞ Python"</div>
                    <div class="prompt-example" onclick="insertPrompt(this)">"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª–∞—Å—Å Product –Ω–∞ JavaScript"</div>
                    <div class="prompt-example" onclick="insertPrompt(this)">"–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Animal —Å –º–µ—Ç–æ–¥–∞–º–∏"</div>
                </div>
                
                <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                    <h3>üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
                    <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (.py, .js, .java, .txt, .json)</p>
                    <input type="file" id="fileInput" style="display: none;" onchange="handleFileUpload(this.files)">
                </div>
                
                <div id="chat">
                    <div class="message ai">
                        <div class="ai-label">üß† AI-GPT2 v3.0</div>
                        <strong>üöÄ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø:</strong> –¢–µ–ø–µ—Ä—å —è –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ —Å –Ω—É–ª—è!<br><br>
                        üí° <strong>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</strong><br>
                        ‚Ä¢ "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Car —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ brand, model, year"<br>
                        ‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π –∫–ª–∞—Å—Å User –Ω–∞ Python —Å –º–µ—Ç–æ–¥–∞–º–∏"<br>
                        ‚Ä¢ "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª–∞—Å—Å Product –Ω–∞ JavaScript"<br><br>
                        üéØ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥!
                    </div>
                </div>
                
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å... –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ –æ –∫–æ–¥–µ...">
                    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>

            <script>
                function insertPrompt(element) {
                    document.getElementById('messageInput').value = element.textContent;
                    document.getElementById('messageInput').focus();
                }

                function addMessage(text, isUser) {
                    const chat = document.getElementById('chat');
                    const message = document.createElement('div');
                    message.className = isUser ? 'message user' : 'message ai';
                    
                    let formattedText = text;
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
                    if (text.includes('```')) {
                        formattedText = text.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
                    }
                    formattedText = formattedText.replace(/\\n/g, '<br>');
                    
                    if (isUser) {
                        message.innerHTML = '<div class="user-label">üë§ –í—ã</div>' + formattedText;
                    } else {
                        message.innerHTML = '<div class="ai-label">üß† AI-GPT2</div>' + formattedText;
                    }
                    
                    chat.appendChild(message);
                    chat.scrollTop = chat.scrollHeight;
                }

                async function sendMessage() {
                    const input = document.getElementById('messageInput');
                    const message = input.value.trim();
                    
                    if (!message) return;
                    
                    input.value = '';
                    addMessage(message, true);
                    
                    try {
                        const response = await fetch('/chat', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({message: message})
                        });
                        
                        const data = await response.json();
                        addMessage(data.response, false);
                        
                    } catch (error) {
                        addMessage('‚ùå AI-GPT2: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
                    }
                }

                async function handleFileUpload(files) {
                    if (!files.length) return;
                    
                    const file = files[0];
                    const reader = new FileReader();
                    
                    reader.onload = async function(e) {
                        const content = e.target.result;
                        addMessage(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name} (${file.size} –±–∞–π—Ç)`, true);
                        
                        try {
                            const response = await fetch('/upload', {
                                method: 'POST',
                                headers: {'Content-Type': 'application/json'},
                                body: JSON.stringify({
                                    filename: file.name,
                                    content: content,
                                    size: file.size
                                })
                            });
                            
                            const data = await response.json();
                            addMessage(data.response, false);
                            
                        } catch (error) {
                            addMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', false);
                        }
                    };
                    
                    reader.readAsText(file);
                }

                document.getElementById('messageInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') sendMessage();
                });

                document.getElementById('messageInput').focus();
            </script>
        </body>
        </html>
        '''
        self.wfile.write(html.encode('utf-8'))
    
    def _handle_chat(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            response = self.ai.generate_smart_response(message)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Error: {str(e)}")
    
    def _handle_file_upload(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            filename = data.get('filename', 'unknown')
            content = data.get('content', '')
            size = data.get('size', 0)
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
            analysis = self._analyze_file(filename, content)
            
            response = f"üìä **–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {filename}:**\n\n{analysis}"
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Upload Error: {str(e)}")
    
    def _analyze_file(self, filename, content):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_ext = os.path.splitext(filename)[1].lower()
        
        analysis = []
        analysis.append(f"üìÅ **–§–∞–π–ª:** {filename}")
        analysis.append(f"üìè **–†–∞–∑–º–µ—Ä:** {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_types = {
            '.py': 'Python —Ñ–∞–π–ª',
            '.js': 'JavaScript —Ñ–∞–π–ª', 
            '.java': 'Java —Ñ–∞–π–ª',
            '.cpp': 'C++ —Ñ–∞–π–ª',
            '.cs': 'C# —Ñ–∞–π–ª',
            '.go': 'Go —Ñ–∞–π–ª',
            '.rs': 'Rust —Ñ–∞–π–ª',
            '.kt': 'Kotlin —Ñ–∞–π–ª',
            '.swift': 'Swift —Ñ–∞–π–ª',
            '.php': 'PHP —Ñ–∞–π–ª',
            '.rb': 'Ruby —Ñ–∞–π–ª',
            '.ts': 'TypeScript —Ñ–∞–π–ª',
            '.txt': '–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª',
            '.json': 'JSON —Ñ–∞–π–ª'
        }
        
        file_type = file_types.get(file_ext, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')
        analysis.append(f"üîß **–¢–∏–ø:** {file_type}")
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        lines = content.split('\n')
        analysis.append(f"üìù **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** {len(lines)}")
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        issues = []
        
        if file_ext == '.py':
            # –ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞
            if 'import *' in content:
                issues.append("‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π—Ç–µ 'import *' - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏")
            if 'eval(' in content or 'exec(' in content:
                issues.append("‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å eval()/exec() - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            if len(content) > 1000:
                issues.append("üí° –§–∞–π–ª –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª–∏")
                
        elif file_ext == '.js':
            # –ê–Ω–∞–ª–∏–∑ JavaScript –∫–æ–¥–∞
            if 'eval(' in content:
                issues.append("‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å eval() - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            if 'var ' in content:
                issues.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ let/const –≤–º–µ—Å—Ç–æ var –¥–ª—è –ª—É—á—à–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏")
                
        elif file_ext == '.java':
            # –ê–Ω–∞–ª–∏–∑ Java –∫–æ–¥–∞
            if 'public static void main' in content:
                issues.append("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                
        if issues:
            analysis.append("\nüîç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            analysis.extend(issues)
        else:
            analysis.append("\n‚úÖ **–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!**")
        
        analysis.append(f"\nüß† **AI-GPT2:** –ú–æ–≥—É –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥! –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!")
        
        return '\n'.join(analysis)
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        print(f"üöÄ AI-GPT2: {format % args}")

if __name__ == '__main__':
    HOST = '0.0.0.0'
    PORT = 8000
    
    print("üöÄ –ó–ê–ü–£–°–ö AI-GPT2 v3.0 –° –ì–ï–ù–ï–†–ê–¶–ò–ï–ô –ö–û–î–ê –° –ù–£–õ–Ø...")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                 AI-GPT2 3.0                 ‚ïë")
    print("‚ïë    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ + –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò        ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"üìç –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print("\nüéØ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò v3.0:")
    print("‚Ä¢ üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ —Å –Ω—É–ª—è (–Ω–µ —à–∞–±–ª–æ–Ω—ã!)")
    print("‚Ä¢ üíª –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤")
    print("‚Ä¢ üéØ –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 
    print("‚Ä¢ üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
    print("‚Ä¢ üåü –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 5+ —è–∑—ã–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    try:
        server = HTTPServer((HOST, PORT), AIHandler)
        print(f"‚úÖ AI-GPT2 3.0 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {HOST}:{PORT}")
        print("üí° –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å Car —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ brand, model, year'")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë AI-GPT2 –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
