numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(f"–°–ø–∏—Å–æ–∫: {numbers}")
print(f"–î–ª–∏–Ω–∞: {len(numbers)}")
```"""
    
    def _generate_comparison_response(self, user_message, analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        concept1 = analysis.get('concept1', '–ø–µ—Ä–≤–æ–µ')
        concept2 = analysis.get('concept2', '–≤—Ç–æ—Ä–æ–µ')
        
        comparisons = {
            ('python', 'javascript'): "Python –∏ JavaScript - —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏: Python —á–∞—â–µ –¥–ª—è backend –∏ data science, JavaScript - –¥–ª—è frontend –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.",
            ('java', 'python'): "Java —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è, Python –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è. Python –ø—Ä–æ—â–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
            ('–æ–æ–ø', '—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ'): "–û–û–ü –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–∞ —á–∏—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π."
        }
        
        for (c1, c2), explanation in comparisons.items():
            if (c1 in user_message.lower() and c2 in user_message.lower()) or \
               (c2 in user_message.lower() and c1 in user_message.lower()):
                return f"üîç **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ {c1} –∏ {c2}:**\n\n{explanation}"
        
        return f"ü§î **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ {concept1} –∏ {concept2}:**\n\n–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –æ–±–æ–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º –∏–ª–∏ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
    
    def _generate_code_response(self, user_message, analysis, entities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞"""
        language = analysis.get('programming_language', 'python')
        concept = analysis.get('concept', '–±–∞–∑–æ–≤—ã–π')
        
        code_examples = {
            'python': {
                '—Ñ—É–Ω–∫—Ü–∏—è': self._generate_function_guide(),
                '–∫–ª–∞—Å—Å': self._generate_class_creation_guide(),
                '—Ü–∏–∫–ª': self._generate_loop_guide(),
                '—Å–ø–∏—Å–æ–∫': self._generate_list_guide()
            }
        }
        
        if language in code_examples and concept in code_examples[language]:
            return code_examples[language][concept]
        
        return f"üíª **–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ {language}:**\n\n–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è '{concept}'. –ù–æ –≤–æ—Ç –±–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –Ω–∞ Python:\n\n```python\n# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\nprint('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!')\n\n# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ\nname = '–ê–Ω–Ω–∞'\nage = 25\n\n# –£—Å–ª–æ–≤–∏—è\nif age >= 18:\n    print(f'{name} —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π(—è—è)')\nelse:\n    print(f'{name} –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π(—è—è)')\n```"
    
    def _generate_explanation_response(self, user_message, analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        concept = analysis.get('concept', '—ç—Ç–æ')
        return f"üìö **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ {concept}:**\n\n–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–µ–±–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º."
    
    def _web_search_and_save(self, user_message, intent, entities):
        """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            search_results = self.web_search.search_internet(user_message)
            
            if search_results:
                best_result = search_results[0]
                answer = f"üåê **{best_result['title']}**\n\n{best_result['snippet']}"
                
                if best_result.get('url'):
                    answer += f"\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {best_result['url']}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                self.knowledge_base.add_entry(
                    category="qa_pairs",
                    question=user_message,
                    answer=answer,
                    intent=intent,
                    tags=["web_search"],
                    confidence=0.7
                )
                
                return answer, "web_search"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
        
        return None, None
    
    def _generate_contextual_fallback(self, user_message, intent, entities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        fallback_responses = {
            'code_request': [
                "üí° –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?",
                "üîß –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ Python, JavaScript –∏–ª–∏ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ.",
                "üíª –ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞?"
            ],
            'explanation': [
                "üìö –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û —á–µ–º –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
                "ü§î –ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å?",
                "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç."
            ],
            'comparison': [
                "‚öñÔ∏è –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å.",
                "üîç –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä, Python vs JavaScript –∏–ª–∏ –û–û–ü vs —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                "üìä –ú–æ–≥—É –ø–æ–º–æ—á—å —Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?"
            ]
        }
        
        for intent_type, responses in fallback_responses.items():
            if intent_type in intent:
                return random.choice(responses)
        
        general_responses = [
            "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ª—É—á—à–µ.",
            "üìö –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ —è —É—á—É—Å—å!",
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏.",
            "üîç –ú–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å?"
        ]
        
        return random.choice(general_responses)

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.learning_ai = EnhancedLearningAI()
        self.learning_stats = {
            'conversations_processed': 0,
            'knowledge_base_entries': 0,
            'web_searches': 0,
        }
    
    def generate_smart_response(self, message):
        intents = self.learning_ai.classifier.predict(message)
        entities = self.extract_entities(message)
        
        primary_intent = intents[0] if intents else "unknown"
        
        best_response, confidence, source = self.learning_ai.find_best_response(
            message, primary_intent, entities
        )
        
        if best_response:
            final_response = best_response
            if source == "web_search":
                self.learning_stats['web_searches'] += 1
        else:
            final_response = self._generate_fallback_response(message, intents, entities)
            source = "generated"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.learning_stats['conversations_processed'] += 1
        self.learning_stats['knowledge_base_entries'] = (
            self.learning_ai.get_knowledge_stats()["total_entries"]
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            'message': message,
            'response': final_response,
            'source': source,
            'confidence': confidence,
            'timestamp': datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 50:
            self.conversation_history = self.conversation_history[-20:]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        source_info = {
            "knowledge_base": "üíæ –ò–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
            "web_search": "üåê –ù–∞–π–¥–µ–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", 
            "generated": "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
        }
        
        final_response += f"\n\n{source_info.get(source, '')}"
        
        return final_response
    
    def extract_entities(self, message):
        """–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        entities = {'languages': []}
        languages = ['python', 'javascript', 'java', 'html', 'css']
        for lang in languages:
            if lang in message.lower():
                entities['languages'].append(lang)
        return entities
    
    def _generate_fallback_response(self, message, intents, entities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, –∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ"""
        if 'greeting' in intents:
            return "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º? ü§ñ"
        elif 'farewell' in intents:
            return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏! üëã"
        elif 'help' in intents:
            return "–Ø –ø–æ–º–æ–≥–∞—é —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. üí°"
        
        responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∏ –∏–∑—É—á—É –¥–ª—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. üìö",
            "–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ —è —É—á—É—Å—å! üß†",
            "–ó–∞–ø–æ–º–Ω–∏–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ª—É—á—à–µ. üí´"
        ]
        return random.choice(responses)
    
    def get_learning_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'total_conversations': self.learning_stats['conversations_processed'],
            'knowledge_base_entries': self.learning_stats['knowledge_base_entries'],
            'web_searches': self.learning_stats['web_searches'],
        }
    
    def export_knowledge_base(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return self.learning_ai.export_knowledge()

class AIHandler(BaseHTTPRequestHandler):
    ai = SmartAI()
    
    def do_GET(self):
        if self.path == '/':
            self._serve_html()
        elif self.path == '/stats':
            self._serve_stats()
        elif self.path == '/export':
            self._export_knowledge()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        if self.path == '/chat':
            self._handle_chat()
        else:
            self.send_error(404, "Not Found")
    
    def _serve_html(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI Assistant</title>
            <style>
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }
                
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 100vh;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                
                .chat-container {
                    width: 100%;
                    max-width: 800px;
                    height: 90vh;
                    background: white;
                    border-radius: 20px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    display: flex;
                    flex-direction: column;
                    overflow: hidden;
                }
                
                .chat-header {
                    background: linear-gradient(135deg, #2c3e50, #3498db);
                    color: white;
                    padding: 20px;
                    text-align: center;
                }
                
                .chat-header h1 {
                    font-size: 1.5em;
                    margin-bottom: 5px;
                }
                
                .chat-header p {
                    opacity: 0.9;
                    font-size: 0.9em;
                }
                
                .chat-messages {
                    flex: 1;
                    padding: 20px;
                    overflow-y: auto;
                    background: #f8f9fa;
                }
                
                .message {
                    margin: 10px 0;
                    padding: 12px 16px;
                    border-radius: 18px;
                    max-width: 80%;
                    line-height: 1.4;
                    animation: fadeIn 0.3s ease;
                }
                
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                
                .user-message {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                    margin-left: auto;
                    border-bottom-right-radius: 5px;
                }
                
                .ai-message {
                    background: white;
                    color: #333;
                    border: 2px solid #e9ecef;
                    border-bottom-left-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }
                
                .message-time {
                    font-size: 0.7em;
                    opacity: 0.7;
                    margin-top: 5px;
                    text-align: right;
                }
                
                .chat-input-container {
                    padding: 20px;
                    background: white;
                    border-top: 1px solid #e9ecef;
                    display: flex;
                    gap: 10px;
                }
                
                .chat-input {
                    flex: 1;
                    padding: 12px 16px;
                    border: 2px solid #e9ecef;
                    border-radius: 25px;
                    font-size: 14px;
                    outline: none;
                    transition: border-color 0.3s;
                }
                
                .chat-input:focus {
                    border-color: #3498db;
                }
                
                .send-button {
                    padding: 12px 24px;
                    background: linear-gradient(135deg, #e74c3c, #c0392b);
                    color: white;
                    border: none;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 14px;
                    font-weight: 600;
                    transition: transform 0.2s;
                }
                
                .send-button:hover {
                    transform: translateY(-1px);
                }
                
                .send-button:active {
                    transform: translateY(0);
                }
                
                .typing-indicator {
                    display: none;
                    padding: 12px 16px;
                    background: white;
                    border: 2px solid #e9ecef;
                    border-radius: 18px;
                    border-bottom-left-radius: 5px;
                    max-width: 80px;
                    margin: 10px 0;
                }
                
                .typing-dots {
                    display: flex;
                    gap: 4px;
                }
                
                .typing-dot {
                    width: 8px;
                    height: 8px;
                    background: #999;
                    border-radius: 50%;
                    animation: typing 1.4s infinite;
                }
                
                .typing-dot:nth-child(2) {
                    animation-delay: 0.2s;
                }
                
                .typing-dot:nth-child(3) {
                    animation-delay: 0.4s;
                }
                
                @keyframes typing {
                    0%, 60%, 100% {
                        transform: translateY(0);
                        opacity: 0.4;
                    }
                    30% {
                        transform: translateY(-5px);
                        opacity: 1;
                    }
                }
                
                .code-block {
                    background: #2c3e50;
                    color: #ecf0f1;
                    padding: 12px;
                    border-radius: 8px;
                    margin: 8px 0;
                    font-family: 'Courier New', monospace;
                    font-size: 0.9em;
                    overflow-x: auto;
                    border-left: 4px solid #e74c3c;
                }
                
                /* Scrollbar styling */
                .chat-messages::-webkit-scrollbar {
                    width: 6px;
                }
                
                .chat-messages::-webkit-scrollbar-track {
                    background: #f1f1f1;
                    border-radius: 3px;
                }
                
                .chat-messages::-webkit-scrollbar-thumb {
                    background: #c1c1c1;
                    border-radius: 3px;
                }
                
                .chat-messages::-webkit-scrollbar-thumb:hover {
                    background: #a8a8a8;
                }
                
                /* Mobile responsiveness */
                @media (max-width: 768px) {
                    .chat-container {
                        height: 100vh;
                        border-radius: 0;
                    }
                    
                    .message {
                        max-width: 90%;
                    }
                    
                    .chat-header {
                        padding: 15px;
                    }
                    
                    .chat-header h1 {
                        font-size: 1.3em;
                    }
                }
            </style>
        </head>
        <body>
            <div class="chat-container">
                <div class="chat-header">
                    <h1>üß† AI Assistant</h1>
                    <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏</p>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <div class="message ai-message">
                        <strong>–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ</strong><br><br>
                        –Ø –º–æ–≥—É:<br>
                        ‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ<br>
                        ‚Ä¢ üíª –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞<br>
                        ‚Ä¢ üìö –û–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è<br><br>
                        –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å!
                    </div>
                </div>
                
                <div class="typing-indicator" id="typingIndicator">
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
                
                <div class="chat-input-container">
                    <input type="text" class="chat-input" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." autocomplete="off">
                    <button class="send-button" onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>

            <script>
                const chatMessages = document.getElementById('chatMessages');
                const messageInput = document.getElementById('messageInput');
                const typingIndicator = document.getElementById('typingIndicator');
                
                function addMessage(text, isUser) {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = isUser ? 'message user-message' : 'message ai-message';
                    
                    // Format text with code blocks
                    let formattedText = text;
                    if (text.includes('```')) {
                        formattedText = text.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
                    }
                    formattedText = formattedText.replace(/\\n/g, '<br>');
                    
                    const time = new Date().toLocaleTimeString('ru-RU', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                    });
                    
                    messageDiv.innerHTML = `${formattedText}<div class="message-time">${time}</div>`;
                    chatMessages.appendChild(messageDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
                
                function showTyping() {
                    typingIndicator.style.display = 'block';
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
                
                function hideTyping() {
                    typingIndicator.style.display = 'none';
                }
                
                async function sendMessage() {
                    const message = messageInput.value.trim();
                    if (!message) return;
                    
                    // Clear input
                    messageInput.value = '';
                    
                    // Add user message
                    addMessage(message, true);
                    
                    // Show typing indicator
                    showTyping();
                    
                    try {
                        const response = await fetch('/chat', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ message: message })
                        });
                        
                        const data = await response.json();
                        
                        // Hide typing indicator
                        hideTyping();
                        
                        // Add AI response
                        addMessage(data.response, false);
                        
                    } catch (error) {
                        hideTyping();
                        addMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', false);
                        console.error('Error:', error);
                    }
                }
                
                // Send message on Enter key
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });
                
                // Focus input on load
                messageInput.focus();
                
                // Auto-scroll to bottom on load
                chatMessages.scrollTop = chatMessages.scrollHeight;
            </script>
        </body>
        </html>
        '''
        self.wfile.write(html.encode('utf-8'))
    
    def _serve_stats(self):
        """–û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        stats = self.ai.get_learning_stats()
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        self.wfile.write(json.dumps(stats).encode('utf-8'))
    
    def _export_knowledge(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        export_file = self.ai.export_knowledge_base()
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        response = {"status": "success", "export_file": export_file}
        self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def _handle_chat(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            response = self.ai.generate_smart_response(message)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Error: {str(e)}")
    
    def log_message(self, format, *args):
        print(f"AI Assistant: {format % args}")

def main():
    PORT = int(os.environ.get('PORT', 8000))
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ AI Assistant —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë           AI Assistant v3.0                 ‚ïë")
    print("‚ïë        –¢–µ–∫—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π + –í–µ–±-–ø–æ–∏—Å–∫    ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"üìç –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print("\nüéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ üìö –¢–µ–∫—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (knowledge_base.json)")
    print("‚Ä¢ üîç –í–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo")
    print("‚Ä¢ üíª –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ Python")
    print("‚Ä¢ üß† –ê–≤—Ç–æ-–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö")
    print("‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–Ω–∞–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    
    try:
        server = HTTPServer(('0.0.0.0', PORT), AIHandler)
        print(f"‚úÖ AI Assistant –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print("üí´ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë AI Assistant –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()
