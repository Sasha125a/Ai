from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import re
import random
from datetime import datetime

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {
            'interests': set(),
            'skill_level': 'beginner',
            'preferred_languages': set()
        }
        
    def analyze_intent(self, message):
        message_lower = message.lower()
        
        intents = {
            'greeting': any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π']),
            'farewell': any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø—Ä–æ—â–∞–π']),
            'help': any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']),
            'explanation': any(word in message_lower for word in ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']),
            'code_request': any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø–∏—à–∏', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ–∫–∞–∂–∏ –∫–æ–¥']),
            'comparison': any(word in message_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '—á—Ç–æ –ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∏–µ']),
            'problem': any(word in message_lower for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å']),
            'opinion': any(word in message_lower for word in ['–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å', '—Å—á–∏—Ç–∞–µ—à—å', '—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è']),
            'learning_path': any(word in message_lower for word in ['—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–∫–∞–∫ —É—á–∏—Ç—å', '–ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∏–∑—É—á–µ–Ω–∏–µ']),
            'career': any(word in message_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'])
        }
        
        return [intent for intent, detected in intents.items() if detected]
    
    def extract_entities(self, message):
        entities = {
            'languages': [],
            'technologies': [],
            'concepts': [],
            'level_indicators': []
        }
        
        languages = {
            'python': ['python', '–ø–∏—Ç–æ–Ω', '–ø–∞–π—Ç–æ–Ω'],
            'javascript': ['javascript', 'js', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç'],
            'java': ['java', '–¥–∂–∞–≤–∞'],
            'html': ['html', '—Ö—Ç–º–ª'],
            'css': ['css', '—Ü—Å—Å'],
            'sql': ['sql', '–µ—Å –∫—å—é —ç–ª'],
            'typescript': ['typescript', '—Ç—Å–∞–π–ø—Å–∫—Ä–∏–ø—Ç']
        }
        
        for lang, keywords in languages.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['languages'].append(lang)
        
        technologies = {
            'react': ['react', '—Ä–µ–∞–∫—Ç'],
            'vue': ['vue', '–≤—å—é'],
            'django': ['django', '–¥–∂–∞–Ω–≥–æ'],
            'flask': ['flask', '—Ñ–ª–∞—Å–∫'],
            'node': ['node', '–Ω–æ–¥'],
            'docker': ['docker', '–¥–æ–∫–µ—Ä'],
            'git': ['git', '–≥–∏—Ç']
        }
        
        for tech, keywords in technologies.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['technologies'].append(tech)
        
        concepts = {
            '–æ–æ–ø': ['–æ–æ–ø', '–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', 'object-oriented'],
            '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', 'algorithm'],
            '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö': ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'database'],
            '–≤–µ–±': ['–≤–µ–±', 'web', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä'],
            '–º–æ–±–∏–ª—å–Ω–∞—è': ['–º–æ–±–∏–ª—å–Ω—ã–π', 'mobile', 'android', 'ios'],
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': ['–∏–∏', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        }
        
        for concept, keywords in concepts.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['concepts'].append(concept)
        
        return entities
    
    def update_user_profile(self, message, entities):
        if entities['languages']:
            self.user_profile['preferred_languages'].update(entities['languages'])
        
        level_indicators = {
            'beginner': ['–Ω–∞—á–∏–Ω–∞—é', '–Ω–æ–≤–∏—á–æ–∫', '—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª', '—Å –Ω—É–ª—è', '–Ω–µ –ø–æ–Ω–∏–º–∞—é'],
            'advanced': ['–æ–ø—ã—Ç–Ω—ã–π', 'senior', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—ç–∫—Å–ø–µ—Ä—Ç', '–≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞—é']
        }
        
        message_lower = message.lower()
        for level, indicators in level_indicators.items():
            if any(indicator in message_lower for indicator in indicators):
                self.user_profile['skill_level'] = level
    
    def generate_smart_response(self, message):
        intents = self.analyze_intent(message)
        entities = self.extract_entities(message)
        self.update_user_profile(message, entities)
        
        self.conversation_history.append({
            'message': message,
            'intents': intents,
            'entities': entities,
            'timestamp': datetime.now()
        })
        
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        return self._craft_response(message, intents, entities)
    
    def _craft_response(self, message, intents, entities):
        if 'greeting' in intents:
            return self._generate_greeting()
        
        if 'farewell' in intents:
            return self._generate_farewell()
        
        if 'help' in intents:
            return self._generate_help_response()
        
        if 'explanation' in intents:
            return self._generate_explanation(message, entities)
        
        if 'code_request' in intents:
            return self._generate_code_example(message, entities)
        
        if 'comparison' in intents:
            return self._generate_comparison(message, entities)
        
        if 'problem' in intents:
            return self._generate_problem_solution(message, entities)
        
        if 'opinion' in intents:
            return self._generate_opinion(message, entities)
        
        if 'learning_path' in intents:
            return self._generate_learning_path(entities)
        
        if 'career' in intents:
            return self._generate_career_advice(entities)
        
        return self._generate_contextual_response(message, entities)
    
    def _generate_greeting(self):
        greetings = [
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-GPT2 - —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏!",
            "üöÄ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! AI-GPT2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?",
            "üíª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! AI-GPT2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã!",
            "üéØ –ü—Ä–∏–≤–µ—Ç! AI-GPT2 –æ–Ω–ª–∞–π–Ω. –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ!"
        ]
        
        if len(self.conversation_history) > 1:
            last_topic = self._get_last_topic()
            if last_topic:
                return f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–º—É {last_topic}? –ò–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã?"
        
        return random.choice(greetings)
    
    def _generate_farewell(self):
        farewells = [
            "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! AI-GPT2 –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!",
            "üöÄ –ü–æ–∫–∞! –£–¥–∞—á–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç AI-GPT2!",
            "üí´ –î–æ –≤—Å—Ç—Ä–µ—á–∏! AI-GPT2 –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!",
            "üéØ –ü–æ–∫–∞! –ü–æ–º–Ω–∏ - AI-GPT2 —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∫–æ–¥–µ!"
        ]
        return random.choice(farewells)
    
    def _generate_help_response(self):
        base_help = "ü§ñ **AI-GPT2 –º–æ–∂–µ—Ç:**\n‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–∞—Ä—å–µ—Ä–æ–π\n‚Ä¢ –†–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n\n"
        
        if self.user_profile['preferred_languages']:
            langs = ", ".join(self.user_profile['preferred_languages'])
            base_help += f"üéØ –í–∏–∂—É —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {langs}. –ú–æ–≥—É —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —ç—Ç–∏ —Ç–µ–º—ã!"
        
        return base_help
    
    def _generate_explanation(self, message, entities):
        if entities['concepts']:
            concept = entities['concepts'][0]
            return self._explain_concept(concept)
        elif entities['languages']:
            language = entities['languages'][0]
            return self._explain_language(language)
        else:
            return "ü§î AI-GPT2: –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å? –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—é?"
    
    def _explain_concept(self, concept):
        explanations = {
            '–æ–æ–ø': {
                'beginner': """üéØ **–û–û–ü –æ—Ç AI-GPT2:**

–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—à—å –∏–≥—Ä—É:
‚Ä¢ **–ö–ª–∞—Å—Å** = –ß–µ—Ä—Ç–µ–∂ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Ä¢ **–û–±—ä–µ–∫—Ç** = –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂  
‚Ä¢ **–°–≤–æ–π—Å—Ç–≤–∞** = –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
‚Ä¢ **–ú–µ—Ç–æ–¥—ã** = –î–µ–π—Å—Ç–≤–∏—è

```python
class Hero:
    def __init__(self, name):
        self.name = name
        self.health = 100
    
    def attack(self):
        print(f"{self.name} –∞—Ç–∞–∫—É–µ—Ç!")

hero = Hero("–ê—Ä—Ç—É—Ä")
hero.attack()  # –ê—Ä—Ç—É—Ä –∞—Ç–∞–∫—É–µ—Ç!
```""",
                'intermediate': """‚ö° **–û–û–ü –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ—Ç AI-GPT2:**

1. **–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è** - —Å–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π
2. **–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
3. **–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º** - —Ä–∞–∑–Ω—ã–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
4. **–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è** - —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏

```python
class Animal:
    def speak(self): pass

class Dog(Animal):
    def speak(self): return "–ì–∞–≤!"

class Cat(Animal):  
    def speak(self): return "–ú—è—É!"

# –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
for animal in [Dog(), Cat()]:
    print(animal.speak())
```"""
            }
        }
        
        if concept in explanations:
            level = self.user_profile['skill_level']
            return explanations[concept].get(level, explanations[concept]['beginner'])
        
        return f"AI-GPT2: –ö–æ–Ω—Ü–µ–ø—Ü–∏—è '{concept}' –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?"
    
    def _generate_code_example(self, message, entities):
        if entities['languages']:
            language = entities['languages'][0]
            return self._get_smart_code_example(language, message)
        return "AI-GPT2: –î–ª—è –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞?"
    
    def _get_smart_code_example(self, language, context):
        context_lower = context.lower()
        
        if '–æ–æ–ø' in context_lower:
            examples = {
                'python': """```python
# AI-GPT2: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Python –∫–ª–∞—Å—Å
from typing import List

class SmartCart:
    def __init__(self):
        self.items: List[str] = []
    
    def add_item(self, item: str) -> None:
        self.items.append(item)
        print(f"AI-GPT2: –î–æ–±–∞–≤–ª–µ–Ω {item}")
    
    def show_items(self) -> None:
        print("AI-GPT2: –í –∫–æ—Ä–∑–∏–Ω–µ:", self.items)

cart = SmartCart()
cart.add_item("Python Book")
cart.add_item("Coffee")
cart.show_items()
```""",
                'javascript': """```javascript
// AI-GPT2: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript –∫–ª–∞—Å—Å
class SmartCart {
    constructor() {
        this.items = [];
    }
    
    addItem(item) {
        this.items.push(item);
        console.log(`AI-GPT2: –î–æ–±–∞–≤–ª–µ–Ω ${item}`);
    }
    
    showItems() {
        console.log("AI-GPT2: –í –∫–æ—Ä–∑–∏–Ω–µ:", this.items);
    }
}

const cart = new SmartCart();
cart.addItem("JavaScript Book");
cart.addItem("Coffee");
cart.showItems();
```"""
            }
            return examples.get(language, examples['python'])
        
        # –û–±—â–∏–π –ø—Ä–∏–º–µ—Ä
        examples = {
            'python': """```python
# AI-GPT2: –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def smart_data_processor(data):
    \"\"\"AI-GPT2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ\"\"\"
    if not data:
        return "AI-GPT2: –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!"
    
    processed = [
        f"–≠–ª–µ–º–µ–Ω—Ç {i}: {item}" 
        for i, item in enumerate(data, 1)
    ]
    return processed

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
data = ["Python", "AI", "Programming"]
result = smart_data_processor(data)
for item in result:
    print(item)
```""",
            'javascript': """```javascript
// AI-GPT2: –£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
function smartDataProcessor(data) {
    if (!data || data.length === 0) {
        return "AI-GPT2: –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ!";
    }
    
    return data.map((item, index) => 
        `AI-GPT2: –≠–ª–µ–º–µ–Ω—Ç ${index + 1}: ${item}`
    );
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const data = ["JavaScript", "AI", "Coding"];
const result = smartDataProcessor(data);
result.forEach(item => console.log(item));
```"""
        }
        return examples.get(language, "AI-GPT2: –í–æ—Ç –ø—Ä–∏–º–µ—Ä –Ω–∞ Python!\n" + examples['python'])
    
    def _generate_contextual_response(self, message, entities):
        if len(self.conversation_history) > 1:
            last_entities = self.conversation_history[-2].get('entities', {})
            if last_entities.get('languages') or last_entities.get('concepts'):
                return "AI-GPT2: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É? –ò–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å? üí≠"
        
        responses = [
            "AI-GPT2: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –µ–≥–æ –≤–º–µ—Å—Ç–µ. ü§î",
            "AI-GPT2: –•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –æ–±—ä—è—Å–Ω–∏–ª —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ? üí°", 
            "AI-GPT2: –•–æ—Ä–æ—à–∞—è —Ç–µ–º–∞! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üöÄ",
            "AI-GPT2: –ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å! –ü–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è. üìö"
        ]
        
        return random.choice(responses)
    
    def _get_last_topic(self):
        if len(self.conversation_history) < 2:
            return None
        
        last_entry = self.conversation_history[-2]
        entities = last_entry.get('entities', {})
        
        if entities.get('languages'):
            return entities['languages'][0]
        elif entities.get('concepts'):
            return entities['concepts'][0]
        
        return None

class AIHandler(BaseHTTPRequestHandler):
    ai = SmartAI()
    
    def do_GET(self):
        if self.path == '/':
            self._serve_html()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        if self.path == '/chat':
            self._handle_chat()
        else:
            self.send_error(404, "Not Found")
    
    def _serve_html(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI-GPT2 üöÄ</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                    max-width: 600px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .chat-container {
                    background: white;
                    border-radius: 20px;
                    padding: 25px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    height: 90vh;
                    display: flex;
                    flex-direction: column;
                }
                .header {
                    text-align: center;
                    margin-bottom: 20px;
                    background: linear-gradient(135deg, #2c3e50, #3498db);
                    color: white;
                    padding: 20px;
                    border-radius: 15px;
                    margin: -25px -25px 20px -25px;
                }
                .header h1 {
                    margin: 0;
                    font-size: 2.2em;
                    font-weight: 700;
                }
                .header p {
                    margin: 5px 0 0 0;
                    opacity: 0.9;
                    font-size: 1.1em;
                }
                #chat {
                    flex: 1;
                    border: 2px solid #e1e5e9;
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    overflow-y: auto;
                    background: #f8f9fa;
                }
                .message {
                    margin: 15px 0;
                    padding: 15px 20px;
                    border-radius: 18px;
                    max-width: 85%;
                    line-height: 1.5;
                    animation: fadeIn 0.3s ease;
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .user {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                    margin-left: auto;
                    text-align: right;
                    border-bottom-right-radius: 5px;
                }
                .ai {
                    background: white;
                    color: #2c3e50;
                    border: 2px solid #3498db;
                    border-bottom-left-radius: 5px;
                    box-shadow: 0 2px 10px rgba(52, 152, 219, 0.2);
                }
                .input-area {
                    display: flex;
                    gap: 12px;
                    align-items: center;
                }
                #messageInput {
                    flex: 1;
                    padding: 15px 20px;
                    border: 2px solid #bdc3c7;
                    border-radius: 25px;
                    font-size: 16px;
                    outline: none;
                    transition: all 0.3s;
                    background: white;
                }
                #messageInput:focus {
                    border-color: #3498db;
                    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
                }
                button {
                    padding: 15px 25px;
                    background: linear-gradient(135deg, #e74c3c, #c0392b);
                    color: white;
                    border: none;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 16px;
                    font-weight: 600;
                    transition: all 0.3s;
                    box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
                }
                button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
                }
                .code-block {
                    background: #2c3e50;
                    color: #ecf0f1;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    font-family: 'Courier New', monospace;
                    white-space: pre-wrap;
                    overflow-x: auto;
                    border-left: 4px solid #e74c3c;
                }
                .ai-label {
                    font-weight: 600;
                    color: #3498db;
                    margin-bottom: 5px;
                }
                .user-label {
                    font-weight: 600;
                    color: white;
                    margin-bottom: 5px;
                }
            </style>
        </head>
        <body>
            <div class="chat-container">
                <div class="header">
                    <h1>üöÄ AI-GPT2</h1>
                    <p>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                </div>
                
                <div id="chat">
                    <div class="message ai">
                        <div class="ai-label">üß† AI-GPT2</div>
                        –ü—Ä–∏–≤–µ—Ç! –Ø AI-GPT2 - —Ç–≤–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. 
                        –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –æ–±—É—á–µ–Ω–∏–µ–º! üöÄ
                    </div>
                </div>
                
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="–°–ø—Ä–æ—Å–∏ AI-GPT2 –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏...">
                    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>

            <script>
                function addMessage(text, isUser) {
                    const chat = document.getElementById('chat');
                    const message = document.createElement('div');
                    message.className = isUser ? 'message user' : 'message ai';
                    
                    let formattedText = text;
                    if (text.includes('```')) {
                        formattedText = text.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
                    }
                    formattedText = formattedText.replace(/\\n/g, '<br>');
                    
                    if (isUser) {
                        message.innerHTML = '<div class="user-label">üë§ –í—ã</div>' + formattedText;
                    } else {
                        message.innerHTML = '<div class="ai-label">üß† AI-GPT2</div>' + formattedText;
                    }
                    
                    chat.appendChild(message);
                    chat.scrollTop = chat.scrollHeight;
                }

                async function sendMessage() {
                    const input = document.getElementById('messageInput');
                    const message = input.value.trim();
                    
                    if (!message) return;
                    
                    input.value = '';
                    addMessage(message, true);
                    
                    try {
                        const response = await fetch('/chat', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({message: message})
                        });
                        
                        const data = await response.json();
                        addMessage(data.response, false);
                        
                    } catch (error) {
                        addMessage('‚ùå AI-GPT2: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
                    }
                }

                document.getElementById('messageInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') sendMessage();
                });

                document.getElementById('messageInput').focus();
            </script>
        </body>
        </html>
        '''
        self.wfile.write(html.encode('utf-8'))
    
    def _handle_chat(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            response = self.ai.generate_smart_response(message)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Error: {str(e)}")
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        print(f"üöÄ AI-GPT2: {format % args}")

if __name__ == '__main__':
    HOST = '0.0.0.0'
    PORT = 8000
    
    print("üöÄ –ó–ê–ü–£–°–ö AI-GPT2...")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë             AI-GPT2 1.0             ‚ïë")
    print("‚ïë    –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞      ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"üìç –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print("üéØ –ì–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é!")
    
    try:
        server = HTTPServer((HOST, PORT), AIHandler)
        print(f"‚úÖ AI-GPT2 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {HOST}:{PORT}")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë AI-GPT2 –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
