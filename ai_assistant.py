from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import re
import random
import os
from datetime import datetime
import requests
import urllib.parse
import nltk
import ssl
import zipfile
import tempfile
from pathlib import Path

# –û–±—Ö–æ–¥ SSL –¥–ª—è NLTK
try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö NLTK
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

class SimpleClassifier:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    def __init__(self):
        self.patterns = {
            'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ'],
            'farewell': ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø—Ä–æ—â–∞–π', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏'],
            'help': ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—Ñ—É–Ω–∫—Ü–∏–∏'],
            'explanation': ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ–∑–Ω–∞—á–∞–µ—Ç'],
            'code_request': ['–∫–æ–¥', '–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø–∏—à–∏', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ–∫–∞–∂–∏ –∫–æ–¥'],
            'comparison': ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '—á—Ç–æ –ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∏–µ', '–æ—Ç–ª–∏—á–∏—è'],
            'problem': ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å', '–∏—Å–ø—Ä–∞–≤–∏—Ç—å'],
            'opinion': ['–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å', '—Å—á–∏—Ç–∞–µ—à—å', '—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è'],
            'learning_path': ['—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–∫–∞–∫ —É—á–∏—Ç—å', '–ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∏–∑—É—á–µ–Ω–∏–µ'],
            'feedback': ['–æ—Ç–ª–∏—á–Ω–æ', '–ø–ª–æ—Ö–æ', '—Å–ø–∞—Å–∏–±–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—Ö–æ—Ä–æ—à–æ'],
            'create_code': ['—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '–Ω–æ–≤—ã–π –∫–ª–∞—Å—Å', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª–∞—Å—Å', '–Ω–∞–ø–∏—à–∏ –∫–ª–∞—Å—Å']
        }
    
    def predict(self, text):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ intent'–∞ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        intents = []
        
        for intent, keywords in self.patterns.items():
            if any(keyword in text_lower for keyword in keywords):
                intents.append(intent)
        
        return intents if intents else ['unknown']

class AdvancedWebSearch:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        })
        self.search_engines = ['bing', 'duckduckgo', 'wikipedia', 'stackoverflow']
    
    def search_internet(self, query, max_results=5):
        """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        print(f"üîç –ó–∞–ø—É—Å–∫–∞—é —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è: '{query}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        query_type = self._analyze_query_type(query)
        print(f"üéØ –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {query_type}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        search_strategy = self._get_search_strategy(query_type)
        
        all_results = []
        used_engines = set()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        for engine in search_strategy:
            if len(all_results) >= max_results:
                break
                
            if engine not in used_engines:
                try:
                    results = self._search_with_engine(engine, query, query_type, max_results - len(all_results))
                    if results:
                        all_results.extend(results)
                        used_engines.add(engine)
                        print(f"‚úÖ {engine.capitalize()} –Ω–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                except Exception as e:
                    print(f"‚ùå {engine.capitalize()} –æ—à–∏–±–∫–∞: {e}")
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–∫–∏
        if len(all_results) < max_results:
            remaining_engines = [e for e in self.search_engines if e not in used_engines]
            for engine in remaining_engines:
                if len(all_results) >= max_results:
                    break
                try:
                    results = self._search_with_engine(engine, query, query_type, max_results - len(all_results))
                    if results:
                        all_results.extend(results)
                        print(f"‚úÖ {engine.capitalize()} (—Ä–µ–∑–µ—Ä–≤) –Ω–∞–π–¥–µ–Ω–æ: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                except Exception as e:
                    print(f"‚ùå {engine.capitalize()} –æ—à–∏–±–∫–∞: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        sorted_results = self._sort_by_relevance(query, all_results)
        
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(sorted_results)}")
        return sorted_results[:max_results]
    
    def _analyze_query_type(self, query):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
        query_lower = query.lower()
        
        # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–¥
        if any(word in query_lower for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–æ—à–∏–±–∫–∞', 'python', 'javascript', 'java']):
            return 'programming'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        elif any(phrase in query_lower for phrase in ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–æ–∑–Ω–∞—á–∞–µ—Ç', '–æ–±—ä—è—Å–Ω–∏']):
            return 'definition'
        
        # –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)
        elif any(phrase in query_lower for phrase in ['–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å', '–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å', '–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']):
            return 'howto'
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        elif any(word in query_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', '–ª—É—á—à–µ', '—Ö—É–∂–µ', 'vs', 'versus']):
            return 'comparison'
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        elif any(word in query_lower for word in ['–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–∏—Å–ø—Ä–∞–≤–∏—Ç—å', '–±–∞–≥']):
            return 'technical'
        
        # –§–∞–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        elif any(word in query_lower for word in ['—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º']):
            return 'fact'
        
        else:
            return 'general'
    
    def _get_search_strategy(self, query_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        strategies = {
            'programming': ['stackoverflow', 'bing', 'duckduckgo'],
            'definition': ['wikipedia', 'bing', 'duckduckgo'],
            'howto': ['bing', 'stackoverflow', 'duckduckgo'],
            'comparison': ['bing', 'duckduckgo'],
            'technical': ['stackoverflow', 'bing', 'duckduckgo'],
            'fact': ['bing', 'wikipedia', 'duckduckgo'],
            'general': ['bing', 'duckduckgo', 'wikipedia']
        }
        return strategies.get(query_type, ['bing', 'duckduckgo'])
    
    def _search_with_engine(self, engine, query, query_type, max_results):
        """–ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        if engine == 'bing':
            return self._bing_search(query, max_results, query_type)
        elif engine == 'duckduckgo':
            return self._duckduckgo_search(query, max_results)
        elif engine == 'wikipedia':
            return self._wikipedia_search(query, max_results)
        elif engine == 'stackoverflow':
            return self._stackoverflow_search(query, max_results)
        return []
    
    def _bing_search(self, query, max_results, query_type):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Bing —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Bing
            optimized_query = self._optimize_query(query, query_type, 'bing')
            
            url = "https://www.bing.com/search"
            params = {'q': optimized_query, 'count': max_results + 2}  # –ë–µ—Ä–µ–º –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
            response = self.session.get(url, params=params, timeout=15)
            response.raise_for_status()
            
            results = []
            
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            patterns = [
                r'<li class="b_algo">(.*?)</li>',
                r'<li class="b_algo"[^>]*>(.*?)</li>',
                r'<div class="b_algo">(.*?)</div>'
            ]
            
            for pattern in patterns:
                items = re.findall(pattern, response.text, re.DOTALL)
                if items:
                    break
            
            for item in items[:max_results + 2]:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title_match = re.search(r'<h2>\s*<a[^>]*>(.*?)</a>\s*</h2>', item, re.DOTALL)
                    if not title_match:
                        title_match = re.search(r'<a[^>]*>(.*?)</a>', item, re.DOTALL)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
                    url_match = re.search(r'href="([^"]+)"', item)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    desc_match = re.search(r'<p[^>]*>(.*?)</p>', item, re.DOTALL)
                    
                    if title_match and url_match:
                        title = re.sub(r'<.*?>', '', title_match.group(1)).strip()
                        url = url_match.group(1)
                        
                        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                        snippet = ""
                        if desc_match:
                            snippet = re.sub(r'<.*?>', '', desc_match.group(1)).strip()
                            snippet = re.sub(r'\s+', ' ', snippet)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                        if (self._is_relevant_result(query, title, snippet) and 
                            url.startswith('http') and
                            not any(domain in url for domain in ['bing.com', 'microsoft.com'])):
                            
                            results.append({
                                'title': title[:120],
                                'snippet': snippet[:350],
                                'source': 'Bing',
                                'url': url,
                                'relevance_score': self._calculate_relevance(query, title, snippet)
                            })
                except Exception as e:
                    continue
            
            return results[:max_results]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Bing: {e}")
            return []
    
    def _duckduckgo_search(self, query, max_results):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo"""
        try:
            url = "https://api.duckduckgo.com/"
            params = {
                'q': query,
                'format': 'json',
                'no_html': '1',
                'skip_disambig': '1'
            }
            
            response = self.session.get(url, params=params, timeout=10)
            data = response.json()
            
            results = []
            if data.get('AbstractText'):
                results.append({
                    'title': data.get('Heading', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'),
                    'snippet': data.get('AbstractText'),
                    'source': 'DuckDuckGo',
                    'url': data.get('AbstractURL', ''),
                    'relevance_score': 0.8
                })
            
            # –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            if data.get('RelatedTopics'):
                for topic in data.get('RelatedTopics', [])[:max_results-1]:
                    if topic.get('Text') and topic.get('FirstURL'):
                        results.append({
                            'title': topic.get('Text', '')[:100],
                            'snippet': topic.get('Text', ''),
                            'source': 'DuckDuckGo',
                            'url': topic.get('FirstURL', ''),
                            'relevance_score': 0.6
                        })
            
            return results[:max_results]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo: {e}")
            return []
    
    def _wikipedia_search(self, query, max_results):
        """–ü–æ–∏—Å–∫ –≤ Wikipedia —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        try:
            # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            clean_query = self._extract_main_keyword(query)
            if not clean_query or len(clean_query) < 2:
                return []
                
            url = f"https://ru.wikipedia.org/api/rest_v1/page/summary/{urllib.parse.quote(clean_query)}"
            response = self.session.get(url, timeout=8)
            
            if response.status_code == 200:
                data = response.json()
                snippet = data.get('extract', '')
                if snippet:
                    return [{
                        'title': f"üìö {data.get('title', '–í–∏–∫–∏–ø–µ–¥–∏—è')}",
                        'snippet': snippet,
                        'source': 'Wikipedia',
                        'url': data.get('content_urls', {}).get('desktop', {}).get('page', ''),
                        'relevance_score': 0.9
                    }]
        except Exception as e:
            print(f"‚ö†Ô∏è Wikipedia –ø–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        return []
    
    def _stackoverflow_search(self, query, max_results):
        """–ü–æ–∏—Å–∫ –≤ StackOverflow –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è StackOverflow
            so_query = re.sub(r'[^\w\s]', ' ', query)  # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            so_query = ' '.join(so_query.split()[:6])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 —Å–ª–æ–≤
            
            url = "https://api.stackexchange.com/2.3/search/advanced"
            params = {
                'order': 'desc',
                'sort': 'relevance',
                'q': so_query,
                'site': 'stackoverflow',
                'filter': 'withbody',
                'pagesize': max_results
            }
            
            response = self.session.get(url, params=params, timeout=10)
            data = response.json()
            
            results = []
            for item in data.get('items', [])[:max_results]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ HTML
                body = re.sub(r'<.*?>', '', item.get('body', ''))
                snippet = body[:300] + '...' if len(body) > 300 else body
                
                results.append({
                    'title': item.get('title', ''),
                    'snippet': snippet,
                    'source': 'StackOverflow',
                    'url': item.get('link', ''),
                    'relevance_score': 0.85
                })
            
            return results
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ StackOverflow: {e}")
            return []
    
    def _optimize_query(self, query, query_type, engine):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
        stop_words = {'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–º–æ–∂–µ—Ç–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ'}
        words = [word for word in query.split() if word.lower() not in stop_words]
        base_query = ' '.join(words)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–≤–∏–∂–∫–∞
        if query_type == 'programming' and engine == 'bing':
            return base_query + ' site:stackoverflow.com OR site:github.com'
        elif query_type == 'definition':
            return f'"{base_query}" –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'
        elif query_type == 'howto':
            return base_query + ' –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'
        
        return base_query
    
    def _extract_main_keyword(self, query):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        # –£–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        query = re.sub(r'—á—Ç–æ —Ç–∞–∫–æ–µ|–∫—Ç–æ —Ç–∞–∫–æ–π|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ|–æ–∑–Ω–∞—á–∞–µ—Ç|–æ–±—ä—è—Å–Ω–∏', '', query, flags=re.IGNORECASE)
        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
        query = re.sub(r'[?.!]$', '', query.strip())
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
        words = query.strip().split()
        return words[0] if words else ""
    
    def _is_relevant_result(self, query, title, snippet):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        query_words = set(query.lower().split())
        content = (title + ' ' + snippet).lower()
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
        matches = sum(1 for word in query_words if word in content and len(word) > 2)
        return matches >= max(1, len(query_words) // 2)
    
    def _calculate_relevance(self, query, title, snippet):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 1"""
        query_words = set(word for word in query.lower().split() if len(word) > 2)
        if not query_words:
            return 0.5
            
        content = (title + ' ' + snippet).lower()
        
        # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ)
        title_matches = sum(1 for word in query_words if word in title.lower())
        # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Å–Ω–∏–ø–ø–µ—Ç–µ
        snippet_matches = sum(1 for word in query_words if word in snippet.lower())
        
        total_score = (title_matches * 2 + snippet_matches) / (len(query_words) * 3)
        return min(1.0, total_score)
    
    def _sort_by_relevance(self, query, results):
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        for result in results:
            if 'relevance_score' not in result:
                result['relevance_score'] = self._calculate_relevance(query, result['title'], result['snippet'])
        
        return sorted(results, key=lambda x: x.get('relevance_score', 0), reverse=True)
class TextKnowledgeBase:
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≤ JSON —Ñ–∞–π–ª–µ"""
    
    def __init__(self, filename="knowledge_base.json"):
        self.filename = filename
        self.knowledge = self._load_knowledge()
    
    def _load_knowledge(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.filename):
            try:
                with open(self.filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, Exception) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é.")
                return self._create_default_structure()
        else:
            return self._create_default_structure()
    
    def _create_default_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "version": "1.0",
            "created_at": datetime.now().isoformat(),
            "statistics": {
                "total_entries": 0,
                "categories": {},
                "last_updated": datetime.now().isoformat()
            },
            "categories": {
                "programming": [],
                "algorithms": [],
                "web": [],
                "databases": [],
                "concepts": [],
                "code_examples": [],
                "qa_pairs": []
            }
        }
    
    def save_knowledge(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.knowledge["statistics"]["total_entries"] = sum(
                len(entries) for entries in self.knowledge["categories"].values()
            )
            self.knowledge["statistics"]["last_updated"] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.knowledge, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {self.filename}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            return False
    
    def add_entry(self, category, question, answer, intent=None, tags=None, confidence=1.0):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        entry = {
            "id": self._generate_id(),
            "question": question,
            "answer": answer,
            "intent": intent or "general",
            "tags": tags or [],
            "confidence": confidence,
            "created_at": datetime.now().isoformat(),
            "usage_count": 0,
            "success_rate": 1.0
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if category not in self.knowledge["categories"]:
            self.knowledge["categories"][category] = []
        
        self.knowledge["categories"][category].append(entry)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}': {question[:50]}...")
        self.save_knowledge()
        return entry["id"]
    
    def _generate_id(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
        return f"entry_{datetime.now().strftime('%Y%m%d_%H%M%S_%f')}"
    
    def search(self, query, category=None, min_confidence=0.3, limit=5):
        """–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
        query_lower = query.lower()
        results = []
        
        categories_to_search = [category] if category else self.knowledge["categories"].keys()
        
        for cat in categories_to_search:
            for entry in self.knowledge["categories"].get(cat, []):
                if entry["confidence"] >= min_confidence:
                    score = self._calculate_similarity(query_lower, entry["question"].lower())
                    if score > 0.3:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
                        entry['similarity_score'] = score
                        entry['category'] = cat
                        results.append(entry)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: (x['similarity_score'], x['confidence']), reverse=True)
        return results[:limit]
    
    def _calculate_similarity(self, text1, text2):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
        words1 = set(self._extract_keywords(text1))
        words2 = set(self._extract_keywords(text2))
        
        if not words1 or not words2:
            return 0.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union)
    
    def _extract_keywords(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        words = re.findall(r'\b[a-z–∞-—è]{3,}\b', text.lower())
        stop_words = {'—ç—Ç–æ', '–∫–∞–∫', '—á—Ç–æ', '–¥–ª—è', '–∏–ª–∏', '–µ—Å–ª–∏', '—Ç–∞–∫', '–Ω–æ', '–Ω–∞', '–≤', '—Å'}
        return [word for word in words if word not in stop_words]
    
    def get_categories(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return list(self.knowledge["categories"].keys())
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        stats = self.knowledge["statistics"].copy()
        stats["categories_breakdown"] = {
            category: len(entries) 
            for category, entries in self.knowledge["categories"].items()
        }
        return stats
    
    def update_entry_usage(self, entry_id, success=True):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        for category in self.knowledge["categories"].values():
            for entry in category:
                if entry["id"] == entry_id:
                    entry["usage_count"] += 1
                    if success:
                        entry["success_rate"] = min(1.0, entry.get("success_rate", 1.0) + 0.1)
                    else:
                        entry["success_rate"] = max(0.0, entry.get("success_rate", 1.0) - 0.1)
                    self.save_knowledge()
                    return True
        return False
    
    def export_to_file(self, export_filename=None):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        if not export_filename:
            export_filename = f"knowledge_export_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
        
        try:
            with open(export_filename, 'w', encoding='utf-8') as f:
                f.write("=" * 60 + "\n")
                f.write("üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô AI ASSISTANT\n")
                f.write("=" * 60 + "\n\n")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats = self.get_statistics()
                f.write(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_entries']}\n")
                f.write(f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_updated']}\n\n")
                
                # –ó–∞–ø–∏—Å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                for category, entries in self.knowledge["categories"].items():
                    if entries:
                        f.write(f"üéØ –ö–ê–¢–ï–ì–û–†–ò–Ø: {category.upper()}\n")
                        f.write("-" * 40 + "\n")
                        
                        for i, entry in enumerate(entries, 1):
                            f.write(f"{i}. –í–û–ü–†–û–°: {entry['question']}\n")
                            f.write(f"   –û–¢–í–ï–¢: {entry['answer'][:100]}{'...' if len(entry['answer']) > 100 else ''}\n")
                            f.write(f"   (–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {entry['usage_count']} —Ä–∞–∑, –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {entry['success_rate']:.2f})\n\n")
                
                f.write("=" * 60 + "\n")
                f.write("–ö–æ–Ω–µ—Ü —ç–∫—Å–ø–æ—Ä—Ç–∞\n")
                f.write("=" * 60 + "\n")
            
            print(f"üì§ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤: {export_filename}")
            return export_filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return None

class ZipAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ZIP-–∞—Ä—Ö–∏–≤–æ–≤"""
    
    def __init__(self):
        self.temp_dir = None
    
    def analyze_zip(self, zip_file_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç ZIP-–∞—Ä—Ö–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        try:
            if not os.path.exists(zip_file_path):
                return {"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
            self.temp_dir = tempfile.mkdtemp()
            
            structure = {
                "filename": os.path.basename(zip_file_path),
                "total_size": os.path.getsize(zip_file_path),
                "file_count": 0,
                "folder_count": 0,
                "structure": [],
                "file_types": {},
                "created_at": datetime.now().isoformat()
            }
            
            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                file_list = zip_ref.namelist()
                structure["file_count"] = len(file_list)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                structure["structure"] = self._build_tree_structure(file_list)
                structure["folder_count"] = self._count_folders(file_list)
                structure["file_types"] = self._analyze_file_types(file_list)
                
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                zip_ref.extractall(self.temp_dir)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —Ñ–∞–π–ª–æ–≤
                structure["content_analysis"] = self._analyze_contents(self.temp_dir)
            
            return structure
            
        except zipfile.BadZipFile:
            return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP-—Ñ–∞–π–ª"}
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}
    
    def _build_tree_structure(self, file_list):
        """–°—Ç—Ä–æ–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"""
        root = {}
        
        for file_path in file_list:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS
            if '__MACOSX' in file_path or '.DS_Store' in file_path:
                continue
                
            parts = file_path.split('/')
            current = root
            
            for i, part in enumerate(parts):
                if not part:  # –ü—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ /)
                    continue
                    
                if i == len(parts) - 1:
                    # –≠—Ç–æ —Ñ–∞–π–ª
                    current[part] = {"type": "file", "path": file_path}
                else:
                    # –≠—Ç–æ –ø–∞–ø–∫–∞
                    if part not in current:
                        current[part] = {"type": "folder", "children": {}}
                    current = current[part]["children"]
        
        return self._format_tree(root)
    
    def _format_tree(self, node, level=0):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        result = []
        indent = "  " * level
        
        for name, info in sorted(node.items()):
            if info["type"] == "folder":
                result.append(f"{indent}üìÅ {name}/")
                result.extend(self._format_tree(info["children"], level + 1))
            else:
                result.append(f"{indent}üìÑ {name}")
        
        return result
    
    def _count_folders(self, file_list):
        """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫"""
        folders = set()
        for file_path in file_list:
            dir_path = os.path.dirname(file_path)
            if dir_path:  # –ù–µ –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                folders.add(dir_path)
        return len(folders)
    
    def _analyze_file_types(self, file_list):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ"""
        file_types = {}
        for file_path in file_list:
            if not file_path.endswith('/'):  # –≠—Ç–æ –Ω–µ –ø–∞–ø–∫–∞
                ext = os.path.splitext(file_path)[1].lower()
                if not ext:
                    ext = "–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
                file_types[ext] = file_types.get(ext, 0) + 1
        return dict(sorted(file_types.items(), key=lambda x: x[1], reverse=True))
    
    def _analyze_contents(self, extract_path):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤"""
        analysis = {
            "readme_files": [],
            "code_files": [],
            "config_files": [],
            "image_files": [],
            "document_files": []
        }
        
        code_extensions = {'.py', '.js', '.java', '.cpp', '.c', '.html', '.css', '.php', '.rb', '.go', '.rs'}
        config_extensions = {'.json', '.xml', '.yaml', '.yml', '.ini', '.cfg', '.conf', '.toml'}
        image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp'}
        document_extensions = {'.txt', '.md', '.pdf', '.doc', '.docx', '.rtf'}
        
        for root_dir, dirs, files in os.walk(extract_path):
            for file in files:
                file_path = os.path.join(root_dir, file)
                rel_path = os.path.relpath(file_path, extract_path)
                ext = os.path.splitext(file)[1].lower()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                if file.startswith('.') or '__MACOSX' in rel_path:
                    continue
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
                if file.lower() in ['readme', 'readme.txt', 'readme.md', 'readme.rst']:
                    analysis["readme_files"].append(rel_path)
                elif ext in code_extensions:
                    analysis["code_files"].append(rel_path)
                elif ext in config_extensions:
                    analysis["config_files"].append(rel_path)
                elif ext in image_extensions:
                    analysis["image_files"].append(rel_path)
                elif ext in document_extensions:
                    analysis["document_files"].append(rel_path)
        
        return analysis
    
    def read_file_content(self, file_path, max_lines=50):
        """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                lines = []
                for i, line in enumerate(f):
                    if i >= max_lines:
                        lines.append("... (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫)")
                        break
                    lines.append(line.rstrip())
                return lines
        except:
            try:
                with open(file_path, 'r', encoding='cp1251', errors='ignore') as f:
                    lines = []
                    for i, line in enumerate(f):
                        if i >= max_lines:
                            lines.append("... (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 50 —Å—Ç—Ä–æ–∫)")
                            break
                        lines.append(line.rstrip())
                    return lines
            except:
                return ["[–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª - –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞]"]
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        if self.temp_dir and os.path.exists(self.temp_dir):
            import shutil
            shutil.rmtree(self.temp_dir)
            self.temp_dir = None

class IntelligentCodeGenerator:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —è–∑—ã–∫–æ–≤"""
    
    def __init__(self):
        self.language_rules = self._init_language_rules()
        self.code_patterns = self._init_code_patterns()
    
    def _init_language_rules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'python': {
                'extension': '.py',
                'comment': '#',
                'string_quotes': ['"', "'"],
                'block_start': ':',
                'indentation': 4,
                'import_keyword': 'import',
                'function_def': 'def',
                'class_def': 'class',
                'main_guard': 'if __name__ == "__main__":'
            },
            'javascript': {
                'extension': '.js',
                'comment': '//',
                'string_quotes': ['"', "'", '`'],
                'block_start': '{',
                'block_end': '}',
                'indentation': 2,
                'import_keyword': 'import',
                'function_def': 'function',
                'class_def': 'class',
                'variable_def': ['let', 'const', 'var']
            },
            'java': {
                'extension': '.java',
                'comment': '//',
                'string_quotes': ['"'],
                'block_start': '{',
                'block_end': '}',
                'indentation': 4,
                'import_keyword': 'import',
                'function_def': 'public static',
                'class_def': 'public class',
                'main_method': 'public static void main(String[] args)'
            },
            'c': {
                'extension': '.c',
                'comment': '//',
                'string_quotes': ['"'],
                'block_start': '{',
                'block_end': '}',
                'indentation': 4,
                'include_keyword': '#include',
                'function_def': '',
                'main_function': 'int main()'
            },
            'cpp': {
                'extension': '.cpp',
                'comment': '//',
                'string_quotes': ['"'],
                'block_start': '{',
                'block_end': '}',
                'indentation': 4,
                'include_keyword': '#include',
                'function_def': '',
                'class_def': 'class',
                'main_function': 'int main()'
            },
            'csharp': {
                'extension': '.cs',
                'comment': '//',
                'string_quotes': ['"'],
                'block_start': '{',
                'block_end': '}',
                'indentation': 4,
                'using_keyword': 'using',
                'class_def': 'public class',
                'namespace_def': 'namespace',
                'main_method': 'static void Main(string[] args)'
            }
        }
    
    def _init_code_patterns(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–æ–¥–∞"""
        return {
            'calculator': ['—Å—á–µ—Ç', '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '–≤—ã—á–∏—Å–ª', '–º–∞—Ç–µ–º–∞—Ç'],
            'file_operation': ['—Ñ–∞–π–ª', '–ø—Ä–æ—á–∏—Ç', '–∑–∞–ø–∏—Å', '—Å–æ—Ö—Ä–∞–Ω'],
            'data_structure': ['—Å–ø–∏—Å–æ–∫', '–º–∞—Å—Å–∏–≤', '—Å–ª–æ–≤–∞—Ä—å', '—Å—Ç—Ä—É–∫—Ç—É—Ä'],
            'class_object': ['–∫–ª–∞—Å—Å', '–æ–±—ä–µ–∫—Ç', '–æ–æ–ø', '–∏–Ω–∫–∞–ø—Å—É–ª—è—Ü'],
            'web_request': ['–∑–∞–ø—Ä–æ—Å', 'http', 'api', '–≤–µ–±'],
            'algorithm': ['—Å–æ—Ä—Ç–∏—Ä–æ–≤', '–ø–æ–∏—Å–∫', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ä–µ–∫—É—Ä—Å']
        }
    
    def generate_code(self, request, language='python'):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∞–≤–∏–ª —è–∑—ã–∫–∞"""
        request_lower = request.lower()
        language = language.lower()
        
        if language not in self.language_rules:
            return f"‚ùå –Ø–∑—ã–∫ {language} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        
        rules = self.language_rules[language]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        code_type = self._analyze_request_type(request_lower)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if code_type == 'calculator':
            return self._generate_calculator(request, language, rules)
        elif code_type == 'class_object':
            return self._generate_class(request, language, rules)
        elif code_type == 'file_operation':
            return self._generate_file_operations(request, language, rules)
        elif code_type == 'data_structure':
            return self._generate_data_structure(request, language, rules)
        elif code_type == 'algorithm':
            return self._generate_algorithm(request, language, rules)
        else:
            return self._generate_general_code(request, language, rules)
    
    def _analyze_request_type(self, request):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        for pattern_type, keywords in self.code_patterns.items():
            if any(keyword in request for keyword in keywords):
                return pattern_type
        return 'general'
    
    def _generate_calculator(self, request, language, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        if language == 'python':
            return self._python_calculator(request, rules)
        elif language == 'javascript':
            return self._javascript_calculator(request, rules)
        elif language == 'java':
            return self._java_calculator(request, rules)
        elif language == 'c':
            return self._c_calculator(request, rules)
        elif language == 'cpp':
            return self._cpp_calculator(request, rules)
        elif language == 'csharp':
            return self._csharp_calculator(request, rules)
    
    def _generate_class(self, request, language, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã"""
        if language == 'python':
            return self._python_class(request, rules)
        elif language == 'javascript':
            return self._javascript_class(request, rules)
        elif language == 'java':
            return self._java_class(request, rules)
        elif language == 'cpp':
            return self._cpp_class(request, rules)
        elif language == 'csharp':
            return self._csharp_class(request, rules)
    
    def _generate_file_operations(self, request, language, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏"""
        if language == 'python':
            return self._python_file_ops(request, rules)
        elif language == 'javascript':
            return self._javascript_file_ops(request, rules)
        elif language == 'java':
            return self._java_file_ops(request, rules)
        elif language == 'c':
            return self._c_file_ops(request, rules)
    
    def _generate_data_structure(self, request, language, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        if language == 'python':
            return self._python_data_structures(request, rules)
        elif language == 'javascript':
            return self._javascript_data_structures(request, rules)
        elif language == 'java':
            return self._java_data_structures(request, rules)
        elif language == 'c':
            return self._c_data_structures(request, rules)
    
    def _generate_algorithm(self, request, language, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã"""
        if language == 'python':
            return self._python_algorithms(request, rules)
        elif language == 'javascript':
            return self._javascript_algorithms(request, rules)
        elif language == 'java':
            return self._java_algorithms(request, rules)
        elif language == 'c':
            return self._c_algorithms(request, rules)
    
    def _generate_general_code(self, request, language, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        entities = self._extract_entities(request)
        
        if language == 'python':
            return self._python_general(request, entities, rules)
        elif language == 'javascript':
            return self._javascript_general(request, entities, rules)
        elif language == 'java':
            return self._java_general(request, entities, rules)
        elif language == 'c':
            return self._c_general(request, entities, rules)
        elif language == 'cpp':
            return self._cpp_general(request, entities, rules)
        elif language == 'csharp':
            return self._csharp_general(request, entities, rules)
    
    def _extract_entities(self, request):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
        entities = {
            'variables': [],
            'functions': [],
            'classes': [],
            'operations': []
        }
        
        words = request.lower().split()
        
        # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)
        for word in words:
            if len(word) > 3 and word.isalpha():
                if word.endswith(('—Ü–∏—è', '–Ω–∏–µ', '—Å—Ç–≤–æ')):
                    entities['functions'].append(word)
                elif word.endswith(('—Ç–æ—Ä', '–µ—Ä', '–ª—å')):
                    entities['classes'].append(word)
                else:
                    entities['variables'].append(word)
        
        # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        operations = ['—Å–ª–æ–∂–∏—Ç—å', '—É–º–Ω–æ–∂', '–¥–µ–ª–∏—Ç—å', '—Å—Ä–∞–≤–Ω–∏—Ç—å', '–Ω–∞–π—Ç–∏', '—Å–æ–∑–¥–∞—Ç—å']
        for op in operations:
            if op in request.lower():
                entities['operations'].append(op)
        
        return entities
    
    # Python –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    def _python_calculator(self, request, rules):
        code = []
        code.append('""" –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Python """')
        code.append('')
        
        # –§—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        code.append('def —Å–ª–æ–∂–∏—Ç—å(a, b):')
        code.append('    return a + b')
        code.append('')
        
        code.append('def –≤—ã—á–µ—Å—Ç—å(a, b):')
        code.append('    return a - b')
        code.append('')
        
        code.append('def —É–º–Ω–æ–∂–∏—Ç—å(a, b):')
        code.append('    return a * b')
        code.append('')
        
        code.append('def —Ä–∞–∑–¥–µ–ª–∏—Ç—å(a, b):')
        code.append('    if b == 0:')
        code.append('        raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")')
        code.append('    return a / b')
        code.append('')
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        code.append('def main():')
        code.append('    print("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")')
        code.append('    try:')
        code.append('        a = float(input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: "))')
        code.append('        b = float(input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: "))')
        code.append('        –æ–ø–µ—Ä–∞—Ü–∏—è = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /): ")')
        code.append('')
        code.append('        if –æ–ø–µ—Ä–∞—Ü–∏—è == "+":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–ª–æ–∂–∏—Ç—å(a, b)')
        code.append('        elif –æ–ø–µ—Ä–∞—Ü–∏—è == "-":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –≤—ã—á–µ—Å—Ç—å(a, b)')
        code.append('        elif –æ–ø–µ—Ä–∞—Ü–∏—è == "*":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —É–º–Ω–æ–∂–∏—Ç—å(a, b)')
        code.append('        elif –æ–ø–µ—Ä–∞—Ü–∏—è == "/":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Ä–∞–∑–¥–µ–ª–∏—Ç—å(a, b)')
        code.append('        else:')
        code.append('            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")')
        code.append('            return')
        code.append('')
        code.append('        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {—Ä–µ–∑—É–ª—å—Ç–∞—Ç}")')
        code.append('    except ValueError as e:')
        code.append('        print(f"–û—à–∏–±–∫–∞: {e}")')
        code.append('')
        
        code.append(rules['main_guard'])
        code.append('    main()')
        
        return '\n'.join(code)
    
    def _python_class(self, request, rules):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        class_name = "MyClass"
        if '–∫–ª–∞—Å—Å' in request.lower():
            words = request.split()
            for i, word in enumerate(words):
                if word.lower() == '–∫–ª–∞—Å—Å' and i + 1 < len(words):
                    class_name = words[i + 1].capitalize()
                    break
        
        code = []
        code.append(f'class {class_name}:')
        code.append('    def __init__(self, name, value=0):')
        code.append('        self.name = name')
        code.append('        self.value = value')
        code.append('        self.created_at = __import__("datetime").datetime.now()')
        code.append('')
        
        code.append('    def display_info(self):')
        code.append('        print(f"–û–±—ä–µ–∫—Ç: {self.name}")')
        code.append('        print(f"–ó–Ω–∞—á–µ–Ω–∏–µ: {self.value}")')
        code.append('        print(f"–°–æ–∑–¥–∞–Ω: {self.created_at}")')
        code.append('')
        
        code.append('    def —É–≤–µ–ª–∏—á–∏—Ç—å(self, amount=1):')
        code.append('        self.value += amount')
        code.append('        return self.value')
        code.append('')
        
        code.append('    def —É–º–µ–Ω—å—à–∏—Ç—å(self, amount=1):')
        code.append('        self.value -= amount')
        code.append('        return self.value')
        code.append('')
        
        code.append('    def to_dict(self):')
        code.append('        return {')
        code.append('            "name": self.name,')
        code.append('            "value": self.value,')
        code.append('            "created_at": self.created_at.isoformat()')
        code.append('        }')
        code.append('')
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        code.append('# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:')
        code.append(f'obj = {class_name}("—Ç–µ—Å—Ç–æ–≤—ã–π_–æ–±—ä–µ–∫—Ç", 10)')
        code.append('obj.display_info()')
        code.append('obj.—É–≤–µ–ª–∏—á–∏—Ç—å(5)')
        code.append('print(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {obj.value}")')
        code.append('print(f"–ö–∞–∫ —Å–ª–æ–≤–∞—Ä—å: {obj.to_dict()}")')
        
        return '\n'.join(code)
    
    def _python_file_ops(self, request, rules):
        code = []
        code.append('""" –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –≤ Python """')
        code.append('import json')
        code.append('import csv')
        code.append('')
        
        code.append('def –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª(–∏–º—è_—Ñ–∞–π–ª–∞):')
        code.append('    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""')
        code.append('    try:')
        code.append('        with open(–∏–º—è_—Ñ–∞–π–ª–∞, "r", encoding="utf-8") as —Ñ–∞–π–ª:')
        code.append('            return —Ñ–∞–π–ª.read()')
        code.append('    except FileNotFoundError:')
        code.append('        print(f"–§–∞–π–ª {–∏–º—è_—Ñ–∞–π–ª–∞} –Ω–µ –Ω–∞–π–¥–µ–Ω")')
        code.append('        return None')
        code.append('')
        
        code.append('def –∑–∞–ø–∏—Å–∞—Ç—å_–≤_—Ñ–∞–π–ª(–∏–º—è_—Ñ–∞–π–ª–∞, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ):')
        code.append('    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª"""')
        code.append('    with open(–∏–º—è_—Ñ–∞–π–ª–∞, "w", encoding="utf-8") as —Ñ–∞–π–ª:')
        code.append('        —Ñ–∞–π–ª.write(—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)')
        code.append('    print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {–∏–º—è_—Ñ–∞–π–ª–∞}")')
        code.append('')
        
        code.append('def —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∫–∞–∫_json(–¥–∞–Ω–Ω—ã–µ, –∏–º—è_—Ñ–∞–π–ª–∞):')
        code.append('    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""')
        code.append('    with open(–∏–º—è_—Ñ–∞–π–ª–∞, "w", encoding="utf-8") as —Ñ–∞–π–ª:')
        code.append('        json.dump(–¥–∞–Ω–Ω—ã–µ, —Ñ–∞–π–ª, ensure_ascii=False, indent=2)')
        code.append('    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON: {–∏–º—è_—Ñ–∞–π–ª–∞}")')
        code.append('')
        
        code.append('def –ø—Ä–æ—á–∏—Ç–∞—Ç—å_json(–∏–º—è_—Ñ–∞–π–ª–∞):')
        code.append('    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""')
        code.append('    try:')
        code.append('        with open(–∏–º—è_—Ñ–∞–π–ª–∞, "r", encoding="utf-8") as —Ñ–∞–π–ª:')
        code.append('            return json.load(—Ñ–∞–π–ª)')
        code.append('    except (FileNotFoundError, json.JSONDecodeError) as e:')
        code.append('        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")')
        code.append('        return None')
        code.append('')
        
        # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        code.append('# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:')
        code.append('if __name__ == "__main__":')
        code.append('    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª')
        code.append('    –∑–∞–ø–∏—Å–∞—Ç—å_–≤_—Ñ–∞–π–ª("–ø—Ä–∏–º–µ—Ä.txt", "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")')
        code.append('    ')
        code.append('    # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞')
        code.append('    —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ = –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª("–ø—Ä–∏–º–µ—Ä.txt")')
        code.append('    if —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:')
        code.append('        print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ}")')
        code.append('    ')
        code.append('    # –†–∞–±–æ—Ç–∞ —Å JSON')
        code.append('    –¥–∞–Ω–Ω—ã–µ = {"–∏–º—è": "–¢–µ—Å—Ç", "–∑–Ω–∞—á–µ–Ω–∏–µ": 42, "—Å–ø–∏—Å–æ–∫": [1, 2, 3]}')
        code.append('    —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å_–∫–∞–∫_json(–¥–∞–Ω–Ω—ã–µ, "–¥–∞–Ω–Ω—ã–µ.json")')
        code.append('    ')
        code.append('    –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ = –ø—Ä–æ—á–∏—Ç–∞—Ç—å_json("–¥–∞–Ω–Ω—ã–µ.json")')
        code.append('    if –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ:')
        code.append('        print(f"JSON –¥–∞–Ω–Ω—ã–µ: {–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ}")')
        
        return '\n'.join(code)
    
    # C –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    def _c_calculator(self, request, rules):
        code = []
        code.append('#include <stdio.h>')
        code.append('#include <stdlib.h>')
        code.append('')
        
        code.append('// –§—É–Ω–∫—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞')
        code.append('float —Å–ª–æ–∂–∏—Ç—å(float a, float b) {')
        code.append('    return a + b;')
        code.append('}')
        code.append('')
        
        code.append('float –≤—ã—á–µ—Å—Ç—å(float a, float b) {')
        code.append('    return a - b;')
        code.append('}')
        code.append('')
        
        code.append('float —É–º–Ω–æ–∂–∏—Ç—å(float a, float b) {')
        code.append('    return a * b;')
        code.append('}')
        code.append('')
        
        code.append('float —Ä–∞–∑–¥–µ–ª–∏—Ç—å(float a, float b) {')
        code.append('    if (b == 0) {')
        code.append('        printf("–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!\\n");')
        code.append('        exit(1);')
        code.append('    }')
        code.append('    return a / b;')
        code.append('}')
        code.append('')
        
        code.append('int main() {')
        code.append('    float a, b, —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('    char –æ–ø–µ—Ä–∞—Ü–∏—è;')
        code.append('    ')
        code.append('    printf("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ C\\n");')
        code.append('    printf("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");')
        code.append('    scanf("%f", &a);')
        code.append('    printf("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");')
        code.append('    scanf("%f", &b);')
        code.append('    printf("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /): ");')
        code.append('    scanf(" %c", &–æ–ø–µ—Ä–∞—Ü–∏—è);')
        code.append('    ')
        code.append('    switch (–æ–ø–µ—Ä–∞—Ü–∏—è) {')
        code.append('        case "+":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–ª–æ–∂–∏—Ç—å(a, b);')
        code.append('            break;')
        code.append('        case "-":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –≤—ã—á–µ—Å—Ç—å(a, b);')
        code.append('            break;')
        code.append('        case "*":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —É–º–Ω–æ–∂–∏—Ç—å(a, b);')
        code.append('            break;')
        code.append('        case "/":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Ä–∞–∑–¥–µ–ª–∏—Ç—å(a, b);')
        code.append('            break;')
        code.append('        default:')
        code.append('            printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è\\n");')
        code.append('            return 1;')
        code.append('    }')
        code.append('    ')
        code.append('    printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %.2f\\n", —Ä–µ–∑—É–ª—å—Ç–∞—Ç);')
        code.append('    return 0;')
        code.append('}')
        
        return '\n'.join(code)
    
    def _c_file_ops(self, request, rules):
        code = []
        code.append('#include <stdio.h>')
        code.append('#include <stdlib.h>')
        code.append('')
        
        code.append('// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª')
        code.append('void –∑–∞–ø–∏—Å–∞—Ç—å_–≤_—Ñ–∞–π–ª(const char* –∏–º—è_—Ñ–∞–π–ª–∞, const char* —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ) {')
        code.append('    FILE* —Ñ–∞–π–ª = fopen(–∏–º—è_—Ñ–∞–π–ª–∞, "w");')
        code.append('    if (—Ñ–∞–π–ª == NULL) {')
        code.append('        printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏\\n");')
        code.append('        return;')
        code.append('    }')
        code.append('    fprintf(—Ñ–∞–π–ª, "%s", —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ);')
        code.append('    fclose(—Ñ–∞–π–ª);')
        code.append('    printf("–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ %s\\n", –∏–º—è_—Ñ–∞–π–ª–∞);')
        code.append('}')
        code.append('')
        
        code.append('// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞')
        code.append('void –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª(const char* –∏–º—è_—Ñ–∞–π–ª–∞) {')
        code.append('    FILE* —Ñ–∞–π–ª = fopen(–∏–º—è_—Ñ–∞–π–ª–∞, "r");')
        code.append('    if (—Ñ–∞–π–ª == NULL) {')
        code.append('        printf("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω\\n", –∏–º—è_—Ñ–∞–π–ª–∞);')
        code.append('        return;')
        code.append('    }')
        code.append('    ')
        code.append('    char —Å—Ç—Ä–æ–∫–∞[256];')
        code.append('    printf("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ %s:\\n", –∏–º—è_—Ñ–∞–π–ª–∞);')
        code.append('    while (fgets(—Å—Ç—Ä–æ–∫–∞, sizeof(—Å—Ç—Ä–æ–∫–∞), —Ñ–∞–π–ª)) {')
        code.append('        printf("%s", —Å—Ç—Ä–æ–∫–∞);')
        code.append('    }')
        code.append('    fclose(—Ñ–∞–π–ª);')
        code.append('}')
        code.append('')
        
        code.append('int main() {')
        code.append('    // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª')
        code.append('    –∑–∞–ø–∏—Å–∞—Ç—å_–≤_—Ñ–∞–π–ª("–ø—Ä–∏–º–µ—Ä.txt", "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä –∏–∑ C!\\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.\\n");')
        code.append('    ')
        code.append('    // –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞')
        code.append('    –ø—Ä–æ—á–∏—Ç–∞—Ç—å_—Ñ–∞–π–ª("–ø—Ä–∏–º–µ—Ä.txt");')
        code.append('    ')
        code.append('    return 0;')
        code.append('}')
        
        return '\n'.join(code)
    
    # C++ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    def _cpp_class(self, request, rules):
        class_name = "MyClass"
        if '–∫–ª–∞—Å—Å' in request.lower():
            words = request.split()
            for i, word in enumerate(words):
                if word.lower() == '–∫–ª–∞—Å—Å' and i + 1 < len(words):
                    class_name = words[i + 1]
                    break
        
        code = []
        code.append('#include <iostream>')
        code.append('#include <string>')
        code.append('#include <chrono>')
        code.append('#include <ctime>')
        code.append('')
        
        code.append(f'class {class_name} {{')
        code.append('private:')
        code.append('    std::string name;')
        code.append('    int value;')
        code.append('    std::time_t created_at;')
        code.append('')
        code.append('public:')
        code.append(f'    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ {class_name}')
        code.append('    ' + class_name + '(const std::string& name, int value = 0)')
        code.append('        : name(name), value(value) {')
        code.append('        created_at = std::time(nullptr);')
        code.append('    }')
        code.append('')
        code.append('    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
        code.append('    void displayInfo() const {')
        code.append('        std::cout << "–û–±—ä–µ–∫—Ç: " << name << std::endl;')
        code.append('        std::cout << "–ó–Ω–∞—á–µ–Ω–∏–µ: " << value << std::endl;')
        code.append('        std::cout << "–°–æ–∑–¥–∞–Ω: " << std::ctime(&created_at);')
        code.append('    }')
        code.append('')
        code.append('    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã')
        code.append('    std::string getName() const { return name; }')
        code.append('    int getValue() const { return value; }')
        code.append('    ')
        code.append('    void setValue(int newValue) { value = newValue; }')
        code.append('    ')
        code.append('    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è')
        code.append('    void —É–≤–µ–ª–∏—á–∏—Ç—å(int amount = 1) { value += amount; }')
        code.append('    void —É–º–µ–Ω—å—à–∏—Ç—å(int amount = 1) { value -= amount; }')
        code.append('};')
        code.append('')
        
        code.append('int main() {')
        code.append(f'    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ {class_name}')
        code.append(f'    {class_name} obj("—Ç–µ—Å—Ç–æ–≤—ã–π_–æ–±—ä–µ–∫—Ç", 10);')
        code.append('    ')
        code.append('    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤')
        code.append('    obj.displayInfo();')
        code.append('    obj.—É–≤–µ–ª–∏—á–∏—Ç—å(5);')
        code.append('    std::cout << "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " << obj.getValue() << std::endl;')
        code.append('    ')
        code.append('    return 0;')
        code.append('}')
        
        return '\n'.join(code)
    
    # Java –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    def _java_calculator(self, request, rules):
        code = []
        code.append('import java.util.Scanner;')
        code.append('')
        code.append('public class Calculator {')
        code.append('    ')
        code.append('    // –ú–µ—Ç–æ–¥—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞')
        code.append('    public static double —Å–ª–æ–∂–∏—Ç—å(double a, double b) {')
        code.append('        return a + b;')
        code.append('    }')
        code.append('    ')
        code.append('    public static double –≤—ã—á–µ—Å—Ç—å(double a, double b) {')
        code.append('        return a - b;')
        code.append('    }')
        code.append('    ')
        code.append('    public static double —É–º–Ω–æ–∂–∏—Ç—å(double a, double b) {')
        code.append('        return a * b;')
        code.append('    }')
        code.append('    ')
        code.append('    public static double —Ä–∞–∑–¥–µ–ª–∏—Ç—å(double a, double b) {')
        code.append('        if (b == 0) {')
        code.append('            throw new IllegalArgumentException("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!");')
        code.append('        }')
        code.append('        return a / b;')
        code.append('    }')
        code.append('    ')
        code.append('    public static void main(String[] args) {')
        code.append('        Scanner scanner = new Scanner(System.in);')
        code.append('        System.out.println("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Java");')
        code.append('        ')
        code.append('        try {')
        code.append('            System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ");')
        code.append('            double a = scanner.nextDouble();')
        code.append('            ')
        code.append('            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ");')
        code.append('            double b = scanner.nextDouble();')
        code.append('            ')
        code.append('            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /): ");')
        code.append('            char –æ–ø–µ—Ä–∞—Ü–∏—è = scanner.next().charAt(0);')
        code.append('            ')
        code.append('            double —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('            switch (–æ–ø–µ—Ä–∞—Ü–∏—è) {')
        code.append('                case "+":')
        code.append('                    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Å–ª–æ–∂–∏—Ç—å(a, b);')
        code.append('                    break;')
        code.append('                case "-":')
        code.append('                    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –≤—ã—á–µ—Å—Ç—å(a, b);')
        code.append('                    break;')
        code.append('                case "*":')
        code.append('                    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —É–º–Ω–æ–∂–∏—Ç—å(a, b);')
        code.append('                    break;')
        code.append('                case "/":')
        code.append('                    —Ä–µ–∑—É–ª—å—Ç–∞—Ç = —Ä–∞–∑–¥–µ–ª–∏—Ç—å(a, b);')
        code.append('                    break;')
        code.append('                default:')
        code.append('                    System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è");')
        code.append('                    return;')
        code.append('            }')
        code.append('            ')
        code.append('            System.out.printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %.2f%n", —Ä–µ–∑—É–ª—å—Ç–∞—Ç);')
        code.append('            ')
        code.append('        } catch (Exception e) {')
        code.append('            System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());')
        code.append('        } finally {')
        code.append('            scanner.close();')
        code.append('        }')
        code.append('    }')
        code.append('}')
        
        return '\n'.join(code)

    # JavaScript –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    def _javascript_calculator(self, request, rules):
        code = []
        code.append('// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ JavaScript')
        code.append('class Calculator {')
        code.append('    constructor() {')
        code.append('        this.history = [];')
        code.append('    }')
        code.append('')
        code.append('    —Å–ª–æ–∂–∏—Ç—å(a, b) {')
        code.append('        const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = a + b;')
        code.append('        this.history.push(`${a} + ${b} = ${—Ä–µ–∑—É–ª—å—Ç–∞—Ç}`);')
        code.append('        return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('    }')
        code.append('')
        code.append('    –≤—ã—á–µ—Å—Ç—å(a, b) {')
        code.append('        const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = a - b;')
        code.append('        this.history.push(`${a} - ${b} = ${—Ä–µ–∑—É–ª—å—Ç–∞—Ç}`);')
        code.append('        return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('    }')
        code.append('')
        code.append('    —É–º–Ω–æ–∂–∏—Ç—å(a, b) {')
        code.append('        const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = a * b;')
        code.append('        this.history.push(`${a} * ${b} = ${—Ä–µ–∑—É–ª—å—Ç–∞—Ç}`);')
        code.append('        return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('    }')
        code.append('')
        code.append('    —Ä–∞–∑–¥–µ–ª–∏—Ç—å(a, b) {')
        code.append('        if (b === 0) {')
        code.append('            throw new Error("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!");')
        code.append('        }')
        code.append('        const —Ä–µ–∑—É–ª—å—Ç–∞—Ç = a / b;')
        code.append('        this.history.push(`${a} / ${b} = ${—Ä–µ–∑—É–ª—å—Ç–∞—Ç}`);')
        code.append('        return —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('    }')
        code.append('')
        code.append('    –ø–æ–∫–∞–∑–∞—Ç—å–ò—Å—Ç–æ—Ä–∏—é() {')
        code.append('        console.log("üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:");')
        code.append('        this.history.forEach(–æ–ø–µ—Ä–∞—Ü–∏—è => console.log(–æ–ø–µ—Ä–∞—Ü–∏—è));')
        code.append('    }')
        code.append('}')
        code.append('')
        code.append('// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è')
        code.append('const –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä = new Calculator();')
        code.append('')
        code.append('try {')
        code.append('    console.log("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ JavaScript");')
        code.append('    ')
        code.append('    const a = parseFloat(prompt("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ:"));')
        code.append('    const b = parseFloat(prompt("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ:"));')
        code.append('    const –æ–ø–µ—Ä–∞—Ü–∏—è = prompt("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /):");')
        code.append('    ')
        code.append('    let —Ä–µ–∑—É–ª—å—Ç–∞—Ç;')
        code.append('    switch (–æ–ø–µ—Ä–∞—Ü–∏—è) {')
        code.append('        case "+":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Å–ª–æ–∂–∏—Ç—å(a, b);')
        code.append('            break;')
        code.append('        case "-":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.–≤—ã—á–µ—Å—Ç—å(a, b);')
        code.append('            break;')
        code.append('        case "*":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—É–º–Ω–æ–∂–∏—Ç—å(a, b);')
        code.append('            break;')
        code.append('        case "/":')
        code.append('            —Ä–µ–∑—É–ª—å—Ç–∞—Ç = –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.—Ä–∞–∑–¥–µ–ª–∏—Ç—å(a, b);')
        code.append('            break;')
        code.append('        default:')
        code.append('            console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è");')
        code.append('            break;')
        code.append('    }')
        code.append('    ')
        code.append('    if (—Ä–µ–∑—É–ª—å—Ç–∞—Ç !== undefined) {')
        code.append('        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${—Ä–µ–∑—É–ª—å—Ç–∞—Ç}`);')
        code.append('        –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.–ø–æ–∫–∞–∑–∞—Ç—å–ò—Å—Ç–æ—Ä–∏—é();')
        code.append('    }')
        code.append('    ')
        code.append('} catch (error) {')
        code.append('    console.log(`–û—à–∏–±–∫–∞: ${error.message}`);')
        code.append('}')
        
        return '\n'.join(code)

    # –û–±—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
    def _python_general(self, request, entities, rules):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π Python –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞"""
        code = []
        code.append('""" –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ """')
        code.append('')
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ
        if entities['variables']:
            for var in entities['variables'][:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                code.append(f'{var} = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {var}')
            code.append('')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        if entities['operations']:
            for op in entities['operations']:
                if '—Å–ª–æ–∂–∏—Ç—å' in op:
                    code.append('def —Å–ª–æ–∂–∏—Ç—å(a, b):')
                    code.append('    """–°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞"""')
                    code.append('    return a + b')
                    code.append('')
                elif '—É–º–Ω–æ–∂' in op:
                    code.append('def —É–º–Ω–æ–∂–∏—Ç—å(a, b):')
                    code.append('    """–£–º–Ω–æ–∂–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞"""')
                    code.append('    return a * b')
                    code.append('')
                elif '–Ω–∞–π—Ç–∏' in op:
                    code.append('def –Ω–∞–π—Ç–∏_—ç–ª–µ–º–µ–Ω—Ç(—Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç):')
                    code.append('    """–ù–∞—Ö–æ–¥–∏—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ"""')
                    code.append('    try:')
                    code.append('        return —Å–ø–∏—Å–æ–∫.index(—ç–ª–µ–º–µ–Ω—Ç)')
                    code.append('    except ValueError:')
                    code.append('        return -1')
                    code.append('')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        code.append('# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:')
        code.append('if __name__ == "__main__":')
        code.append('    print("–ó–∞–ø—É—Å–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")')
        code.append('    ')
        
        if any('—Å–ª–æ–∂–∏—Ç—å' in op for op in entities['operations']):
            code.append('    # –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–µ–Ω–∏—è')
            code.append('    —Ä–µ–∑—É–ª—å—Ç–∞—Ç_—Å–ª–æ–∂–µ–Ω–∏—è = —Å–ª–æ–∂–∏—Ç—å(10, 5)')
            code.append('    print(f"10 + 5 = {—Ä–µ–∑—É–ª—å—Ç–∞—Ç_—Å–ª–æ–∂–µ–Ω–∏—è}")')
            code.append('    ')
        
        if any('—É–º–Ω–æ–∂' in op for op in entities['operations']):
            code.append('    # –ü—Ä–∏–º–µ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è')
            code.append('    —Ä–µ–∑—É–ª—å—Ç–∞—Ç_—É–º–Ω–æ–∂–µ–Ω–∏—è = —É–º–Ω–æ–∂–∏—Ç—å(4, 7)')
            code.append('    print(f"4 * 7 = {—Ä–µ–∑—É–ª—å—Ç–∞—Ç_—É–º–Ω–æ–∂–µ–Ω–∏—è}")')
        
        return '\n'.join(code)

class EnhancedLearningAI:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º"""
    
    def __init__(self):
        self.knowledge_base = TextKnowledgeBase()
        self.classifier = SimpleClassifier()
        self.web_search = AdvancedWebSearch()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
        self._initialize_with_basic_knowledge()
    
    def _initialize_with_basic_knowledge(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏"""
        basic_knowledge = [
            # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
            ("programming", "—á—Ç–æ —Ç–∞–∫–æ–µ python", 
             "Python - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.", 
             "explanation", ["python", "—è–∑—ã–∫", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]),
            
            ("programming", "–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å –≤ python", 
             "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞ –≤ Python –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ class:\n\n```python\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n    \n    def greet(self):\n        print(f'–ü—Ä–∏–≤–µ—Ç, {self.name}!')\n```", 
             "code_request", ["python", "–∫–ª–∞—Å—Å", "–æ–æ–ø"]),
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            ("qa_pairs", "–ø—Ä–∏–≤–µ—Ç", 
             "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ! ü§ñ", 
             "greeting", ["–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"]),
            
            ("qa_pairs", "–ø–æ–º–æ—â—å", 
             "–Ø –º–æ–≥—É:\n‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n‚Ä¢ üíª –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n‚Ä¢ üìö –û–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n‚Ä¢ üéØ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ —á–µ–º —É–≥–æ–¥–Ω–æ! üí°", 
             "help", ["–ø–æ–º–æ—â—å", "—Ñ—É–Ω–∫—Ü–∏–∏"]),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
        if self.knowledge_base.get_statistics()["total_entries"] == 0:
            print("üìñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏...")
            for category, question, answer, intent, tags in basic_knowledge:
                self.knowledge_base.add_entry(category, question, answer, intent, tags)
    
    def find_best_response(self, user_message, intent, entities, use_web_search=True):
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ"""
        
        print(f"üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: '{user_message}'")
        
        # –®–∞–≥ 1: –°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        search_results = self.knowledge_base.search(user_message, min_confidence=0.5)
        
        if search_results and search_results[0].get('similarity_score', 0) > 0.7:
            best_match = search_results[0]
            self.knowledge_base.update_entry_usage(best_match["id"], success=True)
            confidence = best_match.get("confidence", 1.0) * best_match.get("success_rate", 1.0)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_match.get('similarity_score', 0):.2f})")
            return best_match["answer"], confidence, "knowledge_base"
        
        print(f"‚ùå –í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        
        # –®–∞–≥ 2: –í–°–ï–ì–î–ê –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        print(f"üåê –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
        web_answer, web_source = self._web_search_and_save(user_message, intent, entities)
        
        if web_answer and self._is_meaningful_web_answer(web_answer):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
            return web_answer, 0.8, web_source
        
        print(f"‚ùå –í –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        
        # –®–∞–≥ 3: –ï—Å–ª–∏ –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ –ø–æ–º–æ–≥, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        fallback_answer = self._generate_web_fallback_response(user_message, intent)
        return fallback_answer, 0.3, "generated"
    
    def _web_search_and_save(self, user_message, intent, entities):
        """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
        try:
            print(f"üåê –ó–∞–ø—É—Å–∫–∞—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è: '{user_message}'")
            search_results = self.web_search.search_internet(user_message, max_results=3)
        
            if search_results:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                answer_parts = ["**üîç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:**\n"]
            
                for i, result in enumerate(search_results, 1):
                    title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    snippet = result.get('snippet', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    source = result.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–Ω–∏–ø–ø–µ—Ç–∞
                    if len(snippet) > 300:
                        snippet = snippet[:300] + "..."
                
                    answer_parts.append(f"\n**{i}. {title}**")
                    answer_parts.append(f"{snippet}")
                    if result.get('url'):
                        answer_parts.append(f"*üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {source}*")
                    answer_parts.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            
                full_answer = "\n".join(answer_parts)
            
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                tags = self._extract_tags_from_query(user_message)
                self.knowledge_base.add_entry(
                    category="web_knowledge",
                    question=user_message,
                    answer=full_answer,
                    intent=intent,
                    tags=tags,
                    confidence=0.9
                )
            
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è: '{user_message[:50]}...'")
                return full_answer, "web_search"
            else:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è: '{user_message}'")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                info_answer = (
                    f"**üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{user_message}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.**\n\n"
                    f"*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                    f"‚Ä¢ –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π\n"
                    f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
                    f"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ."
                )
                return info_answer, "generated"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
            error_answer = (
                f"**‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ**\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
            )
            return error_answer, "generated"
    
    def _is_meaningful_web_answer(self, answer):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ–±-–æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º"""
        if not answer:
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        meaningless_indicators = [
            "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π",
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
            "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫",
            "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏"
        ]
        
        return not any(indicator in answer.lower() for indicator in meaningless_indicators)
    
    def _generate_web_fallback_response(self, user_message, intent):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∫–æ–≥–¥–∞ –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ –ø–æ–º–æ–≥"""
        responses = [
            f"ü§î **–í–æ–ø—Ä–æ—Å:** {user_message}\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.",
            f"üîç **–ü–æ–∏—Å–∫:** {user_message}\n\n–ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
            f"üí° **–ó–∞–ø—Ä–æ—Å:** {user_message}\n\n–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        ]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
        tags = self._extract_tags_from_query(user_message)
        self.knowledge_base.add_entry(
            category="unanswered",
            question=user_message,
            answer="–í–û–ü–†–û–° –¢–†–ï–ë–£–ï–¢ –û–¢–í–ï–¢–ê - –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            intent=intent,
            tags=tags,
            confidence=0.1
        )
        
        return random.choice(responses)
    
    def _extract_tags_from_query(self, query):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        words = re.findall(r'\b[a-z–∞-—è]{3,}\b', query.lower())
        stop_words = {'—ç—Ç–æ', '–∫–∞–∫', '—á—Ç–æ', '–¥–ª—è', '–∏–ª–∏', '–µ—Å–ª–∏', '—Ç–∞–∫', '–Ω–æ', '–Ω–∞', '–≤', '—Å'}
        return [word for word in words if word not in stop_words]
    
    def get_knowledge_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞–Ω–∏–π"""
        return self.knowledge_base.get_statistics()
    
    def export_knowledge(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return self.knowledge_base.export_to_file()

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.learning_ai = EnhancedLearningAI()
        self.zip_analyzer = ZipAnalyzer()
        self.code_generator = IntelligentCodeGenerator()
        self.learning_stats = {
            'conversations_processed': 0,
            'knowledge_base_entries': 0,
            'web_searches': 0,
            'successful_searches': 0,
            'zip_files_analyzed': 0,
            'code_generated': 0
        }
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.context = {
            'last_intent': None,
            'last_topic': None,
            'mentioned_entities': [],
            'conversation_flow': []
        }
        
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–º—ã—Å–ª–∞
        self.semantic_cores = {
            'programming': self._create_programming_semantic_core(),
            'data_processing': self._create_data_semantic_core(),
            'web_development': self._create_web_semantic_core(),
            'system_administration': self._create_system_semantic_core(),
            'learning': self._create_learning_semantic_core()
        }
    
    def generate_smart_response(self, message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–º—ã—Å–ª–∞"""
        print(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–º—ã—Å–ª —Å–æ–æ–±—â–µ–Ω–∏—è: '{message}'")
        
        # –ì–ª—É–±–æ–∫–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        semantic_analysis = self._deep_semantic_understanding(message)
        print(f"üéØ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {semantic_analysis}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–º—ã—Å–ª–∞
        response = self._determine_action_based_on_meaning(message, semantic_analysis)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._save_to_history(message, response, "semantic_understanding", 0.9)
        
        return response
    
    def _deep_semantic_understanding(self, message):
        """–ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–º—ã—Å–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        words = self._intelligent_tokenize(message)
        semantic_features = self._extract_semantic_features(words)
        intent_clusters = self._cluster_intent_by_meaning(semantic_features)
        
        analysis = {
            'semantic_clusters': intent_clusters,
            'primary_meaning': self._determine_primary_meaning(intent_clusters),
            'action_type': self._infer_action_type(semantic_features),
            'complexity_level': self._assess_complexity_level(words, semantic_features),
            'domain': self._identify_domain(semantic_features),
            'urgency': self._detect_urgency_by_context(words),
            'expected_output_type': self._predict_expected_output(semantic_features)
        }
        
        return analysis
    
    def _intelligent_tokenize(self, message):
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞, –Ω–æ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        words = re.findall(r'[a-zA-Z–∞-—è–ê-–Ø0-9_]+', message.lower())
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        combined_terms = []
        i = 0
        while i < len(words):
            current_word = words[i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã (2-3 —Å–ª–æ–≤–∞)
            if i + 1 < len(words):
                two_word_term = f"{current_word} {words[i+1]}"
                if self._is_meaningful_term(two_word_term):
                    combined_terms.append(two_word_term)
                    i += 2
                    continue
            
            if i + 2 < len(words):
                three_word_term = f"{current_word} {words[i+1]} {words[i+2]}"
                if self._is_meaningful_term(three_word_term):
                    combined_terms.append(three_word_term)
                    i += 3
                    continue
            
            combined_terms.append(current_word)
            i += 1
        
        return combined_terms
    
    def _is_meaningful_term(self, term):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Ä–º–∏–Ω –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º"""
        meaningful_patterns = [
            '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥', '–≤–µ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
            '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
            '—Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'
        ]
        
        return term in meaningful_patterns or any(pattern in term for pattern in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '—Å–∏—Å—Ç–µ–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å'])
    
    def _extract_semantic_features(self, words):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—ÖÁâπÂæÅ –∏–∑ —Å–ª–æ–≤"""
        features = {
            'has_creation_request': False,
            'has_explanation_request': False,
            'has_comparison_request': False,
            'has_technical_term': False,
            'has_programming_concept': False,
            'has_data_operation': False,
            'has_ui_mention': False,
            'has_storage_mention': False,
            'has_network_mention': False,
            'has_algorithm_mention': False,
            'word_patterns': []
        }
        
        for word in words:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º—ã—Å–ª —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä–∏
            if self._implies_creation(word):
                features['has_creation_request'] = True
                features['word_patterns'].append('creation')
            
            if self._implies_explanation(word):
                features['has_explanation_request'] = True
                features['word_patterns'].append('explanation')
            
            if self._implies_comparison(word):
                features['has_comparison_request'] = True
                features['word_patterns'].append('comparison')
            
            if self._sounds_technical(word):
                features['has_technical_term'] = True
                features['word_patterns'].append('technical')
            
            if self._sounds_programming(word):
                features['has_programming_concept'] = True
                features['word_patterns'].append('programming')
            
            if self._implies_data_operation(word):
                features['has_data_operation'] = True
                features['word_patterns'].append('data_operation')
            
            if self._implies_ui(word):
                features['has_ui_mention'] = True
                features['word_patterns'].append('ui')
            
            if self._implies_storage(word):
                features['has_storage_mention'] = True
                features['word_patterns'].append('storage')
            
            if self._implies_network(word):
                features['has_network_mention'] = True
                features['word_patterns'].append('network')
            
            if self._implies_algorithm(word):
                features['has_algorithm_mention'] = True
                features['word_patterns'].append('algorithm')
        
        return features
    
    def _implies_creation(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–≥–æ-–ª–∏–±–æ"""
        creation_patterns = ['—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '—Å–¥–µ–ª–∞–π', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π', '–ø–æ—Å—Ç—Ä–æ–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', 
                           '—Ä–µ–∞–ª–∏–∑—É–π', '—Å–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–π', '—Å–æ—Å—Ç–∞–≤—å', '–ø–æ–¥–≥–æ—Ç–æ–≤—å']
        return any(pattern in word for pattern in creation_patterns)
    
    def _implies_explanation(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"""
        explanation_patterns = ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–ø–æ—è—Å–Ω–∏', '—Ä–∞—Å—Ç–æ–ª–∫—É–π', '–ø–æ–∫–∞–∂–∏', 
                              '–ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π', '–∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–π', '—Ä–∞–∑—ä—è—Å–Ω–∏']
        return any(pattern in word for pattern in explanation_patterns)
    
    def _implies_comparison(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"""
        comparison_patterns = ['—Å—Ä–∞–≤–Ω–∏', '–æ—Ç–ª–∏—á–∏–µ', '—Ä–∞–∑–Ω–∏—Ü–∞', '–ª—É—á—à–µ', '—Ö—É–∂–µ', '–ø—Ä–æ—Ç–∏–≤', 
                             'versus', '–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è', '—Ä–∞–∑–ª–∏—á–∞–µ—Ç—Å—è']
        return any(pattern in word for pattern in comparison_patterns)
    
    def _sounds_technical(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–≤—É—á–∏—Ç –ª–∏ —Å–ª–æ–≤–æ –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω"""
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–ª–æ–≤–∞
        technical_indicators = [
            len(word) > 6,  # –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
            '-' in word or '_' in word,  # –î–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            word.endswith(('—Ü–∏—è', '–∏–∑–º', '—Ç–æ—Ä', '–µ—Ä', '–∏–∑–∞—Ç–æ—Ä')),  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
            any(char.isdigit() for char in word),  # –°–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã
            word.isupper() and len(word) > 2  # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
        ]
        return any(technical_indicators)
    
    def _sounds_programming(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–≤—É—á–∏—Ç –ª–∏ —Å–ª–æ–≤–æ –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω"""
        programming_indicators = [
            word.endswith(('–º–µ–Ω—Ç', '—Ç–æ—Ä', '—Ü–∏—è', '–∏–∑–º')),  # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
            'api' in word or 'sql' in word or 'html' in word,
            word.startswith(('–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '–º–æ–¥—É–ª—å', '–ø–∞–∫–µ—Ç')),
            any(pattern in word for pattern in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ñ—É–Ω–∫—Ü', '–∫–ª–∞—Å—Å'])
        ]
        return any(programming_indicators)
    
    def _implies_data_operation(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏"""
        data_patterns = ['–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–æ–±—Ä–∞–±–æ—Ç–∫–∞', '–∞–Ω–∞–ª–∏–∑', '—Ñ–∏–ª—å—Ç—Ä', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞',
                        '–ø–æ–∏—Å–∫', '–ø–æ–∏—Å–∫–æ–≤', '–±–∞–∑–∞', '—Ö—Ä–∞–Ω–∏–ª–∏—â–µ', '–∫–æ–ª–ª–µ–∫—Ü–∏—è', '–º–∞—Å—Å–∏–≤']
        return any(pattern in word for pattern in data_patterns)
    
    def _implies_ui(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        ui_patterns = ['–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–∫–Ω–æ–ø–∫–∞', '—Ñ–æ—Ä–º–∞', '–æ–∫–Ω–æ', '–ø–∞–Ω–µ–ª—å', '–º–µ–Ω—é', '–¥–∏–∞–ª–æ–≥',
                      '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π', '–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ']
        return any(pattern in word for pattern in ui_patterns)
    
    def _implies_storage(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        storage_patterns = ['—Ö—Ä–∞–Ω–∏—Ç—å', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', '–±–∞–∑–∞', '—Ñ–∞–π–ª', '–ø–∞–º—è—Ç—å', '–∫–µ—à', '–±—É—Ñ–µ—Ä',
                          '–∞—Ä—Ö–∏–≤', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', '–∫–æ–ª–ª–µ–∫—Ü–∏—è']
        return any(pattern in word for pattern in storage_patterns)
    
    def _implies_network(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ —Å–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        network_patterns = ['—Å–µ—Ç—å', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–∑–∞–ø—Ä–æ—Å', '–æ—Ç–≤–µ—Ç', '—Å–µ—Ä–≤–µ—Ä', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–æ—Ç–æ–∫–æ–ª',
                          'http', 'api', '–≤–µ–±', '–±—Ä–∞—É–∑–µ—Ä']
        return any(pattern in word for pattern in network_patterns)
    
    def _implies_algorithm(self, word):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ª–∏ —Å–ª–æ–≤–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"""
        algorithm_patterns = ['–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ø–æ–∏—Å–∫', '—Ä–µ–∫—É—Ä—Å–∏—è', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
                            '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—Å–ª–æ–∂–Ω–æ—Å—Ç—å', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–¥–µ—Ä–µ–≤–æ', '–≥—Ä–∞—Ñ']
        return any(pattern in word for pattern in algorithm_patterns)
    
    def _cluster_intent_by_meaning(self, semantic_features):
        """–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ —Å–º—ã—Å–ª—É"""
        clusters = []
        
        if semantic_features['has_creation_request']:
            if semantic_features['has_programming_concept']:
                clusters.append('code_creation')
            elif semantic_features['has_technical_term']:
                clusters.append('technical_creation')
            else:
                clusters.append('general_creation')
        
        if semantic_features['has_explanation_request']:
            if semantic_features['has_technical_term']:
                clusters.append('technical_explanation')
            else:
                clusters.append('general_explanation')
        
        if semantic_features['has_data_operation']:
            clusters.append('data_processing')
        
        if semantic_features['has_ui_mention']:
            clusters.append('ui_development')
        
        if semantic_features['has_storage_mention']:
            clusters.append('data_storage')
        
        if semantic_features['has_network_mention']:
            clusters.append('network_operations')
        
        if semantic_features['has_algorithm_mention']:
            clusters.append('algorithm_implementation')
        
        return clusters if clusters else ['general_query']
    
    def _determine_primary_meaning(self, clusters):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–º—ã—Å–ª–∞"""
        priority_order = [
            'code_creation', 'technical_creation', 'algorithm_implementation',
            'technical_explanation', 'data_processing', 'ui_development',
            'network_operations', 'data_storage', 'general_creation', 'general_explanation'
        ]
        
        for intent in priority_order:
            if intent in clusters:
                return intent
        
        return 'general_query'
    
    def _infer_action_type(self, semantic_features):
        """–í—ã–≤–æ–¥ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—ÖÁâπÂæÅ"""
        if semantic_features['has_creation_request']:
            return 'generate'
        elif semantic_features['has_explanation_request']:
            return 'explain'
        elif semantic_features['has_comparison_request']:
            return 'compare'
        elif semantic_features['has_technical_term']:
            return 'technical_help'
        else:
            return 'inform'
    
    def _assess_complexity_level(self, words, semantic_features):
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        complexity_indicators = sum([
            len([w for w in words if len(w) > 8]),  # –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            semantic_features['has_technical_term'],
            semantic_features['has_programming_concept'],
            semantic_features['has_algorithm_mention'],
            len(semantic_features['word_patterns']) > 3
        ])
        
        if complexity_indicators >= 4:
            return 'high'
        elif complexity_indicators >= 2:
            return 'medium'
        else:
            return 'low'
    
    def _identify_domain(self, semantic_features):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        domains = []
        
        if semantic_features['has_programming_concept']:
            domains.append('programming')
        if semantic_features['has_data_operation']:
            domains.append('data_science')
        if semantic_features['has_ui_mention']:
            domains.append('web_development')
        if semantic_features['has_network_mention']:
            domains.append('networking')
        if semantic_features['has_algorithm_mention']:
            domains.append('algorithms')
        
        return domains[0] if domains else 'general'
    
    def _detect_urgency_by_context(self, words):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        urgency_indicators = ['—Å—Ä–æ—á–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '—Å–∫–æ—Ä–µ–µ', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –±—ã—Å—Ç—Ä–µ–µ',
                            '–æ—á–µ–Ω—å –Ω—É–∂–Ω–æ', '–≥–æ—Ä—é', '–≥–æ—Ä—è—â–∏–π', '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π']
        
        return 'high' if any(indicator in ' '.join(words) for indicator in urgency_indicators) else 'normal'
    
    def _predict_expected_output(self, semantic_features):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞"""
        if semantic_features['has_creation_request'] and semantic_features['has_programming_concept']:
            return 'code'
        elif semantic_features['has_explanation_request']:
            return 'explanation'
        elif semantic_features['has_technical_term']:
            return 'technical_details'
        else:
            return 'information'
    
    def _determine_action_based_on_meaning(self, message, semantic_analysis):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–º—ã—Å–ª–∞"""
        primary_meaning = semantic_analysis['primary_meaning']
        action_type = semantic_analysis['action_type']
        expected_output = semantic_analysis['expected_output_type']
        
        print(f"üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª: {primary_meaning}")
        print(f"üéØ –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action_type}")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: {expected_output}")
        
        if expected_output == 'code' or primary_meaning in ['code_creation', 'technical_creation']:
            print("üíª –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
            return self._generate_intelligent_code(message, semantic_analysis)
        
        elif expected_output == 'explanation' or primary_meaning in ['technical_explanation']:
            print("üìö –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å")
            return self._provide_intelligent_explanation(message, semantic_analysis)
        
        elif action_type == 'compare':
            print("‚öñÔ∏è –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å")
            return self._provide_comparison(message, semantic_analysis)
        
        else:
            print("üîç –ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –∏—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
            return self._find_information_online(message, semantic_analysis)
    
    def _generate_intelligent_code(self, message, semantic_analysis):
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–º—ã—Å–ª–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        language = self._infer_programming_language_from_context(message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å —É—á–µ—Ç–æ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        try:
            generated_code = self.code_generator.generate_code(message, language)
            
            if generated_code and not generated_code.startswith("‚ùå"):
                response = f"""üíª **–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤–∞–º –Ω—É–∂–µ–Ω –∫–æ–¥! –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–∞ {language.upper()}:**

```{language}
{generated_code}
    ```"""
            
                self.learning_stats['code_generated'] += 1
                return response
            else:
                return "‚ùå –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–¥, –Ω–æ –Ω–µ —Å–º–æ–≥ –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ."
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {str(e)}"
    
    def _infer_programming_language_from_context(self, message):
        """–í—ã–≤–æ–¥ —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ hints –æ —è–∑—ã–∫–µ
        message_lower = message.lower()
    
        # –ò—â–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ hints
        if any(hint in message_lower for hint in ['–≤–µ–±', '–±—Ä–∞—É–∑–µ—Ä', 'html', 'css']):
            return 'javascript'
        elif any(hint in message_lower for hint in ['–¥–∞–Ω–Ω—ã–µ', '–∞–Ω–∞–ª–∏–∑', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']):
            return 'python'
        elif any(hint in message_lower for hint in ['–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤', '–∞–Ω–¥—Ä–æ–∏–¥']):
            return 'java'
        elif any(hint in message_lower for hint in ['–∏–≥—Ä–∞', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤']):
            return 'c++'
        elif any(hint in message_lower for hint in ['–º–∏–∫—Ä–æsoft', 'windows', '–æ—Ñ–∏—Å']):
            return 'c#'
        else:
            return 'python'  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _provide_intelligent_explanation(self, message, semantic_analysis):
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–º—ã—Å–ª–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        intents = self.learning_ai.classifier.predict(message)
        entities = self.extract_entities(message)
    
        response, confidence, source = self.learning_ai.find_best_response(
            message, intents[0] if intents else "explanation", entities, use_web_search=True
        )
        
        if response:
            enhanced_response = f"üìö **–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!**\n\n{response}"
            return enhanced_response
        else:
            return "ü§î –ü–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –Ω–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

    def _provide_comparison(self, message, semantic_analysis):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–º—ã—Å–ª–∞"""
        return f"‚öñÔ∏è **–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ!**\n\n–ü–æ–∫–∞ –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...\n\n*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å*"

    def _find_information_online(self, message, semantic_analysis):
        """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        intents = self.learning_ai.classifier.predict(message)
        entities = self.extract_entities(message)
    
        response, confidence, source = self.learning_ai.find_best_response(
            message, intents[0] if intents else "general", entities, use_web_search=True
        )
    
        if response:
            return f"üîç **–Ø –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!**\n\n{response}"
        else:
            return "ü§î –ü–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å, –Ω–æ –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å?"

    def _save_to_history(self, message, response, source, confidence):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.conversation_history.append({
            'message': message,
            'response': response,
            'source': source,
            'confidence': confidence,
            'timestamp': datetime.now(),
            'semantic_analysis': getattr(self, '_last_analysis', {})
        })
    
        if len(self.conversation_history) > 50:
            self.conversation_history = self.conversation_history[-20:]

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def extract_entities(self, message):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        entities = {
            'variables': [],
            'functions': [],
            'classes': [],
            'operations': []
        }
    
        words = message.lower().split()
        for word in words:
            if len(word) > 3 and word.isalpha():
                entities['variables'].append(word)
    
        return entities

    def analyze_uploaded_zip(self, file_path):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ ZIP-–∞—Ä—Ö–∏–≤–∞"""
        try:
            analysis = self.zip_analyzer.analyze_zip(file_path)
            if "error" in analysis:
                return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏–≤–∞: {analysis['error']}"
        
            response = f"üì¶ **–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ {analysis['filename']}:**\n"
            response += f"‚Ä¢ üìÅ –§–∞–π–ª–æ–≤: {analysis['file_count']}\n"
            response += f"‚Ä¢ üìÇ –ü–∞–ø–æ–∫: {analysis['folder_count']}\n"
            response += f"‚Ä¢ üìä –†–∞–∑–º–µ—Ä: {self._format_size(analysis['total_size'])}\n\n"
        
            if analysis['structure']:
                response += "**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**\n```\n"
                response += "\n".join(analysis['structure'][:15])
                if len(analysis['structure']) > 15:
                    response += "\n... (–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã)"
                response += "\n```"
        
            return response
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ZIP: {str(e)}"
    
    def _format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"

    def get_learning_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        stats = self.learning_stats.copy()
        stats['conversation_history_count'] = len(self.conversation_history)
        stats['knowledge_base_stats'] = self.learning_ai.get_knowledge_stats()
        return stats

    def get_conversation_history(self, limit=20):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        return self.conversation_history[-limit:]

    def clear_conversation_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        self.conversation_history = []
        return "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞"

    def export_knowledge_base(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return self.learning_ai.export_knowledge()

    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    def _create_programming_semantic_core(self):
        return {
            'creation_verbs': ['—Å–æ–∑–¥–∞–π', '–Ω–∞–ø–∏—à–∏', '—Ä–µ–∞–ª–∏–∑—É–π', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞–π', '–ø–æ—Å—Ç—Ä–æ–π'],
            'concept_nouns': ['—Ñ—É–Ω–∫—Ü–∏—è', '–∫–ª–∞—Å—Å', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–º–æ–¥—É–ª—å', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞'],
            'operation_verbs': ['–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å', '–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', '–Ω–∞–π—Ç–∏', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', '–∑–∞–≥—Ä—É–∑–∏—Ç—å']
        }

    def _create_data_semantic_core(self):
        return {
            'data_terms': ['–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–Ω–∞–±–æ—Ä', '–∫–æ–ª–ª–µ–∫—Ü–∏—è', '–º–∞—Å—Å–∏–≤'],
            'processing_verbs': ['–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', '–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å', '—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å', '–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å'],
            'storage_terms': ['—Ö—Ä–∞–Ω–∏—Ç—å', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å', '–±–∞–∑–∞', '—Ñ–∞–π–ª', '–∞—Ä—Ö–∏–≤']
        }

    def _create_web_semantic_core(self):
        return {
            'web_terms': ['–≤–µ–±', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–æ–Ω–ª–∞–π–Ω'],
            'ui_terms': ['–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–∫–Ω–æ–ø–∫–∞', '—Ñ–æ—Ä–º–∞', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–¥–∏–∑–∞–π–Ω'],
            'interaction_verbs': ['–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å', '–ø–µ—Ä–µ–¥–∞—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å']
        }

    def _create_system_semantic_core(self):
        return {
            'system_terms': ['—Å–∏—Å—Ç–µ–º–∞', '—Å–µ—Ä–≤–µ—Ä', '–∫–ª–∏–µ–Ω—Ç', '—Å–µ—Ç—å', '–ø—Ä–æ—Ç–æ–∫–æ–ª'],
            'management_verbs': ['—É–ø—Ä–∞–≤–ª—è—Ç—å', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å', '–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å'],
            'technical_terms': ['–ø–∞–º—è—Ç—å', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–¥–∏—Å–∫', '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è']
        }

    def _create_learning_semantic_core(self):
        return {
            'learning_verbs': ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–ø–æ–∫–∞–∂–∏', '–Ω–∞—É—á–∏', '–ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π'],
            'knowledge_terms': ['–∑–Ω–∞–Ω–∏–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Ñ–∞–∫—Ç', '–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '—Ç–µ–æ—Ä–∏—è'],
            'question_terms': ['–∫–∞–∫', '–ø–æ—á–µ–º—É', '—á—Ç–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ']
        }

class AIHandler(BaseHTTPRequestHandler):
    ai = SmartAI()
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.path == '/':
            self._serve_html()
        elif self.path == '/stats':
            self._serve_stats()
        elif self.path == '/history':
            self._serve_history()
        elif self.path == '/export':
            self._export_knowledge()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤ - –î–û–ë–ê–í–õ–ï–ù /analyze-with-file"""
        if self.path == '/chat':
            self._handle_chat()
        elif self.path == '/clear-history':
            self._clear_history()
        elif self.path == '/analyze-with-file':  # –ù–û–í–´–ô ENDPOINT –î–õ–Ø –§–ê–ô–õ–û–í
            self._handle_analyze_with_file()
        else:
            self.send_error(404, "Not Found")
    
    def _handle_analyze_with_file(self):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        try:
            content_type = self.headers.get('Content-Type', '')
            if not content_type.startswith('multipart/form-data'):
                self.send_error(400, "Invalid content type")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º boundary –∏–∑ Content-Type
            boundary_match = re.search(r'boundary=(.*)$', content_type)
            if not boundary_match:
                self.send_error(400, "No boundary found")
                return
            
            boundary = boundary_match.group(1).encode()
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º multipart –¥–∞–Ω–Ω—ã–µ
            parts = post_data.split(b'--' + boundary)
            message = ""
            uploaded_files = []
            
            for part in parts:
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if b'name="message"' in part:
                    try:
                        message_content = part.split(b'\r\n\r\n')[1].rsplit(b'\r\n', 1)[0]
                        message = message_content.decode('utf-8')
                    except:
                        message = ""
                
                # –ò—â–µ–º —Ñ–∞–π–ª—ã
                elif b'name="files"' in part and b'filename="' in part:
                    try:
                        filename_match = re.search(b'filename="([^"]+)"', part)
                        if filename_match:
                            filename = filename_match.group(1).decode('utf-8')
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                            file_parts = part.split(b'\r\n\r\n')
                            if len(file_parts) > 1:
                                file_content = file_parts[1].rsplit(b'\r\n', 1)[0]
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                                temp_dir = "temp_uploads"
                                os.makedirs(temp_dir, exist_ok=True)
                                file_path = os.path.join(temp_dir, f"upload_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{filename}")
                                
                                with open(file_path, 'wb') as f:
                                    f.write(file_content)
                                
                                uploaded_files.append({
                                    'filename': filename,
                                    'path': file_path,
                                    'size': len(file_content)
                                })
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                        continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = ""
            
            if uploaded_files:
                response_text += "üìé **–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n"
                for file_info in uploaded_files:
                    response_text += f"‚Ä¢ {file_info['filename']} ({self._format_size(file_info['size'])})\n"
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
                    if file_info['filename'].lower().endswith('.zip'):
                        zip_analysis = self.ai.analyze_uploaded_zip(file_info['path'])
                        response_text += f"\nüì¶ **–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞:**\n{zip_analysis}\n"
                    else:
                        file_analysis = self.ai.analyze_uploaded_file(file_info['path'], file_info['filename'])
                        response_text += f"\n{file_analysis}\n"
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(file_info['path'])
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_info['filename']}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_info['filename']}: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            if message:
                if response_text:
                    response_text = f"**–í–∞—à –∑–∞–ø—Ä–æ—Å:** {message}\n\n" + response_text
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –Ω–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                    chat_response = self.ai.generate_smart_response(message)
                    response_text = chat_response
            
            if not response_text:
                response_text = "üì≠ –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response = {
                "success": True,
                "response": response_text
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /analyze-with-file: {e}")
            self.send_error(500, f"Analysis error: {str(e)}")
    
    def _format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB']:
            if size_bytes < 1024.0:
                return f"{size_bytes:.1f} {unit}"
            size_bytes /= 1024.0
        return f"{size_bytes:.1f} TB"
    
    def _serve_html(self):
        """–û—Ç–¥–∞–µ—Ç HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò"""
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI Assistant</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    height: 100vh;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                
                .chat-container {
                    width: 100%; max-width: 800px; height: 90vh;
                    background: white; border-radius: 20px;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                    display: flex; flex-direction: column; overflow: hidden;
                }
                
                .chat-header {
                    background: linear-gradient(135deg, #2c3e50, #3498db);
                    color: white; padding: 20px; text-align: center;
                    position: relative;
                }
                
                .chat-header h1 { font-size: 1.5em; margin-bottom: 5px; }
                .chat-header p { opacity: 0.9; font-size: 0.9em; }
                
                .header-buttons {
                    position: absolute; right: 15px; top: 50%;
                    transform: translateY(-50%); display: flex; gap: 10px;
                }
                
                .header-btn {
                    background: rgba(255,255,255,0.2); color: white;
                    border: none; padding: 8px 12px; border-radius: 15px;
                    cursor: pointer; font-size: 0.8em; text-decoration: none;
                    transition: background 0.3s;
                }
                
                .header-btn:hover { background: rgba(255,255,255,0.3); }
                
                .chat-messages {
                    flex: 1; padding: 20px; overflow-y: auto;
                    background: #f8f9fa;
                }
                
                .message {
                    margin: 10px 0; padding: 12px 16px; border-radius: 18px;
                    max-width: 80%; line-height: 1.4;
                    animation: fadeIn 0.3s ease;
                }
                
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                
                .user-message {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white; margin-left: auto;
                    border-bottom-right-radius: 5px;
                }
                
                .ai-message {
                    background: white; color: #333;
                    border: 2px solid #e9ecef; border-bottom-left-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }
                
                .message-time {
                    font-size: 0.7em; opacity: 0.7;
                    margin-top: 5px; text-align: right;
                }
                
                .chat-input-container {
                    padding: 15px 20px; background: white;
                    border-top: 1px solid #e9ecef;
                    display: flex; gap: 10px; align-items: flex-end;
                }
                
                .input-wrapper {
                    flex: 1; display: flex; flex-direction: column; gap: 8px;
                }
                
                .chat-input {
                    width: 100%; padding: 12px 16px;
                    border: 2px solid #e9ecef; border-radius: 25px;
                    font-size: 14px; outline: none; transition: border-color 0.3s;
                    resize: none; min-height: 44px; max-height: 120px;
                    font-family: inherit;
                }
                
                .chat-input:focus { border-color: #3498db; }
                
                .attached-files {
                    display: flex; flex-wrap: wrap; gap: 8px; margin-top: 5px;
                }
                
                .file-tag {
                    background: #e3f2fd; border: 1px solid #bbdefb;
                    border-radius: 15px; padding: 4px 12px; font-size: 0.8em;
                    display: flex; align-items: center; gap: 6px;
                }
                
                .file-tag .remove-file {
                    background: none; border: none; color: #f44336;
                    cursor: pointer; font-size: 1.1em; padding: 0;
                    width: 16px; height: 16px;
                    display: flex; align-items: center; justify-content: center;
                }
                
                .file-actions {
                    display: flex; gap: 8px; align-items: center;
                }
                
                .attach-button {
                    background: none; border: none; font-size: 1.5em;
                    cursor: pointer; padding: 8px; border-radius: 50%;
                    transition: background 0.3s; color: #666;
                }
                
                .attach-button:hover { background: #f5f5f5; color: #333; }
                
                .send-button {
                    padding: 12px 24px;
                    background: linear-gradient(135deg, #e74c3c, #c0392b);
                    color: white; border: none; border-radius: 25px;
                    cursor: pointer; font-size: 14px; font-weight: 600;
                    transition: transform 0.2s; min-width: 80px;
                }
                
                .send-button:hover { transform: translateY(-1px); }
                .send-button:active { transform: translateY(0); }
                .send-button:disabled {
                    background: #bdc3c7; cursor: not-allowed; transform: none;
                }
                
                .file-input { display: none; }
                
                .typing-indicator {
                    display: none; padding: 12px 16px;
                    background: white; border: 2px solid #e9ecef;
                    border-radius: 18px; border-bottom-left-radius: 5px;
                    max-width: 80px; margin: 10px 0;
                }
                
                .typing-dots {
                    display: flex; gap: 4px;
                }
                
                .typing-dot {
                    width: 8px; height: 8px; background: #999;
                    border-radius: 50%; animation: typing 1.4s infinite;
                }
                
                .typing-dot:nth-child(2) { animation-delay: 0.2s; }
                .typing-dot:nth-child(3) { animation-delay: 0.4s; }
                
                @keyframes typing {
                    0%, 60%, 100% {
                        transform: translateY(0); opacity: 0.4;
                    }
                    30% {
                        transform: translateY(-5px); opacity: 1;
                    }
                }
                
                .search-status {
                    background: linear-gradient(135deg, #ffd700, #ff8c00);
                    color: white; padding: 10px 16px; border-radius: 18px;
                    margin: 10px 0; max-width: 200px;
                    border-bottom-left-radius: 5px;
                    animation: pulse 1.5s infinite; font-weight: bold;
                }
                
                @keyframes pulse {
                    0% { opacity: 0.7; }
                    50% { opacity: 1; }
                    100% { opacity: 0.7; }
                }
                
                .file-message {
                    background: linear-gradient(135deg, #00b894, #00a085);
                    color: white; padding: 15px; border-radius: 18px;
                    margin: 10px 0; max-width: 80%; margin-left: auto;
                    border-bottom-right-radius: 5px;
                }
                
                .file-info {
                    display: flex; align-items: center; gap: 10px;
                }
                
                .file-icon { font-size: 1.5em; }
                
                .file-details { flex: 1; }
                
                .file-name {
                    font-weight: bold; margin-bottom: 4px;
                }
                
                .file-size { font-size: 0.8em; opacity: 0.9; }
                
                .code-block {
                    background: #2c3e50; color: #ecf0f1; padding: 12px;
                    border-radius: 8px; margin: 8px 0;
                    font-family: 'Courier New', monospace; font-size: 0.9em;
                    overflow-x: auto; border-left: 4px solid #e74c3c;
                }
                
                .zip-analysis {
                    background: linear-gradient(135deg, #fd79a8, #e84393);
                    color: white; padding: 15px; border-radius: 18px;
                    margin: 10px 0; max-width: 90%;
                }
                
                .chat-messages::-webkit-scrollbar { width: 6px; }
                .chat-messages::-webkit-scrollbar-track {
                    background: #f1f1f1; border-radius: 3px;
                }
                .chat-messages::-webkit-scrollbar-thumb {
                    background: #c1c1c1; border-radius: 3px;
                }
                .chat-messages::-webkit-scrollbar-thumb:hover {
                    background: #a8a8a8;
                }
                
                @media (max-width: 768px) {
                    .chat-container { height: 100vh; border-radius: 0; }
                    .message { max-width: 90%; }
                    .chat-header { padding: 15px; }
                    .chat-header h1 { font-size: 1.3em; }
                    .header-buttons {
                        position: static; transform: none;
                        justify-content: center; margin-top: 10px;
                    }
                    .chat-input-container { padding: 10px 15px; }
                }
            </style>
        </head>
        <body>
            <div class="chat-container">
                <div class="chat-header">
                    <h1>üß† AI Assistant</h1>
                    <p>–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</p>
                    <div class="header-buttons">
                        <a href="/stats" class="header-btn">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                    </div>
                </div>
                
                <div class="chat-messages" id="chatMessages">
                    <div class="message ai-message">
                        <strong>–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ ü§ñ</strong><br><br>
                        –Ø –º–æ–≥—É:<br>
                        ‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ<br>
                        ‚Ä¢ üíª –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö<br>
                        ‚Ä¢ üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ZIP-–∞—Ä—Ö–∏–≤—ã<br>
                        ‚Ä¢ üìÑ –ß–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã<br><br>
                        <strong>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª!</strong>
                    </div>
                </div>
                
                <div class="typing-indicator" id="typingIndicator">
                    <div class="typing-dots">
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                        <div class="typing-dot"></div>
                    </div>
                </div>
                
                <div class="chat-input-container">
                    <div class="file-actions">
                        <input type="file" id="fileInput" class="file-input" multiple accept=".zip,.txt,.py,.js,.java,.html,.css,.json,.md">
                        <button class="attach-button" onclick="document.getElementById('fileInput').click()" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
                            üìé
                        </button>
                    </div>
                    
                    <div class="input-wrapper">
                        <textarea class="chat-input" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." autocomplete="off" rows="1"></textarea>
                        <div class="attached-files" id="attachedFiles"></div>
                    </div>
                    
                    <button class="send-button" onclick="sendMessage()" id="sendButton">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>

            <script>
                const chatMessages = document.getElementById('chatMessages');
                const messageInput = document.getElementById('messageInput');
                const fileInput = document.getElementById('fileInput');
                const attachedFiles = document.getElementById('attachedFiles');
                const sendButton = document.getElementById('sendButton');
                const typingIndicator = document.getElementById('typingIndicator');
                
                let attachedFilesList = [];
                let isWaitingForResponse = false;
                
                // –ê–≤—Ç–æ-–≤—ã—Å–æ—Ç–∞ textarea
                messageInput.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
                fileInput.addEventListener('change', function(e) {
                    const files = Array.from(e.target.files);
                    files.forEach(file => {
                        if (!attachedFilesList.some(f => f.name === file.name)) {
                            attachedFilesList.push(file);
                            updateAttachedFilesDisplay();
                        }
                    });
                    this.value = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
                });
                
                function updateAttachedFilesDisplay() {
                    attachedFiles.innerHTML = '';
                    attachedFilesList.forEach((file, index) => {
                        const fileTag = document.createElement('div');
                        fileTag.className = 'file-tag';
                        fileTag.innerHTML = `
                            üìÑ ${file.name}
                            <button class="remove-file" onclick="removeFile(${index})">√ó</button>
                        `;
                        attachedFiles.appendChild(fileTag);
                    });
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    sendButton.disabled = attachedFilesList.length === 0 && !messageInput.value.trim();
                }
                
                function removeFile(index) {
                    attachedFilesList.splice(index, 1);
                    updateAttachedFilesDisplay();
                }
                
                function addMessage(text, isUser, messageType = 'final', files = []) {
                    const messageDiv = document.createElement('div');
                    
                    if (messageType === 'search') {
                        messageDiv.className = 'search-status';
                        messageDiv.innerHTML = `üîç ${text}`;
                    } else if (messageType === 'typing') {
                        messageDiv.className = 'typing-message';
                        messageDiv.innerHTML = text;
                    } else if (messageType === 'file') {
                        messageDiv.className = 'file-message';
                        files.forEach(file => {
                            const fileInfo = document.createElement('div');
                            fileInfo.className = 'file-info';
                            fileInfo.innerHTML = `
                                <div class="file-icon">üìé</div>
                                <div class="file-details">
                                    <div class="file-name">${file.name}</div>
                                    <div class="file-size">${formatFileSize(file.size)}</div>
                                </div>
                            `;
                            messageDiv.appendChild(fileInfo);
                        });
                        if (text) {
                            const textDiv = document.createElement('div');
                            textDiv.style.marginTop = '10px';
                            textDiv.textContent = text;
                            messageDiv.appendChild(textDiv);
                        }
                    } else {
                        messageDiv.className = isUser ? 'message user-message' : 'message ai-message';
                        
                        // Format text with code blocks
                        let formattedText = text;
                        if (text.includes('```')) {
                            formattedText = text.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
                        }
                        formattedText = formattedText.replace(/\\n/g, '<br>');
                        
                        const time = new Date().toLocaleTimeString('ru-RU', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                        });
                        
                        messageDiv.innerHTML = `${formattedText}<div class="message-time">${time}</div>`;
                    }
                    
                    chatMessages.appendChild(messageDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                    return messageDiv;
                }
                
                function showTyping() {
                    typingIndicator.style.display = 'block';
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
                
                function hideTyping() {
                    typingIndicator.style.display = 'none';
                }
                
                function typeText(element, text, speed = 10, callback = null) {
                    let i = 0;
                    element.innerHTML = '';
                    
                    function typeChar() {
                        if (i < text.length) {
                            if (text[i] === '\\n') {
                                element.innerHTML += '<br>';
                            } else {
                                element.innerHTML += text[i];
                            }
                            i++;
                            
                            chatMessages.scrollTop = chatMessages.scrollHeight;
                            
                            const variation = Math.random() * 20 - 10;
                            setTimeout(typeChar, speed + variation);
                        } else if (callback) {
                            callback();
                        }
                    }
                    
                    typeChar();
                }
                
                async function sendMessage() {
                    if (isWaitingForResponse) return;
                    
                    const message = messageInput.value.trim();
                    const files = attachedFilesList;
                    
                    if (!message && files.length === 0) return;
                    
                    // Clear input and files
                    messageInput.value = '';
                    attachedFilesList = [];
                    updateAttachedFilesDisplay();
                    messageInput.style.height = 'auto';
                    
                    isWaitingForResponse = true;
                    sendButton.disabled = true;
                    
                    // Add user message with files
                    if (files.length > 0) {
                        addMessage(message, true, 'file', files);
                    } else if (message) {
                        addMessage(message, true);
                    }
                    
                    // Show searching status
                    const searchMessage = addMessage('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...', false, 'search');
                    
                    try {
                        let response;
                        let endpoint;
                        let options;
                        
                        if (files.length > 0) {
                            // –û–¢–ü–†–ê–í–ö–ê –° –§–ê–ô–õ–ê–ú–ò –ù–ê /analyze-with-file
                            const formData = new FormData();
                            formData.append('message', message);
                            files.forEach(file => {
                                formData.append('files', file);
                            });
                            
                            endpoint = '/analyze-with-file';
                            options = {
                                method: 'POST',
                                body: formData
                            };
                        } else {
                            // –û–ë–´–ß–ù–´–ô –ó–ê–ü–†–û–° –ù–ê /chat
                            endpoint = '/chat';
                            options = {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ message: message })
                            };
                        }
                        
                        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${endpoint}`);
                        response = await fetch(endpoint, options);
                        
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        
                        const data = await response.json();
                        
                        // Remove search message
                        searchMessage.remove();
                        
                        // Add AI response with typing effect
                        const aiMessage = addMessage('', false, 'typing');
                        showTyping();
                        
                        // Type out the response
                        typeText(aiMessage, data.response, 5, () => {
                            aiMessage.className = data.response.includes('üì¶') ? 'zip-analysis' : 'message ai-message';
                            const time = new Date().toLocaleTimeString('ru-RU', { 
                                hour: '2-digit', 
                                minute: '2-digit' 
                            });
                            aiMessage.innerHTML = aiMessage.innerHTML + `<div class="message-time">${time}</div>`;
                            hideTyping();
                            isWaitingForResponse = false;
                            sendButton.disabled = false;
                        });
                        
                    } catch (error) {
                        searchMessage.remove();
                        hideTyping();
                        addMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', false);
                        console.error('Error:', error);
                        isWaitingForResponse = false;
                        sendButton.disabled = false;
                    }
                }
                
                // Send message on Enter key (Ctrl+Enter for new line)
                messageInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey && !isWaitingForResponse) {
                        e.preventDefault();
                        sendMessage();
                    }
                });
                
                // Enable/disable send button based on input
                messageInput.addEventListener('input', function() {
                    sendButton.disabled = attachedFilesList.length === 0 && !this.value.trim();
                });
                
                function formatFileSize(bytes) {
                    if (bytes === 0) return '0 Bytes';
                    const k = 1024;
                    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
                }
                
                // Focus input on load
                messageInput.focus();
                
                // Auto-scroll to bottom on load
                chatMessages.scrollTop = chatMessages.scrollHeight;
            </script>
        </body>
        </html>
        '''
        self.wfile.write(html.encode('utf-8'))
    
    def _serve_stats(self):
        """–û—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è"""
        stats = self.ai.get_learning_stats()
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        self.wfile.write(json.dumps(stats).encode('utf-8'))
    
    def _serve_history(self):
        """–û—Ç–¥–∞—á–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        history = self.ai.get_conversation_history(limit=20)
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        self.wfile.write(json.dumps(history).encode('utf-8'))
    
    def _export_knowledge(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        export_file = self.ai.export_knowledge_base()
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        response = {"status": "success", "export_file": export_file}
        self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def _clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        result = self.ai.clear_conversation_history()
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        response = {"status": "success", "message": result}
        self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def _handle_chat(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —á–∞—Ç-–∑–∞–ø—Ä–æ—Å—ã"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            response = self.ai.generate_smart_response(message)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}).encode('utf-8'))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞: {e}")
            self.send_error(500, f"Error: {str(e)}")
    
    def log_message(self, format, *args):
        """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"üåê AI Assistant: {format % args}")
    
    def _handle_file_upload(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤"""
        try:
            content_type = self.headers.get('Content-Type', '')
            if not content_type.startswith('multipart/form-data'):
                self.send_error(400, "Invalid content type")
                return
            
            boundary_match = re.search(r'boundary=(.*)$', content_type)
            if not boundary_match:
                self.send_error(400, "No boundary found")
                return
            
            boundary = boundary_match.group(1).encode()
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            parts = post_data.split(b'--' + boundary)
            uploaded_files = []
            
            for part in parts:
                if b'name="files"' in part and b'filename="' in part:
                    filename_match = re.search(b'filename="([^"]+)"', part)
                    if filename_match:
                        filename = filename_match.group(1).decode('utf-8')
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        file_content = part.split(b'\r\n\r\n')[1].rsplit(b'\r\n', 1)[0]
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        temp_dir = "temp_uploads"
                        os.makedirs(temp_dir, exist_ok=True)
                        file_path = os.path.join(temp_dir, f"upload_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{filename}")
                        
                        with open(file_path, 'wb') as f:
                            f.write(file_content)
                        
                        uploaded_files.append({
                            'filename': filename,
                            'path': file_path,
                            'size': len(file_content)
                        })
            
            if uploaded_files:
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                
                response = {
                    "success": True,
                    "files": uploaded_files,
                    "message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–∞–π–ª(–æ–≤)"
                }
                self.wfile.write(json.dumps(response).encode('utf-8'))
            else:
                self.send_error(400, "No files uploaded")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            self.send_error(500, f"Upload error: {str(e)}")
    
    def _handle_analysis_with_file(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
        try:
            content_type = self.headers.get('Content-Type', '')
            if not content_type.startswith('multipart/form-data'):
                self.send_error(400, "Invalid content type")
                return
            
            boundary_match = re.search(r'boundary=(.*)$', content_type)
            if not boundary_match:
                self.send_error(400, "No boundary found")
                return
            
            boundary = boundary_match.group(1).encode()
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            parts = post_data.split(b'--' + boundary)
            message = ""
            uploaded_files = []
            
            for part in parts:
                if b'name="message"' in part:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_content = part.split(b'\r\n\r\n')[1].rsplit(b'\r\n', 1)[0]
                    message = message_content.decode('utf-8')
                
                elif b'name="files"' in part and b'filename="' in part:
                    filename_match = re.search(b'filename="([^"]+)"', part)
                    if filename_match:
                        filename = filename_match.group(1).decode('utf-8')
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                        file_content = part.split(b'\r\n\r\n')[1].rsplit(b'\r\n', 1)[0]
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                        temp_dir = "temp_uploads"
                        os.makedirs(temp_dir, exist_ok=True)
                        file_path = os.path.join(temp_dir, f"chat_upload_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{filename}")
                        
                        with open(file_path, 'wb') as f:
                            f.write(file_content)
                        
                        uploaded_files.append({
                            'filename': filename,
                            'path': file_path,
                            'size': len(file_content)
                        })
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            response_text = ""
            if uploaded_files:
                for file_info in uploaded_files:
                    if file_info['filename'].lower().endswith('.zip'):
                        # –ê–Ω–∞–ª–∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞
                        analysis_result = self.ai.analyze_uploaded_zip(file_info['path'])
                        response_text += f"\n\nüì¶ **–ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏–≤–∞ {file_info['filename']}:**\n{analysis_result}"
                    else:
                        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                        try:
                            with open(file_info['path'], 'r', encoding='utf-8') as f:
                                content = f.read(5000)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤
                                response_text += f"\n\nüìÑ **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {file_info['filename']}:**\n```\n{content}\n```"
                        except:
                            response_text += f"\n\nüìÑ **–§–∞–π–ª {file_info['filename']}:**\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª (–≤–æ–∑–º–æ–∂–Ω–æ, –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª)"
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(file_info['path'])
                    except:
                        pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            if message:
                if response_text:
                    response_text = f"**–í–∞—à –∑–∞–ø—Ä–æ—Å:** {message}" + response_text
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                    chat_response = self.ai.generate_smart_response(message)
                    response_text = chat_response
            
            if not response_text:
                response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response = {
                "success": True,
                "response": response_text
            }
            self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å —Ñ–∞–π–ª–æ–º: {e}")
            self.send_error(500, f"Analysis error: {str(e)}")

def main():
    PORT = int(os.environ.get('PORT', 8000))
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ AI Assistant —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë           AI Assistant v3.0                 ‚ïë")
    print("‚ïë        –¢–µ–∫—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π + –í–µ–±-–ø–æ–∏—Å–∫    ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"üìç –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print("\nüéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ üìö –¢–µ–∫—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (knowledge_base.json)")
    print("‚Ä¢ üîç –í–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo")
    print("‚Ä¢ üíª –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –Ω–∞ Python")
    print("‚Ä¢ üß† –ê–≤—Ç–æ-–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö")
    print("‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–Ω–∞–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
    
    try:
        server = HTTPServer(('0.0.0.0', PORT), AIHandler)
        print(f"‚úÖ AI Assistant –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        print("üí´ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë AI Assistant –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()
