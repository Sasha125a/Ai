from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import re
import random
from datetime import datetime

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {
            'interests': set(),
            'skill_level': 'beginner',
            'preferred_languages': set()
        }
        
    def analyze_intent(self, message):
        message_lower = message.lower()
        
        intents = {
            'greeting': any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π']),
            'farewell': any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø—Ä–æ—â–∞–π']),
            'help': any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']),
            'explanation': any(word in message_lower for word in ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']),
            'code_request': any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø–∏—à–∏', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ–∫–∞–∂–∏ –∫–æ–¥']),
            'comparison': any(word in message_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '—á—Ç–æ –ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∏–µ']),
            'problem': any(word in message_lower for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å']),
            'opinion': any(word in message_lower for word in ['–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å', '—Å—á–∏—Ç–∞–µ—à—å', '—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è']),
            'learning_path': any(word in message_lower for word in ['—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–∫–∞–∫ —É—á–∏—Ç—å', '–ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∏–∑—É—á–µ–Ω–∏–µ']),
            'career': any(word in message_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'])
        }
        
        return [intent for intent, detected in intents.items() if detected]
    
    def extract_entities(self, message):
        entities = {
            'languages': [],
            'technologies': [],
            'concepts': [],
            'level_indicators': []
        }
        
        languages = {
            'python': ['python', '–ø–∏—Ç–æ–Ω', '–ø–∞–π—Ç–æ–Ω'],
            'javascript': ['javascript', 'js', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç'],
            'java': ['java', '–¥–∂–∞–≤–∞'],
            'html': ['html', '—Ö—Ç–º–ª'],
            'css': ['css', '—Ü—Å—Å'],
            'sql': ['sql', '–µ—Å –∫—å—é —ç–ª'],
            'typescript': ['typescript', '—Ç—Å–∞–π–ø—Å–∫—Ä–∏–ø—Ç']
        }
        
        for lang, keywords in languages.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['languages'].append(lang)
        
        technologies = {
            'react': ['react', '—Ä–µ–∞–∫—Ç'],
            'vue': ['vue', '–≤—å—é'],
            'django': ['django', '–¥–∂–∞–Ω–≥–æ'],
            'flask': ['flask', '—Ñ–ª–∞—Å–∫'],
            'node': ['node', '–Ω–æ–¥'],
            'docker': ['docker', '–¥–æ–∫–µ—Ä'],
            'git': ['git', '–≥–∏—Ç']
        }
        
        for tech, keywords in technologies.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['technologies'].append(tech)
        
        concepts = {
            '–æ–æ–ø': ['–æ–æ–ø', '–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', 'object-oriented'],
            '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', 'algorithm'],
            '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö': ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'database'],
            '–≤–µ–±': ['–≤–µ–±', 'web', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä'],
            '–º–æ–±–∏–ª—å–Ω–∞—è': ['–º–æ–±–∏–ª—å–Ω—ã–π', 'mobile', 'android', 'ios'],
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': ['–∏–∏', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        }
        
        for concept, keywords in concepts.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['concepts'].append(concept)
        
        return entities
    
    def update_user_profile(self, message, entities):
        if entities['languages']:
            self.user_profile['preferred_languages'].update(entities['languages'])
        
        level_indicators = {
            'beginner': ['–Ω–∞—á–∏–Ω–∞—é', '–Ω–æ–≤–∏—á–æ–∫', '—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª', '—Å –Ω—É–ª—è', '–Ω–µ –ø–æ–Ω–∏–º–∞—é'],
            'advanced': ['–æ–ø—ã—Ç–Ω—ã–π', 'senior', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—ç–∫—Å–ø–µ—Ä—Ç', '–≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞—é']
        }
        
        message_lower = message.lower()
        for level, indicators in level_indicators.items():
            if any(indicator in message_lower for indicator in indicators):
                self.user_profile['skill_level'] = level
    
    def generate_smart_response(self, message):
        intents = self.analyze_intent(message)
        entities = self.extract_entities(message)
        self.update_user_profile(message, entities)
        
        self.conversation_history.append({
            'message': message,
            'intents': intents,
            'entities': entities,
            'timestamp': datetime.now()
        })
        
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        return self._craft_response(message, intents, entities)
    from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import re
import random
import os
import base64
from datetime import datetime
import mimetypes

class EmotionalAI:
    """11. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ò–ò"""
    
    def __init__(self):
        self.user_mood = 'neutral'
        self.conversation_tone = 'professional'
        self.enthusiasm_level = 1.0
        
    def analyze_mood(self, message):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        positive_words = ['—Å–ø–∞—Å–∏–±–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', '—Ä–∞–¥']
        negative_words = ['–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–∑–ª–æ–π', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—É—Å—Ç–∞–ª', '—Å–ª–æ–∂–Ω–æ']
        frustrated_words = ['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '–ø–æ–º–æ–≥–∏', '—Å—Ä–æ—á–Ω–æ', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–∑–∞—Å—Ç—Ä—è–ª']
        excited_words = ['–≤–∞—É', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ª—é–±–æ–ø—ã—Ç–Ω–æ', '—Ö–æ—á—É —É–∑–Ω–∞—Ç—å', '—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ']
        
        mood_scores = {
            'positive': sum(1 for word in positive_words if word in message_lower),
            'negative': sum(1 for word in negative_words if word in message_lower),
            'frustrated': sum(1 for word in frustrated_words if word in message_lower),
            'excited': sum(1 for word in excited_words if word in message_lower)
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        max_score = max(mood_scores.values())
        if max_score > 0:
            for mood, score in mood_scores.items():
                if score == max_score:
                    self.user_mood = mood
                    break
        else:
            self.user_mood = 'neutral'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞
        self._update_enthusiasm()
        
    def _update_enthusiasm(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞ –ò–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        enthusiasm_map = {
            'positive': 1.3,
            'excited': 1.5,
            'neutral': 1.0,
            'frustrated': 0.8,
            'negative': 0.7
        }
        self.enthusiasm_level = enthusiasm_map.get(self.user_mood, 1.0)
    
    def get_emotional_response(self, base_response):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É"""
        emotional_prefixes = {
            'positive': ['–û—Ç–ª–∏—á–Ω–æ! ', '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! ', '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! '],
            'excited': ['–í–∞—É! ', '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ', '–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ! ', '–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ! '],
            'neutral': ['', '–ò—Ç–∞–∫, ', '–•–æ—Ä–æ—à–æ, ', '–î–∞–≤–∞–π—Ç–µ '],
            'frustrated': ['–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ. ', '–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! ', '–°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä—ë–º—Å—è. ', '–í—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º! '],
            'negative': ['–ü–æ–Ω–∏–º–∞—é. ', '–í—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è. ', '–î–∞–≤–∞–π—Ç–µ —Ä–µ—à–∏–º —ç—Ç–æ. ', '–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å. ']
        }
        
        emotional_suffixes = {
            'positive': [' üéâ', ' üòä', ' üëç', ' ‚ú®'],
            'excited': [' üöÄ', ' üî•', ' üí´', ' üåü'],
            'neutral': ['', '.', '!', ' üí°'],
            'frustrated': [' ü§ó', ' üí™', ' üîß', ' üõ†Ô∏è'],
            'negative': [' ü§ù', ' üìö', ' üéØ', ' üí≠']
        }
        
        prefix = random.choice(emotional_prefixes.get(self.user_mood, ['']))
        suffix = random.choice(emotional_suffixes.get(self.user_mood, ['']))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω—Ç—É–∑–∏–∞–∑–º —á–µ—Ä–µ–∑ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏
        if self.enthusiasm_level > 1.2 and '!' not in prefix:
            base_response = base_response.replace('.', '!', 1)
        
        return f"{prefix}{base_response}{suffix}"

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {
            'interests': set(),
            'skill_level': 'beginner',
            'preferred_languages': set()
        }
        self.emotional_ai = EmotionalAI()
        
        # 11. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        self.programming_languages = {
            'python': {
                'name': 'Python',
                'paradigms': ['object-oriented', 'functional', 'imperative'],
                'typing': 'dynamic',
                'use_cases': ['web', 'data science', 'ai', 'automation'],
                'extensions': ['.py', '.pyw']
            },
            'javascript': {
                'name': 'JavaScript', 
                'paradigms': ['object-oriented', 'functional', 'event-driven'],
                'typing': 'dynamic',
                'use_cases': ['web frontend', 'web backend', 'mobile'],
                'extensions': ['.js', '.jsx', '.ts', '.tsx']
            },
            'java': {
                'name': 'Java',
                'paradigms': ['object-oriented', 'imperative'],
                'typing': 'static',
                'use_cases': ['enterprise', 'android', 'web backend'],
                'extensions': ['.java', '.jar']
            },
            'cpp': {
                'name': 'C++',
                'paradigms': ['object-oriented', 'procedural', 'generic'],
                'typing': 'static', 
                'use_cases': ['system', 'game', 'high-performance'],
                'extensions': ['.cpp', '.h', '.hpp']
            },
            'csharp': {
                'name': 'C#',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['windows', 'game', 'web', 'enterprise'],
                'extensions': ['.cs']
            },
            'go': {
                'name': 'Go',
                'paradigms': ['procedural', 'concurrent'],
                'typing': 'static',
                'use_cases': ['backend', 'system', 'cloud'],
                'extensions': ['.go']
            },
            'rust': {
                'name': 'Rust',
                'paradigms': ['functional', 'object-oriented'],
                'typing': 'static',
                'use_cases': ['system', 'web assembly', 'safety-critical'],
                'extensions': ['.rs']
            },
            'kotlin': {
                'name': 'Kotlin',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['android', 'backend', 'web'],
                'extensions': ['.kt']
            },
            'swift': {
                'name': 'Swift',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['ios', 'macos', 'backend'],
                'extensions': ['.swift']
            },
            'php': {
                'name': 'PHP',
                'paradigms': ['object-oriented', 'procedural'],
                'typing': 'dynamic',
                'use_cases': ['web backend'],
                'extensions': ['.php']
            },
            'ruby': {
                'name': 'Ruby',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'dynamic',
                'use_cases': ['web', 'scripting'],
                'extensions': ['.rb']
            },
            'typescript': {
                'name': 'TypeScript',
                'paradigms': ['object-oriented', 'functional'],
                'typing': 'static',
                'use_cases': ['web frontend', 'web backend'],
                'extensions': ['.ts', '.tsx']
            }
        }
        
    def analyze_intent(self, message):
        message_lower = message.lower()
        
        intents = {
            'greeting': any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π']),
            'farewell': any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø—Ä–æ—â–∞–π']),
            'help': any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']),
            'explanation': any(word in message_lower for word in ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']),
            'code_request': any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø–∏—à–∏', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ–∫–∞–∂–∏ –∫–æ–¥']),
            'comparison': any(word in message_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '—á—Ç–æ –ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∏–µ']),
            'problem': any(word in message_lower for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å']),
            'opinion': any(word in message_lower for word in ['–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å', '—Å—á–∏—Ç–∞–µ—à—å', '—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è']),
            'learning_path': any(word in message_lower for word in ['—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–∫–∞–∫ —É—á–∏—Ç—å', '–ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∏–∑—É—á–µ–Ω–∏–µ']),
            'career': any(word in message_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ']),
            'file_operation': any(word in message_lower for word in ['—Ñ–∞–π–ª', '–∑–∞–≥—Ä—É–∑–∏', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–æ—Ç–∫—Ä–æ–π'])
        }
        
        return [intent for intent, detected in intents.items() if detected]
    
    def extract_entities(self, message):
        entities = {
            'languages': [],
            'technologies': [],
            'concepts': [],
            'level_indicators': []
        }
        
        # –ü–æ–∏—Å–∫ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        for lang_key, lang_info in self.programming_languages.items():
            lang_name = lang_info['name'].lower()
            if (lang_key in message.lower() or 
                lang_name in message.lower() or
                any(word in message.lower() for word in [lang_key, lang_name])):
                entities['languages'].append(lang_key)
        
        technologies = {
            'react': ['react', '—Ä–µ–∞–∫—Ç'],
            'vue': ['vue', '–≤—å—é'],
            'django': ['django', '–¥–∂–∞–Ω–≥–æ'],
            'flask': ['flask', '—Ñ–ª–∞—Å–∫'],
            'node': ['node', '–Ω–æ–¥'],
            'docker': ['docker', '–¥–æ–∫–µ—Ä'],
            'git': ['git', '–≥–∏—Ç']
        }
        
        for tech, keywords in technologies.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['technologies'].append(tech)
        
        concepts = {
            '–æ–æ–ø': ['–æ–æ–ø', '–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', 'object-oriented'],
            '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', 'algorithm'],
            '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö': ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'database'],
            '–≤–µ–±': ['–≤–µ–±', 'web', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä'],
            '–º–æ–±–∏–ª—å–Ω–∞—è': ['–º–æ–±–∏–ª—å–Ω—ã–π', 'mobile', 'android', 'ios'],
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': ['–∏–∏', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        }
        
        for concept, keywords in concepts.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['concepts'].append(concept)
        
        return entities
    
    def update_user_profile(self, message, entities):
        if entities['languages']:
            self.user_profile['preferred_languages'].update(entities['languages'])
        
        level_indicators = {
            'beginner': ['–Ω–∞—á–∏–Ω–∞—é', '–Ω–æ–≤–∏—á–æ–∫', '—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª', '—Å –Ω—É–ª—è', '–Ω–µ –ø–æ–Ω–∏–º–∞—é'],
            'advanced': ['–æ–ø—ã—Ç–Ω—ã–π', 'senior', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—ç–∫—Å–ø–µ—Ä—Ç', '–≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞—é']
        }
        
        message_lower = message.lower()
        for level, indicators in level_indicators.items():
            if any(indicator in message_lower for indicator in indicators):
                self.user_profile['skill_level'] = level
    
    def generate_smart_response(self, message):
        # 11. –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.emotional_ai.analyze_mood(message)
        
        intents = self.analyze_intent(message)
        entities = self.extract_entities(message)
        self.update_user_profile(message, entities)
        
        self.conversation_history.append({
            'message': message,
            'intents': intents,
            'entities': entities,
            'timestamp': datetime.now()
        })
        
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        response = self._craft_response(message, intents, entities)
        
        # 11. –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        return self.emotional_ai.get_emotional_response(response)
    
    def _craft_response(self, message, intents, entities):
        if 'greeting' in intents:
            return self._generate_greeting()
        
        if 'farewell' in intents:
            return self._generate_farewell()
        
        if 'help' in intents:
            return self._generate_help_response()
        
        if 'explanation' in intents:
            return self._generate_explanation(message, entities)
        
        if 'code_request' in intents:
            return self._generate_code_example(message, entities)
        
        if 'file_operation' in intents:
            return self._handle_file_operations(message)
        
        if 'comparison' in intents:
            return self._generate_comparison(message, entities)
        
        if 'problem' in intents:
            return self._generate_problem_solution(message, entities)
        
        if 'opinion' in intents:
            return self._generate_opinion(message, entities)
        
        if 'learning_path' in intents:
            return self._generate_learning_path(entities)
        
        if 'career' in intents:
            return self._generate_career_advice(entities)
        
        return self._generate_contextual_response(message, entities)
    
    def _generate_code_example(self, message, entities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        if entities['languages']:
            target_language = entities['languages'][0]
            return self._generate_specific_code(target_language, message)
        else:
            # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            return "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –∫–æ–¥? –Ø –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: Python, JavaScript, Java, C++, C#, Go, Rust, Kotlin, Swift, PHP, Ruby, TypeScript! üíª"
    
    def _generate_specific_code(self, language, context):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —è–∑—ã–∫–µ"""
        context_lower = context.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if any(word in context_lower for word in ['–æ–æ–ø', '–∫–ª–∞—Å—Å', 'object']):
            return self._generate_oop_example(language)
        elif any(word in context_lower for word in ['—Ñ—É–Ω–∫—Ü–∏—è', 'function', '–º–µ—Ç–æ–¥']):
            return self._generate_function_example(language)
        elif any(word in context_lower for word in ['–∞–ª–≥–æ—Ä–∏—Ç–º', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–ø–æ–∏—Å–∫']):
            return self._generate_algorithm_example(language)
        elif any(word in context_lower for word in ['—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–¥–∞–Ω–Ω—ã–µ', 'data structure']):
            return self._generate_data_structure_example(language)
        else:
            return self._generate_general_example(language)
    
    def _generate_oop_example(self, language):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –û–û–ü –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
        examples = {
            'python': """```python,
# AI-GPT2: –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—á–µ—Ç–æ–º
class BankAccount:
    def __init__(self, owner: str, balance: float = 0.0):
        self.owner = owner
        self._balance = balance  # –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
    
    def deposit(self, amount: float) -> None:
        """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞"""
        if amount > 0:
            self._balance += amount
            print(f"‚úÖ {self.owner}: +{amount} —Ä—É–±. –ë–∞–ª–∞–Ω—Å: {self._balance} —Ä—É–±.")
        else:
            print("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    
    def withdraw(self, amount: float) -> bool:
        """–°–Ω—è—Ç–∏–µ —Å–æ —Å—á–µ—Ç–∞"""
        if 0 < amount <= self._balance:
            self._balance -= amount
            print(f"‚úÖ {self.owner}: -{amount} —Ä—É–±. –ë–∞–ª–∞–Ω—Å: {self._balance} —Ä—É–±.")
            return True
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")
            return False
    
    def get_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        return self._balance

# –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
class SavingsAccount(BankAccount):
    def __init__(self, owner: str, balance: float = 0.0, interest_rate: float = 0.05):
        super().__init__(owner, balance)
        self.interest_rate = interest_rate
    
    def add_interest(self) -> None:
        """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        interest = self._balance * self.interest_rate
        self._balance += interest
        print(f"üìà –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã: +{interest:.2f} —Ä—É–±.")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
account = SavingsAccount("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 1000, 0.03)
account.deposit(500)
account.add_interest()
account.withdraw(200)
print(f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {account.get_balance():.2f} —Ä—É–±.")
```""",
            
            'javascript': """```javascript
// AI-GPT2: –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—á–µ—Ç–æ–º
class BankAccount {
    constructor(owner, balance = 0.0) {
        this.owner = owner;
        this._balance = balance; // –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
    }
    
    deposit(amount) {
        /** –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ */
        if (amount > 0) {
            this._balance += amount;
            console.log(`‚úÖ ${this.owner}: +${amount} —Ä—É–±. –ë–∞–ª–∞–Ω—Å: ${this._balance} —Ä—É–±.`);
        } else {
            console.log("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }
    }
    
    withdraw(amount) {
        /** –°–Ω—è—Ç–∏–µ —Å–æ —Å—á–µ—Ç–∞ */
        if (amount > 0 && amount <= this._balance) {
            this._balance -= amount;
            console.log(`‚úÖ ${this.owner}: -${amount} —Ä—É–±. –ë–∞–ª–∞–Ω—Å: ${this._balance} —Ä—É–±.`);
            return true;
        } else {
            console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞");
            return false;
        }
    }
    
    getBalance() {
        /** –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ */
        return this._balance;
    }
}

// –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
class SavingsAccount extends BankAccount {
    constructor(owner, balance = 0.0, interestRate = 0.05) {
        super(owner, balance);
        this.interestRate = interestRate;
    }
    
    addInterest() {
        /** –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */
        const interest = this._balance * this.interestRate;
        this._balance += interest;
        console.log(`üìà –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã: +${interest.toFixed(2)} —Ä—É–±.`);
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const account = new SavingsAccount("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 1000, 0.03);
account.deposit(500);
account.addInterest();
account.withdraw(200);
console.log(`üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${account.getBalance().toFixed(2)} —Ä—É–±.`);
```""",
            
            'java': """```java
// AI-GPT2: –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—á–µ—Ç–æ–º
public class BankAccount {
    private String owner;
    private double balance;
    
    public BankAccount(String owner, double balance) {
        this.owner = owner;
        this.balance = balance;
    }
    
    public BankAccount(String owner) {
        this(owner, 0.0);
    }
    
    public void deposit(double amount) {
        /** –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ */
        if (amount > 0) {
            this.balance += amount;
            System.out.printf("‚úÖ %s: +%.2f —Ä—É–±. –ë–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.%n", 
                owner, amount, balance);
        } else {
            System.out.println("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }
    }
    
    public boolean withdraw(double amount) {
        /** –°–Ω—è—Ç–∏–µ —Å–æ —Å—á–µ—Ç–∞ */
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.printf("‚úÖ %s: -%.2f —Ä—É–±. –ë–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.%n", 
                owner, amount, balance);
            return true;
        } else {
            System.out.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞");
            return false;
        }
    }
    
    public double getBalance() {
        return balance;
    }
    
    public String getOwner() {
        return owner;
    }
}

// –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
public class SavingsAccount extends BankAccount {
    private double interestRate;
    
    public SavingsAccount(String owner, double balance, double interestRate) {
        super(owner, balance);
        this.interestRate = interestRate;
    }
    
    public void addInterest() {
        /** –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */
        double interest = getBalance() * interestRate;
        deposit(interest);
        System.out.printf("üìà –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã: +%.2f —Ä—É–±.%n", interest);
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
public class Main {
    public static void main(String[] args) {
        SavingsAccount account = new SavingsAccount("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 1000, 0.03);
        account.deposit(500);
        account.addInterest();
        account.withdraw(200);
        System.out.printf("üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.%n", account.getBalance());
    }
}
```""",
            
            'cpp': """```cpp
// AI-GPT2: –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Å—á–µ—Ç–æ–º
#include <iostream>
#include <string>

class BankAccount {
private:
    std::string owner;
    double balance;

public:
    BankAccount(const std::string& owner, double balance = 0.0) 
        : owner(owner), balance(balance) {}
    
    void deposit(double amount) {
        /** –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ */
        if (amount > 0) {
            balance += amount;
            std::cout << "‚úÖ " << owner << ": +" << amount 
                      << " —Ä—É–±. –ë–∞–ª–∞–Ω—Å: " << balance << " —Ä—É–±." << std::endl;
        } else {
            std::cout << "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π" << std::endl;
        }
    }
    
    bool withdraw(double amount) {
        /** –°–Ω—è—Ç–∏–µ —Å–æ —Å—á–µ—Ç–∞ */
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            std::cout << "‚úÖ " << owner << ": -" << amount 
                      << " —Ä—É–±. –ë–∞–ª–∞–Ω—Å: " << balance << " —Ä—É–±." << std::endl;
            return true;
        } else {
            std::cout << "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞" << std::endl;
            return false;
        }
    }
    
    double getBalance() const {
        return balance;
    }
    
    std::string getOwner() const {
        return owner;
    }
};

// –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
class SavingsAccount : public BankAccount {
private:
    double interestRate;

public:
    SavingsAccount(const std::string& owner, double balance, double interestRate)
        : BankAccount(owner, balance), interestRate(interestRate) {}
    
    void addInterest() {
        /** –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ */
        double interest = getBalance() * interestRate;
        deposit(interest);
        std::cout << "üìà –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã: +" << interest << " —Ä—É–±." << std::endl;
    }
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
int main() {
    SavingsAccount account("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 1000, 0.03);
    account.deposit(500);
    account.addInterest();
    account.withdraw(200);
    std::cout << "üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: " << account.getBalance() << " —Ä—É–±." << std::endl;
    return 0;
}
```"""
        }
        
        return examples.get(language, f"AI-GPT2: –ü–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä –Ω–∞ Python! üêç\n{examples['python']}")
    
    def _handle_file_operations(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['–∑–∞–≥—Ä—É–∑–∏', 'upload', '–¥–æ–±–∞–≤—å —Ñ–∞–π–ª']):
            return "üìÅ –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ! –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n‚Ä¢ Python —Ñ–∞–π–ª—ã (.py)\n‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n‚Ä¢ JSON –¥–∞–Ω–Ω—ã–µ (.json)\n‚Ä¢ –ò –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã!"
        
        elif any(word in message_lower for word in ['–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', 'analyze', '–ø—Ä–æ–≤–µ—Ä—å –∫–æ–¥']):
            return "üîç –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –Ω–∞:\n‚Ä¢ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n‚Ä¢ –°—Ç–∏–ª—å –∫–æ–¥–∞ (PEP8 –¥–ª—è Python)\n‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è\n‚Ä¢ Best practices"
        
        else:
            return "üìÇ –Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏! –°–∫–∞–∂–∏—Ç–µ:\n‚Ä¢ '–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª' - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n‚Ä¢ '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥' - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞\n‚Ä¢ –ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∞–π–ª–µ!"
    
    def _generate_help_response(self):
        base_help = """ü§ñ **AI-GPT2 –º–æ–∂–µ—Ç:**

üíª **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ 12+ —è–∑—ã–∫–∞—Ö:**
‚Ä¢ Python, JavaScript, Java, C++
‚Ä¢ C#, Go, Rust, Kotlin  
‚Ä¢ Swift, PHP, Ruby, TypeScript

üìÅ **–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è
‚Ä¢ –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫

üß† **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:**
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç

üéØ **–ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ:**
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
‚Ä¢ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π

"""
        
        if self.user_profile['preferred_languages']:
            langs = ", ".join([self.programming_languages[lang]['name'] for lang in self.user_profile['preferred_languages']])
            base_help += f"üéØ –í–∏–∂—É —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {langs}. –ú–æ–≥—É —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —ç—Ç–∏ —Ç–µ–º—ã!"
        
        return base_help

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
    def _generate_greeting(self):
        greetings = [
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-GPT2 - —Ç–≤–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!",
            "üöÄ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! AI-GPT2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –∫–æ–¥–æ–º –Ω–∞ 12+ —è–∑—ã–∫–∞—Ö!",
            "üíª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ó–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª—ã, –ø—Ä–æ—Å–∏ –∫–æ–¥ - AI-GPT2 –ø–æ–º–æ–∂–µ—Ç!",
            "üéØ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!"
        ]
        
        if len(self.conversation_history) > 1:
            last_topic = self._get_last_topic()
            if last_topic:
                lang_name = self.programming_languages.get(last_topic, {}).get('name', last_topic)
                return f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º {lang_name}? –ò–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã?"
        
        return random.choice(greetings)
    
    def _generate_farewell(self):
        farewells = [
            "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! AI-GPT2 –±—É–¥–µ—Ç –∂–¥–∞—Ç—å —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!",
            "üöÄ –ü–æ–∫–∞! –£–¥–∞—á–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å AI-GPT2!",
            "üí´ –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ó–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª—ã - –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å!",
            "üéØ –ü–æ–∫–∞! –ü–æ–º–Ω–∏ - AI-GPT2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 12+ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!"
        ]
        return random.choice(farewells)
    
    def _generate_contextual_response(self, message, entities):
        if len(self.conversation_history) > 1:
            last_entities = self.conversation_history[-2].get('entities', {})
            if last_entities.get('languages') or last_entities.get('concepts'):
                return "AI-GPT2: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É? –ò–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏? üí≠"
        
        responses = [
            "AI-GPT2: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª! ü§î",
            "AI-GPT2: –•–æ—á–µ—à—å –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —è–∑—ã–∫–µ? –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª? üí°", 
            "AI-GPT2: –•–æ—Ä–æ—à–∞—è —Ç–µ–º–∞! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–¥–∞! üöÄ",
            "AI-GPT2: –ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º –∏–ª–∏ —Ñ–∞–π–ª–∞–º–∏! üìö"
        ]
        
        return random.choice(responses)
    
    def _get_last_topic(self):
        if len(self.conversation_history) < 2:
            return None
        
        last_entry = self.conversation_history[-2]
        entities = last_entry.get('entities', {})
        
        if entities.get('languages'):
            return entities['languages'][0]
        elif entities.get('concepts'):
            return entities['concepts'][0]
        
        return None

class AIHandler(BaseHTTPRequestHandler):
    ai = SmartAI()
    
    def do_GET(self):
        if self.path == '/':
            self._serve_html()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        if self.path == '/chat':
            self._handle_chat()
        elif self.path == '/upload':
            self._handle_file_upload()
        else:
            self.send_error(404, "Not Found")
    
    def _serve_html(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>AI-GPT2 üöÄ</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                    max-width: 800px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .chat-container {
                    background: white;
                    border-radius: 20px;
                    padding: 25px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    height: 90vh;
                    display: flex;
                    flex-direction: column;
                }
                .header {
                    text-align: center;
                    margin-bottom: 20px;
                    background: linear-gradient(135deg, #2c3e50, #3498db);
                    color: white;
                    padding: 20px;
                    border-radius: 15px;
                    margin: -25px -25px 20px -25px;
                }
                .header h1 {
                    margin: 0;
                    font-size: 2.2em;
                    font-weight: 700;
                }
                .header p {
                    margin: 5px 0 0 0;
                    opacity: 0.9;
                    font-size: 1.1em;
                }
                .features {
                    display: grid;
                    grid-template-columns: 1fr 1fr;
                    gap: 10px;
                    margin: 15px 0;
                }
                .feature {
                    background: #f8f9fa;
                    padding: 10px;
                    border-radius: 10px;
                    text-align: center;
                    font-size: 0.9em;
                    border: 1px solid #e9ecef;
                }
                #chat {
                    flex: 1;
                    border: 2px solid #e1e5e9;
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    overflow-y: auto;
                    background: #f8f9fa;
                }
                .message {
                    margin: 15px 0;
                    padding: 15px 20px;
                    border-radius: 18px;
                    max-width: 85%;
                    line-height: 1.5;
                    animation: fadeIn 0.3s ease;
                }
                @keyframes fadeIn {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
                .user {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                    margin-left: auto;
                    text-align: right;
                    border-bottom-right-radius: 5px;
                }
                .ai {
                    background: white;
                    color: #2c3e50;
                    border: 2px solid #3498db;
                    border-bottom-left-radius: 5px;
                    box-shadow: 0 2px 10px rgba(52, 152, 219, 0.2);
                }
                .input-area {
                    display: flex;
                    gap: 12px;
                    align-items: center;
                }
                #messageInput {
                    flex: 1;
                    padding: 15px 20px;
                    border: 2px solid #bdc3c7;
                    border-radius: 25px;
                    font-size: 16px;
                    outline: none;
                    transition: all 0.3s;
                    background: white;
                }
                #messageInput:focus {
                    border-color: #3498db;
                    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
                }
                button {
                    padding: 15px 25px;
                    background: linear-gradient(135deg, #e74c3c, #c0392b);
                    color: white;
                    border: none;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 16px;
                    font-weight: 600;
                    transition: all 0.3s;
                    box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
                }
                button:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
                }
                .upload-area {
                    border: 2px dashed #3498db;
                    border-radius: 10px;
                    padding: 20px;
                    text-align: center;
                    margin: 10px 0;
                    background: #f8f9fa;
                    cursor: pointer;
                }
                .upload-area:hover {
                    background: #e9ecef;
                }
                .code-block {
                    background: #2c3e50;
                    color: #ecf0f1;
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    font-family: 'Courier New', monospace;
                    white-space: pre-wrap;
                    overflow-x: auto;
                    border-left: 4px solid #e74c3c;
                }
                .ai-label {
                    font-weight: 600;
                    color: #3498db;
                    margin-bottom: 5px;
                }
                .user-label {
                    font-weight: 600;
                    color: white;
                    margin-bottom: 5px;
                }
            </style>
        </head>
        <body>
            <div class="chat-container">
                <div class="header">
                    <h1>üöÄ AI-GPT2</h1>
                    <p>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 12+ —è–∑—ã–∫–æ–≤</p>
                    <div class="features">
                        <div class="feature">üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò</div>
                        <div class="feature">üíª 12+ —è–∑—ã–∫–æ–≤ –∫–æ–¥–∞</div>
                        <div class="feature">üìÅ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏</div>
                        <div class="feature">üéØ –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</div>
                    </div>
                </div>
                
                <div class="upload-area" onclick="document.getElementById('fileInput').click()">
                    <h3>üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
                    <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ (.py, .js, .java, .txt, .json)</p>
                    <input type="file" id="fileInput" style="display: none;" onchange="handleFileUpload(this.files)">
                </div>
                
                <div id="chat">
                    <div class="message ai">
                        <div class="ai-label">üß† AI-GPT2</div>
                        –ü—Ä–∏–≤–µ—Ç! –Ø AI-GPT2 —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º! üß†<br><br>
                        üî• <strong>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong><br>
                        ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ 12+ —è–∑—ã–∫–∞—Ö<br>
                        ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã<br>
                        ‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏<br>
                        ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è<br><br>
                        –ü—Ä–æ—Å–∏ –∫–æ–¥ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª—ã! üöÄ
                    </div>
                </div>
                
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="–°–ø—Ä–æ—Å–∏ –æ –∫–æ–¥–µ –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏...">
                    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>

            <script>
                function addMessage(text, isUser) {
                    const chat = document.getElementById('chat');
                    const message = document.createElement('div');
                    message.className = isUser ? 'message user' : 'message ai';
                    
                    let formattedText = text;
                    if (text.includes('```')) {
                        formattedText = text.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
                    }
                    formattedText = formattedText.replace(/\\n/g, '<br>');
                    
                    if (isUser) {
                        message.innerHTML = '<div class="user-label">üë§ –í—ã</div>' + formattedText;
                    } else {
                        message.innerHTML = '<div class="ai-label">üß† AI-GPT2</div>' + formattedText;
                    }
                    
                    chat.appendChild(message);
                    chat.scrollTop = chat.scrollHeight;
                }

                async function sendMessage() {
                    const input = document.getElementById('messageInput');
                    const message = input.value.trim();
                    
                    if (!message) return;
                    
                    input.value = '';
                    addMessage(message, true);
                    
                    try {
                        const response = await fetch('/chat', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({message: message})
                        });
                        
                        const data = await response.json();
                        addMessage(data.response, false);
                        
                    } catch (error) {
                        addMessage('‚ùå AI-GPT2: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
                    }
                }

                async function handleFileUpload(files) {
                    if (!files.length) return;
                    
                    const file = files[0];
                    const reader = new FileReader();
                    
                    reader.onload = async function(e) {
                        const content = e.target.result;
                        addMessage(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name} (${file.size} –±–∞–π—Ç)`, true);
                        
                        try {
                            const response = await fetch('/upload', {
                                method: 'POST',
                                headers: {'Content-Type': 'application/json'},
                                body: JSON.stringify({
                                    filename: file.name,
                                    content: content,
                                    size: file.size
                                })
                            });
                            
                            const data = await response.json();
                            addMessage(data.response, false);
                            
                        } catch (error) {
                            addMessage('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', false);
                        }
                    };
                    
                    reader.readAsText(file);
                }

                document.getElementById('messageInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') sendMessage();
                });

                document.getElementById('messageInput').focus();
            </script>
        </body>
        </html>
        '''
        self.wfile.write(html.encode('utf-8'))
    
    def _handle_chat(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            response = self.ai.generate_smart_response(message)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Error: {str(e)}")
    
    def _handle_file_upload(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            filename = data.get('filename', 'unknown')
            content = data.get('content', '')
            size = data.get('size', 0)
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
            analysis = self._analyze_file(filename, content)
            
            response = f"üìä **–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {filename}:**\n\n{analysis}"
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Upload Error: {str(e)}")
    
    def _analyze_file(self, filename, content):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_ext = os.path.splitext(filename)[1].lower()
        
        analysis = []
        analysis.append(f"üìÅ **–§–∞–π–ª:** {filename}")
        analysis.append(f"üìè **–†–∞–∑–º–µ—Ä:** {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_types = {
            '.py': 'Python —Ñ–∞–π–ª',
            '.js': 'JavaScript —Ñ–∞–π–ª', 
            '.java': 'Java —Ñ–∞–π–ª',
            '.cpp': 'C++ —Ñ–∞–π–ª',
            '.cs': 'C# —Ñ–∞–π–ª',
            '.go': 'Go —Ñ–∞–π–ª',
            '.rs': 'Rust —Ñ–∞–π–ª',
            '.kt': 'Kotlin —Ñ–∞–π–ª',
            '.swift': 'Swift —Ñ–∞–π–ª',
            '.php': 'PHP —Ñ–∞–π–ª',
            '.rb': 'Ruby —Ñ–∞–π–ª',
            '.ts': 'TypeScript —Ñ–∞–π–ª',
            '.txt': '–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª',
            '.json': 'JSON —Ñ–∞–π–ª'
        }
        
        file_type = file_types.get(file_ext, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')
        analysis.append(f"üîß **–¢–∏–ø:** {file_type}")
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        lines = content.split('\n')
        analysis.append(f"üìù **–°—Ç—Ä–æ–∫ –∫–æ–¥–∞:** {len(lines)}")
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        issues = []
        
        if file_ext == '.py':
            # –ê–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞
            if 'import *' in content:
                issues.append("‚ö†Ô∏è –ò–∑–±–µ–≥–∞–π—Ç–µ 'import *' - –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏")
            if 'eval(' in content or 'exec(' in content:
                issues.append("‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å eval()/exec() - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            if len(content) > 1000:
                issues.append("üí° –§–∞–π–ª –¥–æ–≤–æ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –º–æ–¥—É–ª–∏")
                
        elif file_ext == '.js':
            # –ê–Ω–∞–ª–∏–∑ JavaScript –∫–æ–¥–∞
            if 'eval(' in content:
                issues.append("‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å eval() - –≤–æ–∑–º–æ–∂–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            if 'var ' in content:
                issues.append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ let/const –≤–º–µ—Å—Ç–æ var –¥–ª—è –ª—É—á—à–µ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏")
                
        elif file_ext == '.java':
            # –ê–Ω–∞–ª–∏–∑ Java –∫–æ–¥–∞
            if 'public static void main' in content:
                issues.append("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                
        if issues:
            analysis.append("\nüîç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            analysis.extend(issues)
        else:
            analysis.append("\n‚úÖ **–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!**")
        
        analysis.append(f"\nüß† **AI-GPT2:** –ú–æ–≥—É –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥! –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!")
        
        return '\n'.join(analysis)
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        print(f"üöÄ AI-GPT2: {format % args}")

if __name__ == '__main__':
    HOST = '0.0.0.0'
    PORT = 8000
    
    print("üöÄ –ó–ê–ü–£–°–ö AI-GPT2 –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–ú–ò...")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                 AI-GPT2 2.0                 ‚ïë")
    print("‚ïë  –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò + 12 —è–∑—ã–∫–æ–≤ + —Ñ–∞–π–ª—ã       ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"üìç –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print("\nüéØ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç")
    print("‚Ä¢ üíª 12+ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è") 
    print("‚Ä¢ üìÅ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏")
    print("‚Ä¢ üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
    print("‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")
    
    try:
        server = HTTPServer((HOST, PORT), AIHandler)
        print(f"‚úÖ AI-GPT2 2.0 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {HOST}:{PORT}")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë AI-GPT2 –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
