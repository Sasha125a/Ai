from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import os
from datetime import datetime

class SimpleAI:
    def __init__(self):
        self.knowledge = {
            "python": "Python - –ø—Ä–æ—Å—Ç–æ–π –∏ –º–æ—â–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
            "javascript": "JavaScript - —è–∑—ã–∫ –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (Node.js).",
            "html": "HTML - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. CSS - —Å—Ç–∏–ª–∏. JavaScript - –ø–æ–≤–µ–¥–µ–Ω–∏–µ.",
            "–æ–æ–ø": "–û–û–ü - –û–±—ä–µ–∫—Ç–Ω–æ-–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã: –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º.",
            "–∞–ª–≥–æ—Ä–∏—Ç–º": "–ê–ª–≥–æ—Ä–∏—Ç–º - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –í–∞–∂–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–ª–æ–∂–Ω–æ—Å—Ç—å O(n)).",
            "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. SQL - —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ (MySQL, PostgreSQL), NoSQL - –¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–µ (MongoDB).",
            "–≤–µ–±": "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: frontend (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) –∏ backend (–ª–æ–≥–∏–∫–∞). –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: React, Vue, Django, Flask.",
            "–º–æ–±–∏–ª—å–Ω—ã–π": "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –Ω–∞—Ç–∏–≤–Ω–∞—è (Kotlin/Java –¥–ª—è Android, Swift –¥–ª—è iOS) –∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è (Flutter, React Native)."
        }
    
    def get_answer(self, question):
        question_lower = question.lower()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword, answer in self.knowledge.items():
            if keyword in question_lower:
                return answer
        
        # –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello']):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ Python, JavaScript, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ–º–∞—Ö! üöÄ"
        
        elif any(word in question_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']):
            return "–Ø –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å:\n‚Ä¢ –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –Ø–∑—ã–∫–∏ (Python, JavaScript)\n‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n‚Ä¢ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –æ —á—ë–º-–Ω–∏–±—É–¥—å!"
        
        elif any(word in question_lower for word in ['—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–Ω–∞–ø–∏—à–∏ –∫–æ–¥']):
            return self._generate_code(question)
        
        else:
            return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –µ—â—ë —É—á—É—Å—å, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ–º–∞–º–∏: Python, JavaScript, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞–ª–≥–æ—Ä–∏—Ç–º—ã. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É! üí°"

    def _generate_code(self, question):
        if 'python' in question.lower():
            return '''```python
# –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä Python
def greet(name):
    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
result = greet("–ú–∏—Ä")
print(result)  # –í—ã–≤–æ–¥: –ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä!
```'''
        elif 'javascript' in question.lower():
            return '''```javascript
// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä JavaScript
function greet(name) {
    return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const result = greet("–ú–∏—Ä");
console.log(result);  // –í—ã–≤–æ–¥: –ü—Ä–∏–≤–µ—Ç, –ú–∏—Ä!
```'''
        else:
            return '''```python
# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –Ω–∞ Python
numbers = [1, 2, 3, 4, 5]

# –£–¥–≤–æ–∏—Ç—å –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ
doubled = [x * 2 for x in numbers]
print(doubled)  # [2, 4, 6, 8, 10]

# –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á—ë—Ç–Ω—ã–µ
even = [x for x in numbers if x % 2 == 0]
print(even)  # [2, 4]
```'''

class SimpleAIHandler(BaseHTTPRequestHandler):
    ai = SimpleAI()
    
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(HTML.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/api/chat':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                data = json.loads(post_data.decode('utf-8'))
                message = data.get('message', '')
                
                if not message:
                    self._send_json_response({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}, 400)
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
                response = self.ai.get_answer(message)
                self._send_json_response({
                    'response': response,
                    'timestamp': datetime.now().isoformat()
                })
                
            except Exception as e:
                self._send_json_response({'error': str(e)}, 500)
        else:
            self.send_response(404)
            self.end_headers()
    
    def _send_json_response(self, data, status=200):
        self.send_response(status)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTML
HTML = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üí¨ –ò–ò –ß–∞—Ç</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            background: #f0f2f5;
            height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: #007bff;
            color: white;
            padding: 20px;
            text-align: center;
        }

        .messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .message {
            max-width: 80%;
            padding: 12px 16px;
            border-radius: 18px;
            word-wrap: break-word;
        }

        .user-message {
            background: #007bff;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }

        .ai-message {
            background: white;
            color: #333;
            border: 1px solid #ddd;
            border-bottom-left-radius: 5px;
        }

        .input-area {
            padding: 15px;
            background: white;
            border-top: 1px solid #ddd;
            display: flex;
            gap: 10px;
        }

        #messageInput {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
        }

        #messageInput:focus {
            border-color: #007bff;
        }

        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
        }

        button:hover {
            background: #0056b3;
        }

        .code-block {
            background: #2c3e50;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin-top: 5px;
            font-family: monospace;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üí¨ –ò–ò –ß–∞—Ç –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</h1>
    </div>

    <div class="messages" id="messages">
        <div class="message ai-message">
            –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.
        </div>
    </div>

    <div class="input-area">
        <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...">
        <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </div>

    <script>
        function addMessage(text, isUser = false) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'user-message' : 'ai-message';
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
            let formattedText = text;
            if (text.includes('```')) {
                formattedText = text.replace(/```(\w+)?\\n([\\s\\S]*?)```/g, '$2');
                formattedText = formattedText.replace(/\n/g, '<br>');
                formattedText = formattedText.replace(/(```[\\s\\S]*?```)/g, '<div class="code-block">$1</div>');
            } else {
                formattedText = text.replace(/\n/g, '<br>');
            }
            
            messageDiv.innerHTML = formattedText;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input.value = '';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É
            addMessage(message, true);
            
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });
                
                const data = await response.json();
                
                if (data.error) {
                    addMessage('–û—à–∏–±–∫–∞: ' + data.error);
                } else {
                    addMessage(data.response);
                }
                
            } catch (error) {
                addMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('messageInput').focus();
    </script>
</body>
</html>
'''

def main():
    port = 8000
    server = HTTPServer(('localhost', port), SimpleAIHandler)
    
    print(f"üöÄ –ò–ò –ß–∞—Ç –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:{port}")
    print("üí¨ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
