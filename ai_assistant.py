from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import re
import random
from datetime import datetime

class SmartAI:
    def __init__(self):
        self.conversation_history = []
        self.user_profile = {
            'interests': set(),
            'skill_level': 'beginner',  # beginner, intermediate, advanced
            'preferred_languages': set()
        }
        
    def analyze_intent(self, message):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        intents = {
            'greeting': any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi', '–¥–æ–±—Ä—ã–π']),
            'farewell': any(word in message_lower for word in ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye', '–ø—Ä–æ—â–∞–π']),
            'help': any(word in message_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']),
            'explanation': any(word in message_lower for word in ['–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç']),
            'code_request': any(word in message_lower for word in ['–∫–æ–¥', '–ø—Ä–∏–º–µ—Ä', '–Ω–∞–ø–∏—à–∏', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ–∫–∞–∂–∏ –∫–æ–¥']),
            'comparison': any(word in message_lower for word in ['—Ä–∞–∑–Ω–∏—Ü–∞', '—Å—Ä–∞–≤–Ω–∏', '—á—Ç–æ –ª—É—á—à–µ', '–æ—Ç–ª–∏—á–∏–µ']),
            'problem': any(word in message_lower for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å']),
            'opinion': any(word in message_lower for word in ['–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å', '—Å—á–∏—Ç–∞–µ—à—å', '—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è']),
            'learning_path': any(word in message_lower for word in ['—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å', '–∫–∞–∫ —É—á–∏—Ç—å', '–ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è', '–∏–∑—É—á–µ–Ω–∏–µ']),
            'career': any(word in message_lower for word in ['—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'])
        }
        
        return [intent for intent, detected in intents.items() if detected]
    
    def extract_entities(self, message):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        entities = {
            'languages': [],
            'technologies': [],
            'concepts': [],
            'level_indicators': []
        }
        
        # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        languages = {
            'python': ['python', '–ø–∏—Ç–æ–Ω', '–ø–∞–π—Ç–æ–Ω'],
            'javascript': ['javascript', 'js', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç'],
            'java': ['java', '–¥–∂–∞–≤–∞'],
            'html': ['html', '—Ö—Ç–º–ª'],
            'css': ['css', '—Ü—Å—Å'],
            'sql': ['sql', '–µ—Å –∫—å—é —ç–ª'],
            'typescript': ['typescript', '—Ç—Å–∞–π–ø—Å–∫—Ä–∏–ø—Ç']
        }
        
        for lang, keywords in languages.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['languages'].append(lang)
        
        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
        technologies = {
            'react': ['react', '—Ä–µ–∞–∫—Ç'],
            'vue': ['vue', '–≤—å—é'],
            'django': ['django', '–¥–∂–∞–Ω–≥–æ'],
            'flask': ['flask', '—Ñ–ª–∞—Å–∫'],
            'node': ['node', '–Ω–æ–¥'],
            'docker': ['docker', '–¥–æ–∫–µ—Ä'],
            'git': ['git', '–≥–∏—Ç']
        }
        
        for tech, keywords in technologies.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['technologies'].append(tech)
        
        # –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏
        concepts = {
            '–æ–æ–ø': ['–æ–æ–ø', '–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', 'object-oriented'],
            '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', 'algorithm'],
            '–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö': ['–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–±–¥', 'database'],
            '–≤–µ–±': ['–≤–µ–±', 'web', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä'],
            '–º–æ–±–∏–ª—å–Ω–∞—è': ['–º–æ–±–∏–ª—å–Ω—ã–π', 'mobile', 'android', 'ios'],
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': ['–∏–∏', 'ai', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']
        }
        
        for concept, keywords in concepts.items():
            if any(keyword in message.lower() for keyword in keywords):
                entities['concepts'].append(concept)
        
        return entities
    
    def update_user_profile(self, message, entities):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if entities['languages']:
            self.user_profile['preferred_languages'].update(entities['languages'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤
        level_indicators = {
            'beginner': ['–Ω–∞—á–∏–Ω–∞—é', '–Ω–æ–≤–∏—á–æ–∫', '—Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª', '—Å –Ω—É–ª—è', '–Ω–µ –ø–æ–Ω–∏–º–∞—é'],
            'advanced': ['–æ–ø—ã—Ç–Ω—ã–π', 'senior', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', '—ç–∫—Å–ø–µ—Ä—Ç', '–≥–ª—É–±–æ–∫–æ –ø–æ–Ω–∏–º–∞—é']
        }
        
        message_lower = message.lower()
        for level, indicators in level_indicators.items():
            if any(indicator in message_lower for indicator in indicators):
                self.user_profile['skill_level'] = level
    
    def generate_smart_response(self, message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        intents = self.analyze_intent(message)
        entities = self.extract_entities(message)
        self.update_user_profile(message, entities)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            'message': message,
            'intents': intents,
            'entities': entities,
            'timestamp': datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 10:
            self.conversation_history = self.conversation_history[-10:]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        return self._craft_response(message, intents, entities)
    
    def _craft_response(self, message, intents, entities):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if 'greeting' in intents:
            return self._generate_greeting()
        
        # –ü—Ä–æ—â–∞–Ω–∏–µ
        if 'farewell' in intents:
            return self._generate_farewell()
        
        # –ü–æ–º–æ—â—å
        if 'help' in intents:
            return self._generate_help_response()
        
        # –ó–∞–ø—Ä–æ—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        if 'explanation' in intents:
            return self._generate_explanation(message, entities)
        
        # –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞
        if 'code_request' in intents:
            return self._generate_code_example(message, entities)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if 'comparison' in intents:
            return self._generate_comparison(message, entities)
        
        # –ü—Ä–æ–±–ª–µ–º–∞
        if 'problem' in intents:
            return self._generate_problem_solution(message, entities)
        
        # –ú–Ω–µ–Ω–∏–µ
        if 'opinion' in intents:
            return self._generate_opinion(message, entities)
        
        # –ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è
        if 'learning_path' in intents:
            return self._generate_learning_path(entities)
        
        # –ö–∞—Ä—å–µ—Ä–∞
        if 'career' in intents:
            return self._generate_career_advice(entities)
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        return self._generate_contextual_response(message, entities)
    
    def _generate_greeting(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        greetings = [
            "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ! üöÄ",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏? üíª",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? üìö",
            "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º? –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã! üî•"
        ]
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if len(self.conversation_history) > 1:
            last_topic = self._get_last_topic()
            if last_topic:
                return f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Å—É–∂–¥–∞—Ç—å {last_topic}? –ò –µ—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã? üí≠"
        
        return random.choice(greetings)
    
    def _generate_farewell(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—â–∞–Ω–∏—è"""
        farewells = [
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å —Å–Ω–æ–≤–∞! üëã",
            "–ü–æ–∫–∞! –£–¥–∞—á–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏! üçÄ",
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üòä",
            "–ü–æ–∫–∞! –ü–æ–º–Ω–∏ - –ø—Ä–∞–∫—Ç–∏–∫–∞ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üí™"
        ]
        return random.choice(farewells)
    
    def _generate_help_response(self):
        """–£–º–Ω–∞—è –ø–æ–º–æ—â—å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        base_help = "–Ø –º–æ–≥—É:\n‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –∫–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏\n‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n‚Ä¢ –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è\n‚Ä¢ –†–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã\n\n"
        
        if self.user_profile['preferred_languages']:
            langs = ", ".join(self.user_profile['preferred_languages'])
            base_help += f"–í–∏–∂—É, —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç: {langs}. –ú–æ–≥—É —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —ç—Ç–∏ —Ç–µ–º—ã! üéØ"
        
        return base_help
    
    def _generate_explanation(self, message, entities):
        """–£–º–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if entities['concepts']:
            concept = entities['concepts'][0]
            return self._explain_concept(concept)
        elif entities['languages']:
            language = entities['languages'][0]
            return self._explain_language(language)
        else:
            return "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å? –ö–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é, –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? ü§î"
    
    def _explain_concept(self, concept):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        explanations = {
            '–æ–æ–ø': {
                'beginner': """üéØ **–û–û–ü –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:**

–û–±—ä–µ–∫—Ç–Ω–æ-–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –ø–æ–¥—Ö–æ–¥, –≥–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ "–æ–±—ä–µ–∫—Ç–æ–≤".

–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –∏–≥—Ä—É:
‚Ä¢ **–ö–ª–∞—Å—Å** = –ß–µ—Ä—Ç–µ–∂ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–≥—Ä–æ–∫")
‚Ä¢ **–û–±—ä–µ–∫—Ç** = –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ì–µ—Ä–æ–π 1")
‚Ä¢ **–°–≤–æ–π—Å—Ç–≤–∞** = –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–∏–º—è, –∑–¥–æ—Ä–æ–≤—å–µ, —É—Ä–æ–≤–µ–Ω—å)
‚Ä¢ **–ú–µ—Ç–æ–¥—ã** = –î–µ–π—Å—Ç–≤–∏—è (–∞—Ç–∞–∫–æ–≤–∞—Ç—å, –ª–µ—á–∏—Ç—å—Å—è, –¥–≤–∏–≥–∞—Ç—å—Å—è)

–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –≤ Python:
```python
class Player:
    def __init__(self, name):
        self.name = name
        self.health = 100
    
    def attack(self):
        print(f"{self.name} –∞—Ç–∞–∫—É–µ—Ç!")
    
    def take_damage(self, damage):
        self.health -= damage
        print(f"–ó–¥–æ—Ä–æ–≤—å–µ: {self.health}")

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
hero = Player("–ê—Ä—Ç—É—Ä")
hero.attack()  # –ê—Ä—Ç—É—Ä –∞—Ç–∞–∫—É–µ—Ç!
```""",
                'intermediate': """‚ö° **–û–û–ü: –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:**

1. **–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è** - —Å–∫—Ä—ã—Ç–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
2. **–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ** - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö  
3. **–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º** - —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
4. **–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è** - —Ä–∞–±–æ—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∞ –Ω–µ –¥–µ—Ç–∞–ª–µ–π

–ü—Ä–∏–º–µ—Ä –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
```python
class Animal:
    def speak(self):
        pass

class Dog(Animal):
    def speak(self):
        return "–ì–∞–≤!"

class Cat(Animal):
    def speak(self):
        return "–ú—è—É!"

# –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –≤ –¥–µ–π—Å—Ç–≤–∏–∏
animals = [Dog(), Cat()]
for animal in animals:
    print(animal.speak())  # –†–∞–∑–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ!
```"""
            },
            '–∞–ª–≥–æ—Ä–∏—Ç–º—ã': {
                'beginner': """üîç **–ê–ª–≥–æ—Ä–∏—Ç–º—ã - —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**

–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –∏—â–µ—à—å –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:
‚Ä¢ **–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫** - –ø—Ä–æ–≤–µ—Ä—è–µ—à—å –∫–∞–∂–¥—É—é –ø–æ–ª–∫—É –ø–æ –ø–æ—Ä—è–¥–∫—É
‚Ä¢ **–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫** - –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—à—å –ø–æ–ª–æ–≤–∏–Ω—É

–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –≤ Python:
```python
# –õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ (–ø—Ä–æ—Å—Ç–æ–π)
def linear_search(items, target):
    for i, item in enumerate(items):
        if item == target:
            return i
    return -1

# –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–ª—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
def binary_search(items, target):
    low, high = 0, len(items)-1
    while low <= high:
        mid = (low + high) // 2
        if items[mid] == target:
            return mid
        elif items[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1
```""",
                'intermediate': """‚ö° **–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (Big O)**

‚Ä¢ **O(1)** - –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è (–¥–æ—Å—Ç—É–ø –∫ —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞)
‚Ä¢ **O(log n)** - –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è (–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫)
‚Ä¢ **O(n)** - –õ–∏–Ω–µ–π–Ω–∞—è (–ª–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫)
‚Ä¢ **O(n¬≤)** - –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è (–ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)

–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫:
```python
# –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è O(n¬≤) - –º–µ–¥–ª–µ–Ω–Ω–∞—è, –Ω–æ –ø—Ä–æ—Å—Ç–∞—è
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

# –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ O(n log n) - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr)//2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)
```"""
            }
        }
        
        if concept in explanations:
            level = self.user_profile['skill_level']
            if level in explanations[concept]:
                return explanations[concept][level]
            return explanations[concept]['beginner']
        
        return f"–ö–æ–Ω—Ü–µ–ø—Ü–∏—è '{concept}' –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π? ü§î"
    
    def _explain_language(self, language):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"""
        languages_explanation = {
            'python': """üêç **Python - —è–∑—ã–∫ –¥–ª—è –≤—Å–µ–≥–æ!**

**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
‚Ä¢ –ú–æ—â–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Data Science
‚Ä¢ –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏: Django, Flask
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏ —Å–∫—Ä–∏–ø—Ç—ã

**–ò–¥–µ–∞–ª–µ–Ω –¥–ª—è:**
‚Ä¢ –ù–∞—á–∏–Ω–∞—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤
‚Ä¢ Data Science –∏ AI
‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á

**–ü—Ä–∏–º–µ—Ä:**
```python
# –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥
numbers = [1, 2, 3, 4, 5]
squares = [x**2 for x in numbers]
even_squares = [x for x in squares if x % 2 == 0]
print(even_squares)  # [4, 16]
```""",
            
            'javascript': """üìú **JavaScript - —è–∑—ã–∫ –≤–µ–±–∞**

**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (frontend + backend)
‚Ä¢ –û–≥—Ä–æ–º–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è

**–ò–¥–µ–∞–ª–µ–Ω –¥–ª—è:**
‚Ä¢ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
‚Ä¢ Full-stack —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

**–ü—Ä–∏–º–µ—Ä:**
```javascript
// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript
const users = [
    { name: 'Alice', age: 25 },
    { name: 'Bob', age: 30 }
];

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
const adultUsers = users
    .filter(user => user.age >= 18)
    .map(user => user.name);

console.log(adultUsers); // ['Alice', 'Bob']
```"""
        }
        
        return languages_explanation.get(language, f"–Ø–∑—ã–∫ {language} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? üí≠")
    
    def _generate_code_example(self, message, entities):
        """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞"""
        if entities['languages']:
            language = entities['languages'][0]
            return self._get_smart_code_example(language, message)
        
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
        return "–î–ª—è –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞? Python, JavaScript, –∏–ª–∏ –º–æ–∂–µ—Ç –¥—Ä—É–≥–æ–π? üíª"
    
    def _get_smart_code_example(self, language, context):
        """–£–º–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context_lower = context.lower()
        
        if '–æ–æ–ø' in context_lower or '–∫–ª–∞—Å—Å' in context_lower:
            return self._generate_oop_example(language)
        elif '—Ñ—É–Ω–∫—Ü–∏—è' in context_lower or '–º–µ—Ç–æ–¥' in context_lower:
            return self._generate_function_example(language)
        elif '–æ–±—Ä–∞–±–æ—Ç–∫–∞' in context_lower or '–¥–∞–Ω–Ω—ã–µ' in context_lower:
            return self._generate_data_processing_example(language)
        else:
            return self._generate_general_example(language)
    
    def _generate_oop_example(self, language):
        """–ü—Ä–∏–º–µ—Ä –û–û–ü –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        examples = {
            'python': """```python
# –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Python –∫–ª–∞—Å—Å —Å type hints
from typing import List, Optional
from dataclasses import dataclass

@dataclass
class Product:
    name: str
    price: float
    category: str
    
    def apply_discount(self, percent: float) -> float:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É –∫ —Ç–æ–≤–∞—Ä—É"""
        discount = self.price * (percent / 100)
        return self.price - discount

class ShoppingCart:
    def __init__(self):
        self.items: List[Product] = []
    
    def add_product(self, product: Product) -> None:
        self.items.append(product)
    
    def total_price(self) -> float:
        return sum(item.price for item in self.items)
    
    def get_products_by_category(self, category: str) -> List[Product]:
        return [item for item in self.items if item.category == category]

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
laptop = Product("MacBook", 1500.0, "electronics")
phone = Product("iPhone", 800.0, "electronics")

cart = ShoppingCart()
cart.add_product(laptop)
cart.add_product(phone)

print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cart.total_price():.2f}")
print(f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {len(cart.get_products_by_category('electronics'))}")
```""",
            
            'javascript': """```javascript
// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π JavaScript —Å –∫–ª–∞—Å—Å–∞–º–∏
class Product {
    constructor(name, price, category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }
    
    applyDiscount(percent) {
        const discount = this.price * (percent / 100);
        return this.price - discount;
    }
}

class ShoppingCart {
    constructor() {
        this.items = [];
    }
    
    addProduct(product) {
        this.items.push(product);
    }
    
    totalPrice() {
        return this.items.reduce((total, item) => total + item.price, 0);
    }
    
    getProductsByCategory(category) {
        return this.items.filter(item => item.category === category);
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
const laptop = new Product("MacBook", 1500, "electronics");
const phone = new Product("iPhone", 800, "electronics");

const cart = new ShoppingCart();
cart.addProduct(laptop);
cart.addProduct(phone);

console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${cart.totalPrice()}`);
console.log(`–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ: ${cart.getProductsByCategory("electronics").length}`);
```"""
        }
        
        return examples.get(language, "–ü–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä –û–û–ü –Ω–∞ Python! üêç\n" + examples['python'])
    
    def _generate_contextual_response(self, message, entities):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ–≥–¥–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ —è—Å–Ω–æ"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(self.conversation_history) > 1:
            last_intent = self.conversation_history[-2].get('intents', [])
            last_entities = self.conversation_history[-2].get('entities', {})
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É
            if last_entities.get('languages') or last_entities.get('concepts'):
                return "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä? –ò–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å? üí≠"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
        if self.user_profile['preferred_languages']:
            langs = ", ".join(self.user_profile['preferred_languages'])
            return f"–í–∏–∂—É, —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã {langs}. –•–æ—á–µ—à—å —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —ç—Ç–∏ —Ç–µ–º—ã –∏–ª–∏ —Å–ø—Ä–æ—Å–∏—à—å –æ —á—ë–º-—Ç–æ –Ω–æ–≤–æ–º? üéØ"
        
        # –û–±—â–∏–π —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        thoughtful_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? ü§î",
            "–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –æ–±—ä—è—Å–Ω–∏–ª —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ? –ò–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã? üí°",
            "–≠—Ç–æ —Ö–æ—Ä–æ—à–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? üöÄ",
            "–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å! –î–∞–≤–∞–π —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ. üìö"
        ]
        
        return random.choice(thoughtful_responses)
    
    def _get_last_topic(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–µ–º—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        if len(self.conversation_history) < 2:
            return None
        
        last_entry = self.conversation_history[-2]
        entities = last_entry.get('entities', {})
        
        if entities.get('languages'):
            return entities['languages'][0]
        elif entities.get('concepts'):
            return entities['concepts'][0]
        
        return None

class AIHandler(BaseHTTPRequestHandler):
    ai = SmartAI()
    
    def do_GET(self):
        if self.path == '/':
            self._serve_html()
        else:
            self.send_error(404, "Not Found")
    
    def do_POST(self):
        if self.path == '/chat':
            self._handle_chat()
        else:
            self.send_error(404, "Not Found")
    
    def _serve_html(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        
        html = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üß† –£–º–Ω—ã–π –ò–ò –ß–∞—Ç</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif; 
                    max-width: 600px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: #f0f2f5;
                }
                .chat-container {
                    background: white;
                    border-radius: 15px;
                    padding: 20px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                }
                #chat {
                    height: 400px;
                    border: 1px solid #e1e5e9;
                    border-radius: 10px;
                    padding: 15px;
                    margin-bottom: 15px;
                    overflow-y: auto;
                    background: #fafbfc;
                }
                .message {
                    margin: 12px 0;
                    padding: 12px 16px;
                    border-radius: 12px;
                    max-width: 85%;
                    line-height: 1.5;
                }
                .user {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                    margin-left: auto;
                    text-align: right;
                }
                .ai {
                    background: #ffffff;
                    color: #1a1a1a;
                    border: 1px solid #e1e5e9;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                }
                .input-area {
                    display: flex;
                    gap: 10px;
                }
                #messageInput {
                    flex: 1;
                    padding: 12px 16px;
                    border: 2px solid #e1e5e9;
                    border-radius: 25px;
                    font-size: 16px;
                    outline: none;
                    transition: border-color 0.3s;
                }
                #messageInput:focus {
                    border-color: #007bff;
                }
                button {
                    padding: 12px 24px;
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                    border: none;
                    border-radius: 25px;
                    cursor: pointer;
                    font-size: 16px;
                    font-weight: 600;
                    transition: transform 0.2s;
                }
                button:hover {
                    transform: translateY(-1px);
                }
                .code-block {
                    background: #1e1e1e;
                    color: #d4d4d4;
                    padding: 15px;
                    border-radius: 8px;
                    margin: 10px 0;
                    font-family: 'Courier New', monospace;
                    white-space: pre-wrap;
                    overflow-x: auto;
                    border-left: 4px solid #007bff;
                }
                .typing {
                    color: #666;
                    font-style: italic;
                    padding: 10px;
                }
            </style>
        </head>
        <body>
            <div class="chat-container">
                <h1>üß† –£–º–Ω—ã–π –ò–ò –ß–∞—Ç</h1>
                <p><em>–ò–ò, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —É—á–∏—Ç—Å—è –Ω–∞ –±–µ—Å–µ–¥–µ</em></p>
                
                <div id="chat">
                    <div class="message ai">
                        <strong>üß† –£–º–Ω—ã–π –ò–ò:</strong><br>
                        –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã - —è –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∑–∞–ø–æ–º–∏–Ω–∞—é —Ç–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å –ø–æ–¥ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å. –ù–∞—á–Ω—ë–º –æ–±—â–µ–Ω–∏–µ! üöÄ
                    </div>
                </div>
                
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="–°–ø—Ä–æ—Å–∏ –æ —á—ë–º —É–≥–æ–¥–Ω–æ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏...">
                    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>

            <script>
                function addMessage(text, isUser) {
                    const chat = document.getElementById('chat');
                    const message = document.createElement('div');
                    message.className = isUser ? 'message user' : 'message ai';
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –±–ª–æ–∫–∏
                    let formattedText = text;
                    if (text.includes('```')) {
                        formattedText = text.replace(/```(\\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
                    }
                    formattedText = formattedText.replace(/\\n/g, '<br>');
                    
                    if (isUser) {
                        message.innerHTML = '<strong>üë§ –í—ã:</strong><br>' + formattedText;
                    } else {
                        message.innerHTML = '<strong>üß† –ò–ò:</strong><br>' + formattedText;
                    }
                    
                    chat.appendChild(message);
                    chat.scrollTop = chat.scrollHeight;
                }

                async function sendMessage() {
                    const input = document.getElementById('messageInput');
                    const message = input.value.trim();
                    
                    if (!message) return;
                    
                    input.value = '';
                    addMessage(message, true);
                    
                    try {
                        const response = await fetch('/chat', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({message: message})
                        });
                        
                        const data = await response.json();
                        addMessage(data.response, false);
                        
                    } catch (error) {
                        addMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', false);
                    }
                }

                document.getElementById('messageInput').addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') sendMessage();
                });

                document.getElementById('messageInput').focus();
            </script>
        </body>
        </html>
        '''
        self.wfile.write(html.encode('utf-8'))
    
    def _handle_chat(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            # –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            response = self.ai.generate_smart_response(message)
            
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            self.wfile.write(json.dumps({"response": response}, ensure_ascii=False).encode('utf-8'))
            
        except Exception as e:
            self.send_error(500, f"Error: {str(e)}")
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def log_message(self, format, *args):
        print(f"üåê {format % args}")

if __name__ == '__main__':
    HOST = '0.0.0.0'
    PORT = 8000
    
    print("üß† –ó–∞–ø—É—Å–∫ –£–ú–ù–û–ì–û –ò–ò –ß–∞—Ç–∞...")
    print(f"üìç –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    print("\nüéØ –û–°–û–ë–ï–ù–ù–û–°–¢–ò –£–ú–ù–û–ì–û –ò–ò:")
    print("‚Ä¢ üìù –ü–æ–Ω–∏–º–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    print("‚Ä¢ üß† –ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") 
    print("‚Ä¢ üéØ –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π")
    print("‚Ä¢ üí≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞")
    print("‚Ä¢ üîÑ –£—á–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è")
    
    try:
        server = HTTPServer((HOST, PORT), AIHandler)
        print(f"\n‚úÖ –£–º–Ω—ã–π –ò–ò –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
