from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import os
from datetime import datetime
import time

class SimpleAI:
    def __init__(self):
        self.knowledge = {
            "python": {
                "–±–∞–∑–æ–≤—ã–π": "Python - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –º–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                "–≤–µ–±": "–î–ª—è –≤–µ–±–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Flask (–ø—Ä–æ—Å—Ç–æ–π) –∏–ª–∏ Django (–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π). FastAPI - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è API.",
                "–¥–∞–Ω–Ω—ã–µ": "Pandas –¥–ª—è —Ç–∞–±–ª–∏—Ü, NumPy –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, Matplotlib –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.",
                "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å": "–û—Ç—Å—Ç—É–ø—ã –≤–∞–∂–Ω—ã! 4 –ø—Ä–æ–±–µ–ª–∞. –§—É–Ω–∫—Ü–∏–∏: def, –∫–ª–∞—Å—Å—ã: class, —É—Å–ª–æ–≤–∏—è: if/elif/else, —Ü–∏–∫–ª—ã: for/while."
            },
            "javascript": {
                "–±–∞–∑–æ–≤—ã–π": "JavaScript - —è–∑—ã–∫ –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è.",
                "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: let/const, —Ñ—É–Ω–∫—Ü–∏–∏: function –∏–ª–∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ =>, –æ–±—ä–µ–∫—Ç—ã: {–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ}",
                "–≤–µ–±": "React, Vue, Angular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏. Node.js - JavaScript –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å": "async/await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –ü—Ä–æ–º–∏—Å—ã (Promise) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏."
            },
            "html": {
                "–±–∞–∑–æ–≤—ã–π": "HTML - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –¢–µ–≥–∏: <div>, <p>, <h1>-<h6>, <a>, <img>, <form>",
                "—Å–µ–º–∞–Ω—Ç–∏–∫–∞": "<header>, <nav>, <main>, <section>, <article>, <footer> - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏",
                "—Ñ–æ—Ä–º—ã": "<input>, <textarea>, <select>, <button> - —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º"
            },
            "css": {
                "–±–∞–∑–æ–≤—ã–π": "CSS - —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è. –°–µ–ª–µ–∫—Ç–æ—Ä—ã: .class, #id, tag. –°–≤–æ–π—Å—Ç–≤–∞: color, font-size, margin, padding",
                "flexbox": "display: flex –¥–ª—è –≥–∏–±–∫–∏—ÖÂ∏ÉÂ±Ä. justify-content, align-items, flex-direction",
                "grid": "display: grid –¥–ª—è —Å–µ—Ç–æ–∫. grid-template-columns, grid-gap, grid-area"
            },
            "–æ–æ–ø": {
                "–ø—Ä–∏–Ω—Ü–∏–ø—ã": "–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è - —Å–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.",
                "–∫–ª–∞—Å—Å—ã": "–ö–ª–∞—Å—Å - —à–∞–±–ª–æ–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—ä–µ–∫—Ç - —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞. –ú–µ—Ç–æ–¥—ã - —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–ª–∞—Å—Å–µ.",
                "–ø–∞—Ç—Ç–µ—Ä–Ω—ã": "Singleton, Factory, Observer - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            },
            "–∞–ª–≥–æ—Ä–∏—Ç–º—ã": {
                "—Å–ª–æ–∂–Ω–æ—Å—Ç—å": "O(1) - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è, O(n) - –ª–∏–Ω–µ–π–Ω–∞—è, O(log n) - –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è, O(n¬≤) - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è",
                "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞": "–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (O(n log n)), —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º, –ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è (O(n¬≤))",
                "–ø–æ–∏—Å–∫": "–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫ (O(n)), –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (O(log n)) –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ"
            },
            "–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö": {
                "sql": "–†–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ë–î: MySQL, PostgreSQL. SQL –∑–∞–ø—Ä–æ—Å—ã: SELECT, INSERT, UPDATE, DELETE, JOIN",
                "nosql": "–î–æ–∫—É–º–µ–Ω—Ç–Ω—ã–µ: MongoDB, –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ: Redis, –≥—Ä–∞—Ñ–æ–≤—ã–µ: Neo4j",
                "–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è": "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö. 1NF, 2NF, 3NF - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã"
            },
            "–≤–µ–±": {
                "frontend": "HTML + CSS + JavaScript. –§—Ä–µ–π–º–≤–æ—Ä–∫–∏: React, Vue, Angular. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Webpack, Vite",
                "backend": "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞. Python: Django, Flask. JavaScript: Node.js, Express. Java: Spring",
                "api": "REST API - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥. GraphQL - –≥–∏–±–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã. JSON - —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"
            },
            "–º–æ–±–∏–ª—å–Ω—ã–π": {
                "android": "Kotlin/Java, Android Studio. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: MVVM, Clean Architecture",
                "ios": "Swift, Xcode. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: MVC, MVVM, VIPER",
                "–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π": "Flutter (Dart), React Native (JavaScript). –ï–¥–∏–Ω–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞ –¥–ª—è iOS –∏ Android"
            },
            "git": {
                "–±–∞–∑–æ–≤—ã–π": "git init, git add, git commit, git push, git pull - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                "–≤–µ—Ç–≤–ª–µ–Ω–∏–µ": "git branch, git checkout, git merge - —Ä–∞–±–æ—Ç–∞ —Å –≤–µ—Ç–∫–∞–º–∏",
                "—Å–æ–≤–º–µ—Å—Ç–Ω–∞—è": "git clone, git fetch, git rebase - –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
            }
        }
    
    def get_answer(self, question):
        question_lower = question.lower()
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for category, topics in self.knowledge.items():
            if category in question_lower:
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—â–µ–º –ø–æ–¥—Ç–µ–º—É
                for topic, answer in topics.items():
                    if topic in question_lower:
                        return f"**{category.upper()} - {topic.upper()}:**\n\n{answer}"
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ç–µ–º—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                first_topic = next(iter(topics.items()))
                return f"**{category.upper()}:**\n\n{first_topic[1]}"
        
        # –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
            return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é!\n\n–Ø –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å:\n‚Ä¢ Python, JavaScript, HTML/CSS\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQL, NoSQL)\n‚Ä¢ –í–µ–± –∏ –º–æ–±–∏–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n‚Ä¢ Git –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n\n–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á—ë–º —É–≥–æ–¥–Ω–æ –∏–∑ –º–∏—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üöÄ"
        
        elif any(word in question_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']):
            categories = "\n".join([f"‚Ä¢ {cat}" for cat in self.knowledge.keys()])
            return f"ü§ñ **–ß—Ç–æ —è —É–º–µ—é:**\n\n{categories}\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –æ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ!"
        
        elif any(word in question_lower for word in ['—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–Ω–∞–ø–∏—à–∏ –∫–æ–¥', '–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞']):
            return self._generate_code(question)
        
        elif any(word in question_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Å—è!"
        
        else:
            # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            found_topics = []
            for category, topics in self.knowledge.items():
                if any(word in category for word in question_lower.split()):
                    found_topics.append(category)
                for topic in topics.keys():
                    if any(word in topic for word in question_lower.split()):
                        found_topics.append(f"{category} - {topic}")
            
            if found_topics:
                topics_list = "\n".join([f"‚Ä¢ {topic}" for topic in found_topics[:3]])
                return f"üí° –ü–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å:\n\n{topics_list}\n\n–£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            else:
                return "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –µ—â—ë —É—á—É—Å—å, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n\n‚Ä¢ Python, JavaScript, HTML/CSS\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –û–û–ü\n‚Ä¢ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –í–µ–± –∏ –º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n‚Ä¢ Git –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ! üí°"

    def _generate_code(self, question):
        question_lower = question.lower()
        
        if any(word in question_lower for word in ['python', '–ø–∞–π—Ç–æ–Ω', '–ø–∏—Ç–æ–Ω']):
            return '''```python
# –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ Python
class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def greet(self):
        return f"–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç {self.name}, –º–Ω–µ {self.age} –ª–µ—Ç"
    
    def have_birthday(self):
        self.age += 1
        return f"–¢–µ–ø–µ—Ä—å –º–Ω–µ {self.age} –ª–µ—Ç!"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
student = Student("–ê–Ω–Ω–∞", 20)
print(student.greet())  # –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, –º–Ω–µ 20 –ª–µ—Ç
print(student.have_birthday())  # –¢–µ–ø–µ—Ä—å –º–Ω–µ 21 –ª–µ—Ç!
```'''
        
        elif any(word in question_lower for word in ['javascript', '–¥–∂–∞–≤–∞—Å–∫—Ä–∏–ø—Ç', 'js']):
            return '''```javascript
// –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ JavaScript
class Student {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    
    greet() {
        return `–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ${this.name}, –º–Ω–µ ${this.age} –ª–µ—Ç`;
    }
    
    haveBirthday() {
        this.age += 1;
        return `–¢–µ–ø–µ—Ä—å –º–Ω–µ ${this.age} –ª–µ—Ç!`;
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
const student = new Student("–ê–Ω–Ω–∞", 20);
console.log(student.greet());  // –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, –º–Ω–µ 20 –ª–µ—Ç
console.log(student.haveBirthday());  // –¢–µ–ø–µ—Ä—å –º–Ω–µ 21 –ª–µ—Ç!
```'''
        
        elif any(word in question_lower for word in ['html', '–≤–µ–±', '—Å—Ç—Ä–∞–Ω–∏—Ü']):
            return '''```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f0f0f0;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</h1>
        <p>–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞</p>
        <button onclick="alert('–ü—Ä–∏–≤–µ—Ç!')">–ù–∞–∂–º–∏ –º–µ–Ω—è</button>
    </div>
    
    <script>
        console.log("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
    </script>
</body>
</html>
```'''
        
        else:
            return '''```python
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞
def process_data(data):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        if not data:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        processed = [item * 2 for item in data if item > 0]
        
        # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return {
            'original_length': len(data),
            'processed_length': len(processed),
            'result': processed,
            'average': sum(processed) / len(processed) if processed else 0
        }
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
data = [1, 2, 3, 4, 5]
result = process_data(data)
print(result)
```'''

class SimpleAIHandler(BaseHTTPRequestHandler):
    ai = SimpleAI()
    
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write(HTML.encode('utf-8'))
        else:
            self.send_response(404)
            self.end_headers()
    
    def do_POST(self):
        if self.path == '/api/chat':
            self._handle_chat()
        else:
            self.send_response(404)
            self.end_headers()
    
    def _handle_chat(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            message = data.get('message', '')
            
            if not message:
                self._send_json_response({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}, 400)
                return
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            time.sleep(0.5)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            response = self.ai.get_answer(message)
            
            self._send_json_response({
                'response': response,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            self._send_json_response({'error': str(e)}, 500)
    
    def _send_json_response(self, data, status=200):
        self.send_response(status)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

# –ö—Ä–∞—Å–∏–≤—ã–π HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
HTML = '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üí¨ –ò–ò –ß–∞—Ç –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 0;
        }

        .app {
            max-width: 100%;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            color: white;
            padding: 25px 20px;
            text-align: center;
            box-shadow: 0 2px 20px rgba(0,0,0,0.2);
        }

        .header h1 {
            font-size: 1.6em;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .header p {
            opacity: 0.9;
            font-size: 1em;
            font-weight: 300;
        }

        .messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 16px;
            background: #f8f9fa;
        }

        .message {
            max-width: 85%;
            padding: 16px 20px;
            border-radius: 20px;
            word-wrap: break-word;
            animation: fadeIn 0.4s ease;
            line-height: 1.5;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        @keyframes fadeIn {
            from { 
                opacity: 0; 
                transform: translateY(15px) scale(0.95); 
            }
            to { 
                opacity: 1; 
                transform: translateY(0) scale(1); 
            }
        }

        .user-message {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 8px;
        }

        .ai-message {
            background: white;
            color: #2c3e50;
            border: 1px solid #e0e0e0;
            border-bottom-left-radius: 8px;
        }

        .input-area {
            padding: 20px;
            background: white;
            border-top: 1px solid #e0e0e0;
            display: flex;
            gap: 12px;
            align-items: flex-end;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
        }

        .input-container {
            flex: 1;
            position: relative;
        }

        .input-area textarea {
            width: 100%;
            padding: 16px 60px 16px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 25px;
            resize: none;
            font-family: inherit;
            font-size: 16px;
            background: #f8f9fa;
            transition: all 0.3s;
            max-height: 120px;
            min-height: 60px;
            line-height: 1.4;
        }

        .input-area textarea:focus {
            outline: none;
            border-color: #007bff;
            background: white;
            box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
        }

        .send-btn {
            position: absolute;
            right: 8px;
            bottom: 8px;
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            border: none;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
            box-shadow: 0 2px 8px rgba(0,123,255,0.3);
        }

        .send-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,123,255,0.4);
        }

        .send-btn:active {
            transform: translateY(0);
        }

        .send-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .code-block {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 16px;
            border-radius: 10px;
            margin: 12px 0;
            font-family: 'Courier New', monospace;
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.4;
            overflow-x: auto;
            border-left: 4px solid #3498db;
        }

        .typing-indicator {
            display: none;
            padding: 16px 20px;
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 20px;
            border-bottom-left-radius: 8px;
            color: #666;
            font-style: italic;
            max-width: 85%;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .typing-dots {
            display: inline-block;
        }

        .typing-dots::after {
            content: '...';
            animation: typing 1.5s infinite;
        }

        @keyframes typing {
            0%, 20% { content: '.'; }
            40% { content: '..'; }
            60%, 100% { content: '...'; }
        }

        .timestamp {
            font-size: 0.8em;
            opacity: 0.6;
            margin-top: 8px;
            text-align: right;
        }

        /* –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è */
        @media (max-width: 480px) {
            .header {
                padding: 20px 15px;
            }
            
            .header h1 {
                font-size: 1.4em;
            }
            
            .messages {
                padding: 15px;
                gap: 12px;
            }
            
            .message {
                max-width: 90%;
                padding: 14px 18px;
                font-size: 15px;
            }
            
            .input-area {
                padding: 15px;
            }
            
            .input-area textarea {
                padding: 14px 55px 14px 18px;
                font-size: 15px;
            }
            
            .send-btn {
                width: 40px;
                height: 40px;
            }
        }

        /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
        @media (prefers-color-scheme: dark) {
            .app {
                background: #1a1a1a;
                color: white;
            }
            
            .messages {
                background: #2d2d2d;
            }
            
            .ai-message {
                background: #333;
                color: white;
                border-color: #444;
            }
            
            .input-area {
                background: #1a1a1a;
                border-color: #333;
            }
            
            .input-area textarea {
                background: #333;
                color: white;
                border-color: #444;
            }
            
            .input-area textarea:focus {
                background: #444;
                border-color: #007bff;
            }
            
            .code-block {
                background: #0d1117;
                border-left-color: #58a6ff;
            }
        }
    </style>
</head>
<body>
    <div class="app">
        <div class="header">
            <h1>üí¨ –ò–ò –ß–∞—Ç –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</h1>
            <p>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</p>
        </div>

        <div class="messages" id="messages">
            <div class="message ai-message">
                <strong>üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫!</strong><br><br>
                –Ø –∑–Ω–∞—é –≤—Å—ë –æ:<br>
                ‚Ä¢ Python, JavaScript, HTML/CSS<br>
                ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏ –û–û–ü<br>
                ‚Ä¢ –ë–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö (SQL/NoSQL)<br>
                ‚Ä¢ –í–µ–± –∏ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ<br>
                ‚Ä¢ Git –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö<br><br>
                –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –æ —á—ë–º —É–≥–æ–¥–Ω–æ! üöÄ
            </div>
        </div>

        <div class="input-area">
            <div class="input-container">
                <textarea id="messageInput" placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏..." rows="1"></textarea>
                <button class="send-btn" id="sendButton" onclick="sendMessage()">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                    </svg>
                </button>
            </div>
        </div>

        <div class="typing-indicator" id="typingIndicator">
            –ò–ò –¥—É–º–∞–µ—Ç –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º<span class="typing-dots"></span>
        </div>
    </div>

    <script>
        let isProcessing = false;

        function addMessage(text, isUser = false) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥ –±–ª–æ–∫–∏
            let formattedText = text.replace(/```(\w+)?\n([\s\S]*?)```/g, '<div class="code-block">$2</div>');
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
            formattedText = formattedText.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            formattedText = formattedText.replace(/\n/g, '<br>');
            
            // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (isUser) {
                const timestamp = new Date().toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                formattedText += `<div class="timestamp">${timestamp}</div>`;
            }
            
            messageDiv.innerHTML = formattedText;
            messagesDiv.appendChild(messageDiv);
            
            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            messagesDiv.scrollTo({
                top: messagesDiv.scrollHeight,
                behavior: 'smooth'
            });
        }

        function showTypingIndicator() {
            const indicator = document.getElementById('typingIndicator');
            indicator.style.display = 'block';
            document.getElementById('messages').scrollTop = document.getElementById('messages').scrollHeight;
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }

        async function sendMessage() {
            if (isProcessing) return;
            
            const input = document.getElementById('messageInput');
            const button = document.getElementById('sendButton');
            const message = input.value.trim();
            
            if (!message) return;
            
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            isProcessing = true;
            button.disabled = true;
            input.disabled = true;
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input.value = '';
            resetTextarea();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            addMessage(message, true);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            showTypingIndicator();
            
            try {
                const response = await fetch('/api/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });
                
                const data = await response.json();
                
                hideTypingIndicator();
                
                if (data.error) {
                    addMessage(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                } else {
                    addMessage(data.response);
                }
                
            } catch (error) {
                hideTypingIndicator();
                addMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.');
            } finally {
                // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                isProcessing = false;
                button.disabled = false;
                input.disabled = false;
                input.focus();
            }
        }

        function resetTextarea() {
            const textarea = document.getElementById('messageInput');
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
        document.getElementById('messageInput').addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = Math.min(this.scrollHeight, 120) + 'px';
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter (Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        document.getElementById('messageInput').addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.getElementById('messageInput').focus();
    </script>
</body>
</html>
'''

def main():
    port = int(os.environ.get('PORT', 8000))
    server = HTTPServer(('0.0.0.0', port), SimpleAIHandler)
    
    print(f"üöÄ –ò–ò –ß–∞—Ç –ø–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{port}")
    print(f"üì± –ò–¥–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö")
    print("\nüí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("‚Ä¢ üéØ –ë–æ–≥–∞—Ç–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é")
    print("‚Ä¢ üí¨ –ö—Ä–∞—Å–∏–≤—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("‚Ä¢ üì± –ü–æ–ª–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ")
    print("‚Ä¢ üöÄ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã")
    print("‚Ä¢ üíª –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–¥–∞")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == '__main__':
    main()
