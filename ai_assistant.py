from flask import Flask, request, jsonify
import json
from datetime import datetime
import time

app = Flask(__name__)

class SimpleAI:
    def __init__(self):
        self.knowledge = {
            "python": {
                "–±–∞–∑–æ–≤—ã–π": "Python - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –º–æ—â–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                "–≤–µ–±": "–î–ª—è –≤–µ–±–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Flask (–ø—Ä–æ—Å—Ç–æ–π) –∏–ª–∏ Django (–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π). FastAPI - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è API.",
                "–¥–∞–Ω–Ω—ã–µ": "Pandas –¥–ª—è —Ç–∞–±–ª–∏—Ü, NumPy –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, Matplotlib –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.",
                "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å": "–û—Ç—Å—Ç—É–ø—ã –≤–∞–∂–Ω—ã! 4 –ø—Ä–æ–±–µ–ª–∞. –§—É–Ω–∫—Ü–∏–∏: def, –∫–ª–∞—Å—Å—ã: class, —É—Å–ª–æ–≤–∏—è: if/elif/else, —Ü–∏–∫–ª—ã: for/while."
            },
            "javascript": {
                "–±–∞–∑–æ–≤—ã–π": "JavaScript - —è–∑—ã–∫ –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è.",
                "—Å–∏–Ω—Ç–∞–∫—Å–∏—Å": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: let/const, —Ñ—É–Ω–∫—Ü–∏–∏: function –∏–ª–∏ —Å—Ç—Ä–µ–ª–æ—á–Ω—ã–µ =>, –æ–±—ä–µ–∫—Ç—ã: {–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ}",
                "–≤–µ–±": "React, Vue, Angular - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏. Node.js - JavaScript –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å": "async/await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –ü—Ä–æ–º–∏—Å—ã (Promise) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏."
            },
            "html": {
                "–±–∞–∑–æ–≤—ã–π": "HTML - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –¢–µ–≥–∏: <div>, <p>, <h1>-<h6>, <a>, <img>, <form>",
                "—Å–µ–º–∞–Ω—Ç–∏–∫–∞": "<header>, <nav>, <main>, <section>, <article>, <footer> - —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏",
                "—Ñ–æ—Ä–º—ã": "<input>, <textarea>, <select>, <button> - —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º"
            },
            "–æ–æ–ø": {
                "–ø—Ä–∏–Ω—Ü–∏–ø—ã": "–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è - —Å–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.",
                "–∫–ª–∞—Å—Å—ã": "–ö–ª–∞—Å—Å - —à–∞–±–ª–æ–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤. –û–±—ä–µ–∫—Ç - —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞. –ú–µ—Ç–æ–¥—ã - —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–ª–∞—Å—Å–µ."
            },
            "–∞–ª–≥–æ—Ä–∏—Ç–º—ã": {
                "—Å–ª–æ–∂–Ω–æ—Å—Ç—å": "O(1) - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è, O(n) - –ª–∏–Ω–µ–π–Ω–∞—è, O(log n) - –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è, O(n¬≤) - –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è",
                "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞": "–ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (O(n log n)), —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º, –ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è (O(n¬≤))"
            }
        }
    
    def get_answer(self, question):
        question_lower = question.lower()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if any(word in question_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
            return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é!\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ Python, JavaScript, HTML, –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏–ª–∏ –û–û–ü!"
        
        # –ü–æ–º–æ—â—å
        elif any(word in question_lower for word in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å']):
            return "ü§ñ –Ø –º–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å:\n‚Ä¢ Python (–±–∞–∑–æ–≤—ã–π, –≤–µ–±, –¥–∞–Ω–Ω—ã–µ)\n‚Ä¢ JavaScript –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n‚Ä¢ HTML –∏ –≤—ë—Ä—Å—Ç–∫—É\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –û–û–ü\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!"
        
        # –ü–æ–∏—Å–∫ –≤ –∑–Ω–∞–Ω–∏—è—Ö
        for category, topics in self.knowledge.items():
            if category in question_lower:
                for topic, answer in topics.items():
                    if topic in question_lower:
                        return f"**{category.upper()} - {topic.upper()}:**\n\n{answer}"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        if any(word in question_lower for word in ['—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–Ω–∞–ø–∏—à–∏ –∫–æ–¥', '–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞']):
            if 'python' in question_lower:
                return '''```python
# –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ Python
class Student:
    def __init__(self, name):
        self.name = name
    
    def greet(self):
        return f"–ü—Ä–∏–≤–µ—Ç, —è {self.name}!"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
student = Student("–ê–Ω–Ω–∞")
print(student.greet())
```'''
            else:
                return '''```python
# –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä Python
numbers = [1, 2, 3, 4, 5]
squares = [x*x for x in numbers]
print(squares)  # [1, 4, 9, 16, 25]
```'''
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        return "ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ:\n‚Ä¢ Python –∏–ª–∏ JavaScript\n‚Ä¢ HTML –∏–ª–∏ –≤—ë—Ä—Å—Ç–∫–µ\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º–∞—Ö –∏–ª–∏ –û–û–ü\n‚Ä¢ –ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞!"

ai = SimpleAI()

@app.route('/')
def home():
    return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üí¨ –ò–ò –ß–∞—Ç</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .chat-container {
            width: 100%;
            max-width: 400px;
            height: 90vh;
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            display: flex;
            flex-direction: column;
        }
        .header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 20px 20px 0 0;
            text-align: center;
        }
        .messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        .message {
            max-width: 80%;
            padding: 12px 16px;
            border-radius: 18px;
            word-wrap: break-word;
        }
        .user-message {
            background: #007bff;
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 5px;
        }
        .ai-message {
            background: #f1f3f4;
            color: #333;
            border-bottom-left-radius: 5px;
        }
        .input-area {
            padding: 15px;
            display: flex;
            gap: 10px;
            border-top: 1px solid #eee;
        }
        #messageInput {
            flex: 1;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 25px;
            font-size: 16px;
            outline: none;
        }
        #messageInput:focus {
            border-color: #007bff;
        }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background: #0056b3;
        }
        .typing {
            color: #666;
            font-style: italic;
            padding: 10px;
        }
        .code-block {
            background: #2c3e50;
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin: 5px 0;
            font-family: monospace;
            white-space: pre-wrap;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="header">
            <h2>üí¨ –ò–ò –ß–∞—Ç</h2>
            <p>–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</p>
        </div>
        
        <div class="messages" id="messages">
            <div class="message ai-message">
                üëã –ü—Ä–∏–≤–µ—Ç! –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏!
            </div>
        </div>
        
        <div class="input-area">
            <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å...">
            <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
    </div>

    <script>
        function addMessage(text, isUser = false) {
            const messagesDiv = document.getElementById('messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'user-message' : 'ai-message';
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥
            let formattedText = text;
            if (text.includes('```')) {
                formattedText = text.replace(/```(\w+)?\\n([\\s\\S]*?)```/g, '<div class="code-block">$2</div>');
            }
            formattedText = formattedText.replace(/\n/g, '<br>');
            
            messageDiv.innerHTML = formattedText;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message) return;
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
            input.value = '';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            addMessage(message, true);
            
            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: message })
                });
                
                const data = await response.json();
                
                if (data.response) {
                    addMessage(data.response);
                } else {
                    addMessage('–û—à–∏–±–∫–∞: ' + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                }
                
            } catch (error) {
                addMessage('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ Enter
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('messageInput').focus();
    </script>
</body>
</html>
'''

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        
        if not message:
            return jsonify({'error': '–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'})
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        response = ai.get_answer(message)
        
        return jsonify({
            'response': response,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    print("üöÄ –ò–ò –ß–∞—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5000")
    print("üí¨ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å!")
    app.run(host='0.0.0.0', port=5000, debug=False)
